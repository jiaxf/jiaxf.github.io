<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞天雪的技术博客</title>
  <icon>https://www.gravatar.com/avatar/221bd4f690152d292d31dbe2f498412f</icon>
  <subtitle>技术无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiaxf.github.io/"/>
  <updated>2018-11-22T01:14:47.000Z</updated>
  <id>http://jiaxf.github.io/</id>
  
  <author>
    <name>Jiaxf</name>
    <email>jiaxuefeng0@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RServe安装配置</title>
    <link href="http://jiaxf.github.io/2018/11/22/RServe%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://jiaxf.github.io/2018/11/22/RServe安装配置/</id>
    <published>2018-11-22T01:07:04.000Z</published>
    <updated>2018-11-22T01:14:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RServe安装配置"><a href="#RServe安装配置" class="headerlink" title="RServe安装配置"></a>RServe安装配置</h1><ol><li>Rserve的安装与配置<br>Rserve主要是提供远程连接的服务，当然功能是很多的，具体可参考：<a href="https://rforge.net/Rserve/" target="_blank" rel="noopener">https://rforge.net/Rserve/</a></li></ol><p>在安装Rserve之前确保R能够正常运行，并正确配置了R的环境变量。 建议安装R 3.2.5 以上的R版本。</p><h2 id="运行R，安装Rserve包"><a href="#运行R，安装Rserve包" class="headerlink" title="运行R，安装Rserve包"></a>运行R，安装Rserve包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ sudo R</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> install.packages(<span class="string">"Rserve"</span>)</span></span><br></pre></td></tr></table></figure><h2 id="查看Rserve配置"><a href="#查看Rserve配置" class="headerlink" title="查看Rserve配置"></a>查看Rserve配置</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~ R CMD Rserve --RS-settings</span><br><span class="line">Rserve v1.7-3</span><br><span class="line"></span><br><span class="line">config file: /etc/Rserv.conf</span><br><span class="line">working root: /tmp/Rserv</span><br><span class="line">port: 6311</span><br><span class="line">local socket: [none, TCP<span class="built_in">/IP </span>used]</span><br><span class="line">authorization required: <span class="literal">no</span></span><br><span class="line">plain text password: <span class="keyword">not</span> allowed</span><br><span class="line">passwords file: [none]</span><br><span class="line">allow I/O: <span class="literal">yes</span></span><br><span class="line">allow remote access: <span class="literal">no</span></span><br><span class="line">control commands: <span class="literal">no</span></span><br><span class="line">interactive: <span class="literal">yes</span></span><br><span class="line">max.input buffer size: 262144 kB</span><br></pre></td></tr></table></figure><pre><code>config file: 本地无此文件/etc/Rserv.confworking root: R运行时工作目录 /tmp/Rservport: 端口6311local socket: TCP/IP协议authorization: 认证未开启plain text password: 不允许明文密码passwords file: 密码文件，未指定allow I/O: 允许IO操作allow remote access: 远程访问未开启control commands: 命令控制未开启interactive: 允许通信max.input buffer size: 文件上传限制262mb</code></pre><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ sudo <span class="keyword">vi</span> /etc/Rserv.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure><pre><code>workdir /tmp/Rservremote enablefileio enableauth requiredplaintext enablefileio enableinteractive yesport 6311maxinbuf 262144encoding utf8control enable</code></pre><h2 id="开启远程访问权限后配置信息"><a href="#开启远程访问权限后配置信息" class="headerlink" title="开启远程访问权限后配置信息"></a>开启远程访问权限后配置信息</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~ R CMD Rserve --RS-settings</span><br><span class="line">Rserve v1.7-3</span><br><span class="line"></span><br><span class="line">config file: /etc/Rserv.conf</span><br><span class="line">working root: /tmp/Rserv</span><br><span class="line">port: 6311</span><br><span class="line">local socket: [none, TCP<span class="built_in">/IP </span>used]</span><br><span class="line">authorization required: <span class="literal">yes</span></span><br><span class="line">plain text password: allowed</span><br><span class="line">passwords file: [none]</span><br><span class="line">allow I/O: <span class="literal">yes</span></span><br><span class="line">allow remote access: <span class="literal">yes</span></span><br><span class="line">control commands: <span class="literal">yes</span></span><br><span class="line">interactive: <span class="literal">yes</span></span><br><span class="line">max.input buffer size: 262144 kB</span><br></pre></td></tr></table></figure><h2 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ R <span class="keyword">CMD</span><span class="bash"> Rserve --RS-conf /etc/Rserv.conf</span></span><br></pre></td></tr></table></figure><h2 id="启动Rserve远程模式"><a href="#启动Rserve远程模式" class="headerlink" title="启动Rserve远程模式"></a>启动Rserve远程模式</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ R <span class="keyword">CMD</span><span class="bash"> Rserve --RS-enable-remote</span></span><br></pre></td></tr></table></figure><h2 id="查看启动后Rserve端口"><a href="#查看启动后Rserve端口" class="headerlink" title="查看启动后Rserve端口"></a>查看启动后Rserve端口</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ netstat -nltp|<span class="type">grep</span> Rserve</span><br></pre></td></tr></table></figure><blockquote><p>tcp  0   0 0.0.0.0:6311   0.0.0.0:*   LISTEN  73821/Rserve<br>0.0.0.0:6311 代表不受限的IP访问</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RServe安装配置&quot;&gt;&lt;a href=&quot;#RServe安装配置&quot; class=&quot;headerlink&quot; title=&quot;RServe安装配置&quot;&gt;&lt;/a&gt;RServe安装配置&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Rserve的安装与配置&lt;br&gt;Rserve主要是提供远程连接的
      
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="R" scheme="http://jiaxf.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>R语言初步</title>
    <link href="http://jiaxf.github.io/2018/11/20/R%E8%AF%AD%E8%A8%80%E5%88%9D%E6%AD%A5/"/>
    <id>http://jiaxf.github.io/2018/11/20/R语言初步/</id>
    <published>2018-11-20T05:20:07.000Z</published>
    <updated>2018-11-20T05:37:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R语言初步"><a href="#R语言初步" class="headerlink" title="R语言初步"></a>R语言初步</h1><p>常用R对象</p><ul><li>向量</li><li>列表</li><li>矩阵</li><li>数组</li><li>因子</li><li>数据帧</li></ul><p>向量对象有六种数据类型的原子向量，也称为六类向量。 其他R对象是建立在原子向量之上的。六类向量类型如下表所示</p><p><img src="/img/R1.png" alt=""></p><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>当要创建具有多个元素的向量时，应该使用<code>c()</code>函数，表示将元素组合成一个向量。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a vector.</span></span><br><span class="line">apple &lt;- c(<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">"yellow"</span>);</span><br><span class="line"><span class="built_in">print</span>(apple);</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the class of the vector.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="class"><span class="keyword">class</span>(<span class="title">apple</span>));</span></span><br></pre></td></tr></table></figure><p>R上面示例代码，执行结果如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> apple &lt;- c(<span class="string">'red'</span>,<span class="string">'green'</span>,<span class="string">"yellow"</span>);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">print</span>(apple);</span></span><br><span class="line">[1] "red"    "green"  "yellow"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">print</span>(class(apple));</span></span><br><span class="line">[1] "character"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表是一个R对象，它可以包含许多不同类型的元素，如向量，函数，甚至其中的另一个列表。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Create a <span class="type">list</span>.</span><br><span class="line">list1 &lt;- <span class="type">list</span>(c(<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>),<span class="number">21.3</span>,sin);</span><br><span class="line"></span><br><span class="line"># Print the <span class="type">list</span>.</span><br><span class="line">print(list1);</span><br></pre></td></tr></table></figure></p><p>R上面示例代码，执行结果如下<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[[1]]</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="string">[[2]]</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">21.3</span></span><br><span class="line"></span><br><span class="line"><span class="string">[[3]]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">(x)</span></span>  .Primitive(<span class="string">"sin"</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;R语言初步&quot;&gt;&lt;a href=&quot;#R语言初步&quot; class=&quot;headerlink&quot; title=&quot;R语言初步&quot;&gt;&lt;/a&gt;R语言初步&lt;/h1&gt;&lt;p&gt;常用R对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向量&lt;/li&gt;
&lt;li&gt;列表&lt;/li&gt;
&lt;li&gt;矩阵&lt;/li&gt;
&lt;li&gt;数组&lt;
      
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="R" scheme="http://jiaxf.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s Encrypt通配符证书开启HTTPS</title>
    <link href="http://jiaxf.github.io/2018/06/12/Let&#39;s%20Encrypt%E9%80%9A%E9%85%8D%E7%AC%A6%E8%AF%81%E4%B9%A6%E5%BC%80%E5%90%AFHTTPS/"/>
    <id>http://jiaxf.github.io/2018/06/12/Let&#39;s Encrypt通配符证书开启HTTPS/</id>
    <published>2018-06-12T07:50:50.000Z</published>
    <updated>2018-06-13T07:43:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Let’s-Encrypt通配符证书开启HTTPS"><a href="#Let’s-Encrypt通配符证书开启HTTPS" class="headerlink" title="Let’s Encrypt通配符证书开启HTTPS"></a>Let’s Encrypt通配符证书开启HTTPS</h1><h2 id="什么是Let’s-Encrypt"><a href="#什么是Let’s-Encrypt" class="headerlink" title="什么是Let’s Encrypt?"></a>什么是Let’s Encrypt?</h2><p>部署 HTTPS 网站的时候需要证书，证书由 CA 机构签发，大部分传统 CA 机构签发证书是需要收费的，这不利于推动 HTTPS 协议的使用。</p><p>Let’s Encrypt 也是一个 CA 机构，但这个 CA 机构是免费的！也就是说签发证书不需要任何费用。</p><h2 id="什么是通配符证书"><a href="#什么是通配符证书" class="headerlink" title="什么是通配符证书"></a>什么是通配符证书</h2><p>在没有出现通配符证书之前，Let’s Encrypt 支持两种证书。</p><p>1）单域名证书：证书仅仅包含一个主机。</p><p>2）SAN 证书：一张证书可以包括多个主机（Let’s Encrypt 限制是 20），也就是证书可以包含下列的主机：<a href="http://www.example.com、www.example.cn、blog.example.com" target="_blank" rel="noopener">www.example.com、www.example.cn、blog.example.com</a> 等等。</p><p>证书包含的主机可以不是同一个注册域，不要问我注册域是什么？注册域就是向域名注册商购买的域名。</p><p>对于个人用户来说，由于主机并不是太多，所以使用 SAN 证书完全没有问题，但是对于大公司来说有一些问题：</p><p>子域名非常多，而且过一段时间可能就要使用一个新的主机。</p><p>注册域也非常多。</p><p>读者可以思考下，对于大企业来说，SAN 证书可能并不能满足需求，类似于 sina 这样的网站，所有的主机全部包含在一张证书中，而使用 Let’s Encrypt 证书是无法满足的。</p><h2 id="Let’s-Encrypt-通配符证书"><a href="#Let’s-Encrypt-通配符证书" class="headerlink" title="Let’s Encrypt 通配符证书"></a>Let’s Encrypt 通配符证书</h2><p>通配符证书就是证书中可以包含一个通配符，比如 .example.com、.example.cn，读者很快明白，大型企业也可以使用通配符证书了，一张证书可以防止更多的主机了。</p><p>这个功能可以说非常重要，从功能上看 Let’s Encrypt 和传统 CA 机构没有什么区别了，会不会触动传统 CA 机构的利益呢？</p><h2 id="如何申请Let’s-Encrypt通配符证书"><a href="#如何申请Let’s-Encrypt通配符证书" class="headerlink" title="如何申请Let’s Encrypt通配符证书"></a>如何申请Let’s Encrypt通配符证书</h2><p>为了实现通配符证书，Let’s Encrypt 对 ACME 协议的实现进行了升级，只有 v2 协议才能支持通配符证书。</p><p>也就是说任何客户端只要支持 ACME v2 版本，就可以申请通配符证书了，是不是很激动。</p><p>读者可以查看下自己惯用的客户端是不是支持 ACME v2 版本，官方介绍 Certbot 0.22.0 版本支持新的协议版本，我立刻进行了升级：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./certbot-auto -V</span><br><span class="line">Upgrading certbot-auto <span class="number">0.21</span><span class="number">.1</span> to <span class="number">0.22</span><span class="number">.0</span>...</span><br><span class="line">Replacing certbot-auto...</span><br><span class="line"></span><br><span class="line">./certbot-auto -V</span><br><span class="line">certbot <span class="number">0.22</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></p><p>在了解该协议之前有几个注意点：</p><p>1）客户在申请 Let’s Encrypt 证书的时候，需要校验域名的所有权，证明操作者有权利为该域名申请证书，目前支持三种验证方式：</p><p>dns-01：给域名添加一个 DNS TXT 记录。</p><p>http-01：在域名对应的 Web 服务器下放置一个 HTTP well-known URL 资源文件。</p><p>tls-sni-01：在域名对应的 Web 服务器下放置一个 HTTPS well-known URL 资源文件。</p><p>而申请通配符证书，只能使用 dns-01 的方式。</p><p>2）ACME v2 和 v1 协议是互相不兼容的，为了使用 v2 版本，客户端需要创建另外一个账户（代表客户端操作者），以 Certbot 客户端为例，大家可以查看：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tree /etc/letsencrypt/accounts</span><br><span class="line">.</span><br><span class="line">├── acme-staging<span class="selector-class">.api</span><span class="selector-class">.letsencrypt</span><span class="selector-class">.org</span></span><br><span class="line">└── acme-v01<span class="selector-class">.api</span><span class="selector-class">.letsencrypt</span><span class="selector-class">.org</span></span><br></pre></td></tr></table></figure></p><p>3）Enumerable Orders 和限制</p><p>为了实现通配符证书，Let’s Encrypt 在申请者身份校验上做了很大的改变。</p><p>有了订单 ID 的概念，主要是为了追踪通配符域名。</p><p>申请限制，在 V1 版本，Let’s Encrypt 为了避免滥操作，对申请证书有一些限制（很难学习，但是正常使用不会遇到该限制）。而 v2 版本，对于通配符证书，多了一个限制，New Orders per Account（每个证书订单数限制）。</p><p>这两个细节，后续再仔细研究。</p><h2 id="实践测试"><a href="#实践测试" class="headerlink" title="实践测试"></a>实践测试</h2><p>我迫不及待想使用 Certbot 申请通配符证书，升级 Certbot 版本运行下列命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ certbot-auto certonly  -d *.newyingyong.cn --manual --preferred-challenges dns</span><br><span class="line"></span><br><span class="line">Saving <span class="builtin-name">debug</span> log <span class="keyword">to</span> /var/log/letsencrypt/letsencrypt.log</span><br><span class="line">Plugins selected: Authenticator manual, Installer None</span><br><span class="line">Obtaining a new certificate</span><br><span class="line">The currently selected ACME CA endpoint does <span class="keyword">not</span> support issuing wildcard certificates.</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>certonly，插件，Certbot 有很多插件，不同的插件都可以申请证书，用户可以根据需要自行选择<br>-d 为那些主机申请证书，如果是通配符，输入 *.newyingyong.cn<br>–preferred-challenges dns，使用 DNS 方式校验域名所有权<br>接下去就是命令行的输出：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Saving debug log <span class="keyword">to</span> /var/log/letsencrypt/letsencrypt.log</span><br><span class="line">Plugins selected: Authenticator manual, Installer None</span><br><span class="line">Enter email address (used <span class="keyword">for</span> urgent renewal <span class="keyword">and</span> security notices) (Enter <span class="symbol">'c</span>' <span class="keyword">to</span></span><br><span class="line">cancel): ywdblog@gmail.com</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------</span></span><br><span class="line">Please read the Terms <span class="keyword">of</span> Service at</span><br><span class="line">https://letsencrypt.org/documents/LE-SA-v1.<span class="number">2</span>-November-<span class="number">15</span>-<span class="number">2017</span>.pdf. You must</span><br><span class="line">agree <span class="keyword">in</span> order <span class="keyword">to</span> <span class="keyword">register</span> <span class="keyword">with</span> the ACME server at</span><br><span class="line">https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------</span></span><br><span class="line">(A)gree/(C)ancel: A</span><br><span class="line"></span><br><span class="line">Plugins selected: Authenticator manual, Installer None</span><br><span class="line">Obtaining a <span class="keyword">new</span> certificate</span><br><span class="line">Performing the following challenges:</span><br><span class="line">dns-<span class="number">01</span> challenge <span class="keyword">for</span> newyingyong.cn</span><br><span class="line"></span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="literal">NOTE</span>: The IP <span class="keyword">of</span> this machine will be publicly logged as having requested this</span><br><span class="line">certificate. <span class="keyword">If</span> you<span class="symbol">'re</span> running certbot <span class="keyword">in</span> manual mode <span class="keyword">on</span> a machine that <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">your server, please ensure you<span class="symbol">'re</span> okay <span class="keyword">with</span> that.</span><br><span class="line"></span><br><span class="line">Are you OK <span class="keyword">with</span> your IP being logged?</span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------</span></span><br><span class="line">(Y)es/(N)o: y</span><br></pre></td></tr></table></figure><p>上述有两个交互式的提示：</p><p>是否同意 Let’s Encrypt 协议要求</p><p>询问是否对域名和机器（IP）进行绑定</p><p>确认同意才能继续。</p><p>继续查看命令行的输出，非常关键：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Please deploy a<span class="built_in"> DNS </span>TXT record under the name</span><br><span class="line">_acme-challenge.newyingyong.cn with the following value:</span><br><span class="line"></span><br><span class="line">2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ</span><br><span class="line"></span><br><span class="line">Before continuing, verify the record is deployed.</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Press Enter <span class="keyword">to</span> Continue</span><br><span class="line">Waiting <span class="keyword">for</span> verification<span class="built_in">..</span>.</span><br><span class="line">Cleaning up challenges</span><br></pre></td></tr></table></figure><p>要求配置 DNS TXT 记录，从而校验域名所有权，也就是判断证书申请者是否有域名的所有权。</p><p>上面输出要求给 _acme-challenge.newyingyong.cn 配置一条 TXT 记录，在没有确认 TXT 记录生效之前不要回车执行。</p><p>我使用的是阿里云的域名服务器，登录控制台操作如下图：</p><p><img src="/img/alidns.png" alt=""></p><p>然后输入下列命令确认 TXT 记录是否生效：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ dig  -t txt  _acme-challenge.newyingyong.cn @<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>    </span><br><span class="line"></span><br><span class="line">;; OPT <span class="string">PSEUDOSECTION:</span></span><br><span class="line">; <span class="string">EDNS:</span> <span class="string">version:</span> <span class="number">0</span>, <span class="string">flags:</span>; <span class="string">udp:</span> <span class="number">512</span></span><br><span class="line">;; QUESTION <span class="string">SECTION:</span></span><br><span class="line">;_acme-challenge.newyingyong.cn.        IN      TXT</span><br><span class="line"></span><br><span class="line">;; ANSWER <span class="string">SECTION:</span></span><br><span class="line">_acme-challenge.newyingyong.cn. <span class="number">599</span> IN  TXT     <span class="string">"2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ"</span></span><br></pre></td></tr></table></figure><p>确认生效后，回车执行，输出如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">IMPORTANT <span class="string">NOTES:</span></span><br><span class="line"> - Congratulations! Your certificate and chain have been saved <span class="string">at:</span></span><br><span class="line">   <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/</span>newyingyong.cn/fullchain.pem</span><br><span class="line">   Your key file has been saved <span class="string">at:</span></span><br><span class="line">   <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/</span>newyingyong.cn/privkey.pem</span><br><span class="line">   Your cert will expire on <span class="number">2018</span><span class="number">-06</span><span class="number">-12.</span> To obtain a <span class="keyword">new</span> or tweaked</span><br><span class="line">   version of <span class="keyword">this</span> certificate <span class="keyword">in</span> the future, simply run certbot-auto</span><br><span class="line">   again. To non-interactively renew *all* of your certificates, run</span><br><span class="line">   <span class="string">"certbot-auto renew"</span></span><br><span class="line"> - If you like Certbot, please consider supporting our work <span class="string">by:</span></span><br><span class="line"></span><br><span class="line">   Donating to ISRG <span class="regexp">/ Let's Encrypt:   https:/</span><span class="regexp">/letsencrypt.org/</span>donate</span><br><span class="line">   Donating to <span class="string">EFF:</span>                    <span class="string">https:</span><span class="comment">//eff.org/donate-le</span></span><br></pre></td></tr></table></figure><p>恭喜您，证书申请成功，证书和密钥保存在下列目录：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tree /etc/letsencrypt/archive/newyingyong.cn</span><br><span class="line">.</span><br><span class="line">├── cert1.pem</span><br><span class="line">├── chain1.pem</span><br><span class="line">├── fullchain1.pem</span><br><span class="line">└── privkey1.pem</span><br></pre></td></tr></table></figure><p>然后校验证书信息，输入如下命令：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span>  <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/archive/</span>newyingyong.cn<span class="regexp">/cert1.pem -noout -text</span></span><br></pre></td></tr></table></figure></p><p>关键输出如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Authority Information <span class="string">Access:</span></span><br><span class="line">        OCSP - <span class="string">URI:</span><span class="string">http:</span><span class="comment">//ocsp.int-x3.letsencrypt.org</span></span><br><span class="line">        CA Issuers - <span class="string">URI:</span><span class="string">http:</span><span class="comment">//cert.int-x3.letsencrypt.org/</span></span><br><span class="line"></span><br><span class="line">X509v3 Subject Alternative <span class="string">Name:</span></span><br><span class="line"><span class="symbol">    DNS:</span>*.newyingyong.cn</span><br></pre></td></tr></table></figure></p><p>完美，证书包含了 SAN 扩展，该扩展的值就是 *.newyingyong.cn。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Let’s-Encrypt通配符证书开启HTTPS&quot;&gt;&lt;a href=&quot;#Let’s-Encrypt通配符证书开启HTTPS&quot; class=&quot;headerlink&quot; title=&quot;Let’s Encrypt通配符证书开启HTTPS&quot;&gt;&lt;/a&gt;Let’s Encry
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="https" scheme="http://jiaxf.github.io/tags/https/"/>
    
      <category term="Let&#39;s Encrypt" scheme="http://jiaxf.github.io/tags/Let-s-Encrypt/"/>
    
  </entry>
  
  <entry>
    <title>获取Let&#39;s Encrypt免费通配符证书实现Https</title>
    <link href="http://jiaxf.github.io/2018/06/12/%E8%8E%B7%E5%8F%96Let&#39;sEncrypt%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6/"/>
    <id>http://jiaxf.github.io/2018/06/12/获取Let&#39;sEncrypt免费证书/</id>
    <published>2018-06-12T07:19:50.000Z</published>
    <updated>2018-06-13T05:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取Let’s-Encrypt免费通配符证书实现Https"><a href="#获取Let’s-Encrypt免费通配符证书实现Https" class="headerlink" title="获取Let’s Encrypt免费通配符证书实现Https"></a>获取Let’s Encrypt免费通配符证书实现Https</h1><p>3月14日，Let’s Encrypt的执行董事Josh Aas对外宣布，他们的通配符证书正式上线，用户可以基于此特性轻松部署/开启所有子域名的HTTPS功能。</p><p>Let’s Encrypt 是国外一个公共的免费SSL项目，由 Linux 基金会托管，它的来头不小，由 Mozilla、思科、Akamai、IdenTrust 和 EFF 等组织发起，目的就是向网站自动签发和管理免费证书，以便加速互联网由 HTTP 过渡到 HTTPS，目前 Facebook 等大公司开始加入赞助行列。</p><p>Let’s Encrypt 已经得了 IdenTrust 的交叉签名，这意味着其证书现在已经可以被 Mozilla、Google、Microsoft 和 Apple 等主流的浏览器所信任，用户只需要在 Web 服务器证书链中配置交叉签名，浏览器客户端会自动处理好其它的一切，Let’s Encrypt 安装简单，使用非常方便。</p><h2 id="Linux下获取证书生成工具certbot"><a href="#Linux下获取证书生成工具certbot" class="headerlink" title="Linux下获取证书生成工具certbot"></a>Linux下获取证书生成工具certbot</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//dl.eff.org/certbot-auto</span></span><br><span class="line">chmod a+x certbot-<span class="keyword">auto</span></span><br></pre></td></tr></table></figure><h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell <span class="string">./certbot-auto</span> certonly -d *.你的域名 <span class="params">--manual</span> <span class="params">--preferred-challenges</span> dns <span class="params">--server</span> https:<span class="string">//acme-v02.api.letsencrypt.org/directory</span></span><br></pre></td></tr></table></figure><p>上述有三个交互式的提示：</p><p>是否同意 Let’s Encrypt 协议要求<br>询问是否对域名和机器（IP）进行绑定<br>输入邮箱，给你发送一封验证邮件<br>确认同意才能继续。</p><p>继续查看命令行的输出，非常关键：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Please deploy a<span class="built_in"> DNS </span>TXT record under the name</span><br><span class="line">_acme-challenge.xxx.cn with the following value:</span><br><span class="line"></span><br><span class="line">2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ</span><br><span class="line"></span><br><span class="line">Before continuing, verify the record is deployed.</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Press Enter <span class="keyword">to</span> Continue</span><br><span class="line">Waiting <span class="keyword">for</span> verification<span class="built_in">..</span>.</span><br><span class="line">Cleaning up challenges</span><br></pre></td></tr></table></figure><p>要求给 _acme-challenge.xxx.cn 配置一条 TXT 记录，在没有确认 TXT 记录生效之前不要回车执行。</p><p>然后输入下列命令确认 TXT 记录是否生效：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ dig  -t txt  _acme-challenge.xxx.cn @<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>    </span><br><span class="line"></span><br><span class="line">;; OPT <span class="string">PSEUDOSECTION:</span></span><br><span class="line">; <span class="string">EDNS:</span> <span class="string">version:</span> <span class="number">0</span>, <span class="string">flags:</span>; <span class="string">udp:</span> <span class="number">512</span></span><br><span class="line">;; QUESTION <span class="string">SECTION:</span></span><br><span class="line">;_acme-challenge.xxx.cn.        IN      TXT</span><br><span class="line"></span><br><span class="line">;; ANSWER <span class="string">SECTION:</span></span><br><span class="line">_acme-challenge.xxx.cn. <span class="number">599</span> IN  TXT     <span class="string">"2_8KBE_jXH8nYZ2unEViIbW52LhIqxkg6i9mcwsRvhQ"</span></span><br></pre></td></tr></table></figure><p>确认生效后，回车执行</p><p>恭喜您，证书申请成功，证书和密钥保存在下列目录：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tree /etc/letsencrypt/archive/xxx.cn</span><br><span class="line">.</span><br><span class="line">├── cert1.pem</span><br><span class="line">├── chain1.pem</span><br><span class="line">├── fullchain1.pem</span><br><span class="line">└── privkey1.pem</span><br></pre></td></tr></table></figure><h2 id="证书更新"><a href="#证书更新" class="headerlink" title="证书更新"></a>证书更新</h2><p>证书有效期为三个月，到期之前需要更新证书，更新流程就是重新执行一遍上面的操作，新证书会在你申请证书的日期上加三个月。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;获取Let’s-Encrypt免费通配符证书实现Https&quot;&gt;&lt;a href=&quot;#获取Let’s-Encrypt免费通配符证书实现Https&quot; class=&quot;headerlink&quot; title=&quot;获取Let’s Encrypt免费通配符证书实现Https&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="https" scheme="http://jiaxf.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据介绍与指令大全</title>
    <link href="http://jiaxf.github.io/2018/05/24/Redis%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://jiaxf.github.io/2018/05/24/Redis数据介绍与指令大全/</id>
    <published>2018-05-24T07:41:56.000Z</published>
    <updated>2018-05-24T07:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis数据介绍与指令大全"><a href="#Redis数据介绍与指令大全" class="headerlink" title="Redis数据介绍与指令大全"></a>Redis数据介绍与指令大全</h1><p>作为 Key-value 型数据库,Redis 也提供了键(Key)和键值(Value)的映射关系。但是,除了常规的数值或字符串,Redis 的键值还可以是以下形式之一:</p><ul><li>Lists (列表)</li><li>Sets (集合)</li><li>Sorted sets (有序集合)</li><li>Hashes (哈希表)</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>取最新的n个数据，如读取作家博客最新的50篇文章，通过List实现按时间排序的数据的高效获取</li><li>排行榜应用，以特定条件为排序标准，将其设成sorted set 的score，进而实现高效获取</li><li>需要精准设定过期时间的应用，把sorted set 的 score 值设置成过期时间的时间戳,那么就可以简单地通过过期时间排序,定时清除过期数据了</li><li>计数器应用，Redis 的命令都是原子性的,可以轻松地利用 INCR,DECR 命令来构建计数器系统。</li><li>去除大量数据中的重复数据，将数据放入set中，就能实现对重复数据的排除</li><li>构建队列系统使用 list 可以构建队列系统,使用 sorted set 甚至可以构建有优先级的队列系统。</li><li>实时系统,反垃圾系统通过上面说到的 set 功能,你可以知道一个终端用户是否进行了某个操作,可以找到其操作的集合并进行分析统计对比等。</li><li>Pub/Sub构建实时消息系统</li><li>缓存</li></ol><h2 id="redis数据类型及操作详解"><a href="#redis数据类型及操作详解" class="headerlink" title="redis数据类型及操作详解"></a>redis数据类型及操作详解</h2><h3 id="1-strings类型及操作"><a href="#1-strings类型及操作" class="headerlink" title="1. strings类型及操作"></a>1. strings类型及操作</h3><p><img src="/images/string.png" alt=""></p><h3 id="2-hashes类型及操作"><a href="#2-hashes类型及操作" class="headerlink" title="2. hashes类型及操作"></a>2. hashes类型及操作</h3><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象,相较string,由于使用了zipmap而占用更少的内存</p><p>操作方法：</p><p><img src="/images/hash.png" alt=""></p><h3 id="3-list类型及操作"><a href="#3-list类型及操作" class="headerlink" title="3. list类型及操作"></a>3. list类型及操作</h3><p>list 底层实现是一个双向链表，最大长度为2^32,也可用作栈</p><p>操作方法：</p><p><img src="/images/list.png" alt=""></p><h3 id="4-set类型及操作"><a href="#4-set类型及操作" class="headerlink" title="4. set类型及操作"></a>4. set类型及操作</h3><p>set 是 string 类型的无序集合。set 元素最大可以包含(2 的 32 次方)个元素。set 的是通过 hash table 实现的，hash table 会随着添加或者删除自动的调整大小。调整 hash table 大小时候需要同步(获取写锁)会阻塞其他读写操作。</p><p>操作方法：</p><p><img src="/images/set.png" alt=""></p><h3 id="5-sorted-sets-类型及操作"><a href="#5-sorted-sets-类型及操作" class="headerlink" title="5. sorted sets 类型及操作"></a>5. sorted sets 类型及操作</h3><p>sorted set 在set的基础上增加了一个标识属性，它可以在set添加或修改元素时指定，每次指定，set会自动按标识调整顺序，set的每一个元素都会关联一个double类型的score。使用时往往我们把要排序的字段作为score存储，对象id则作为元素存储。</p><p>操作方法：</p><p><img src="/images/sortedset.png" alt=""></p><h2 id="redis-常用命令"><a href="#redis-常用命令" class="headerlink" title="redis 常用命令"></a>redis 常用命令</h2><h3 id="1-键值相关命令"><a href="#1-键值相关命令" class="headerlink" title="1. 键值相关命令"></a>1. 键值相关命令</h3><p><img src="/images/clientcmd.png" alt=""></p><h3 id="2-服务器相关命令"><a href="#2-服务器相关命令" class="headerlink" title="2. 服务器相关命令"></a>2. 服务器相关命令</h3><p><img src="/images/servercmd.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis数据介绍与指令大全&quot;&gt;&lt;a href=&quot;#Redis数据介绍与指令大全&quot; class=&quot;headerlink&quot; title=&quot;Redis数据介绍与指令大全&quot;&gt;&lt;/a&gt;Redis数据介绍与指令大全&lt;/h1&gt;&lt;p&gt;作为 Key-value 型数据库,Redi
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="redis" scheme="http://jiaxf.github.io/tags/redis/"/>
    
      <category term="缓存" scheme="http://jiaxf.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>redis常用命令总结</title>
    <link href="http://jiaxf.github.io/2018/05/24/redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://jiaxf.github.io/2018/05/24/redis常用命令总结/</id>
    <published>2018-05-24T07:26:22.000Z</published>
    <updated>2018-05-24T07:43:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis常用命令总结"><a href="#redis常用命令总结" class="headerlink" title="redis常用命令总结"></a>redis常用命令总结</h1><h2 id="一、key-pattern-查询相应的key"><a href="#一、key-pattern-查询相应的key" class="headerlink" title="一、key pattern 查询相应的key"></a>一、key pattern 查询相应的key</h2><p>　　（1）redis允许模糊查询key　　有3个通配符  <code>*、?、[]`</code></p><p>　　（2）randomkey：返回随机key　　</p><p>　　（3）type key：返回key存储的类型</p><p>　　（4）exists key：判断某个key是否存在</p><p>　　（5）del key：删除key</p><p>　　（6）rename key newkey：改名</p><p>　　（7）renamenx key newkey：如果newkey不存在则修改成功</p><p>　　（8）move key 1：将key移动到1数据库</p><p>　　（9）ttl key：查询key的生命周期（秒）</p><p>　　（10）expire key 整数值：设置key的生命周期以秒为单位</p><p>　　（11）pexpire key 整数值：设置key的生命周期以毫秒为单位</p><p>　　（12）pttl key：查询key 的生命周期（毫秒）</p><p>　　（13）perisist key：把指定key设置为永久有效</p><h2 id="二、字符串类型的操作"><a href="#二、字符串类型的操作" class="headerlink" title="二、字符串类型的操作"></a>二、字符串类型的操作</h2><p>　　（1）set key value [ex 秒数] [px 毫秒数] [nx/xx]　　</p><p>　　　　　　如果ex和px同时写，则以后面的有效期为准</p><p>　　　　　　nx：如果key不存在则建立</p><p>　　　　　　xx：如果key存在则修改其值</p><p>　　（2）get key：取值</p><p>　　（3）mset key1 value1 key2 value2 一次设置多个值</p><p>　　（4）mget key1 key2 ：一次获取多个值</p><p>　　（5）setrange key offset value：把字符串的offset偏移字节改成value</p><p>　　　　　　　　　　　　　　　　　　如果偏移量 &gt; 字符串长度，该字符自动补0x00</p><p>　　（6）append key value ：把value追加到key 的原值上</p><p>　　（7）getrange key start stop：获取字符串中[start, stop]范围的值</p><p>　　　　　　　　　　　　　　　　　　对于字符串的下标，左数从0开始，右数从-1开始</p><p>　　　　　　　　　　　　　　　　　　注意：当start&gt;length，则返回空字符串</p><p>　　　　　　　　　　　　　　　　　　　　　当stop&gt;=length，则截取至字符串尾</p><p>　　　　　　　　　　　　　　　　　　　　　如果start所处位置在stop右边，则返回空字符串</p><p>　　（8）getset key nrevalue：获取并返回旧值，在设置新值</p><p>　　（9）incr key：自增，返回新值，如果incr一个不是int的value则返回错误，incr一个不存在的key，则设置key为1</p><p>　　（10）incrby key 2：跳2自增</p><p>　　（11）incrbyfloat by 0.7： 自增浮点数　</p><p>　　（12）setbit key offset value：设置offset对应二进制上的值，返回该位上的旧值</p><p>注意：如果offset过大，则会在中间填充0</p><p>　　　offset最大到多少</p><p>　　　2^32-1，即可推出最大的字符串为512M</p><p>　　（13）bitop operation destkey key1 [key2..]    对key1 key2做opecation并将结果保存在destkey上</p><p>　　　　　　　　　　　　　　　　　　　　　　　　　　opecation可以是AND OR NOT XOR</p><p>　　（14）strlen key：取指定key的value值的长度</p><p>　  （15）setex key time value：设置key对应的值value，并设置有效期为time秒</p><h2 id="三、链表操作"><a href="#三、链表操作" class="headerlink" title="三、链表操作"></a>三、链表操作</h2><p>　　Redis的list类型其实就是一个每个子元素都是string类型的双向链表，链表的最大长度是2^32。list既可以用做栈，也可以用做队列。</p><p>　　list的pop操作还有阻塞版本，主要是为了避免轮询</p><p>　　（1）lpush key value：把值插入到链表头部</p><p>　　（2）rpush key value：把值插入到链表尾部</p><p>　　（3）lpop key ：返回并删除链表头部元素</p><p>　　（4）rpop key： 返回并删除链表尾部元素</p><p>　　（5）lrange key start stop：返回链表中[start, stop]中的元素</p><p>　　（6）lrem key count value：从链表中删除value值，删除count的绝对值个value后结束</p><p>　　　　　　　　　　　　　　　　count &gt; 0 从表头删除　　count &lt; 0 从表尾删除　　count=0 全部删除</p><p>　　（7）ltrim key start stop：剪切key对应的链接，切[start, stop]一段并把改制重新赋给key</p><p>　　（8）lindex key index：返回index索引上的值</p><p>　　（9）llen key：计算链表的元素个数</p><p>　　（10）linsert key after|before search value：在key 链表中寻找search，并在search值之前|之后插入value</p><p>　　（11）rpoplpush source dest：把source 的末尾拿出，放到dest头部，并返回单元值</p><p>　　　　应用场景： task + bak 双链表完成安全队列</p><p>　业务逻辑： rpoplpush task bak</p><p>　　　　　　　　　接收返回值并做业务处理</p><p>　　　　　　　　　如果成功则rpop bak清除任务，如果不成功，下次从bak表取任务</p><p>　　（12）brpop，blpop key timeout：等待弹出key的尾/头元素</p><p>　　　　　　　　　　　　　　　　timeout为等待超时时间，如果timeout为0则一直等待下去</p><p>　　　　　　应用场景：长轮询ajax，在线聊天时能用到</p><h2 id="四、hashes类型及操作"><a href="#四、hashes类型及操作" class="headerlink" title="四、hashes类型及操作"></a>四、hashes类型及操作</h2><p>　　Redis hash 是一个string类型的field和value的映射表，它的添加、删除操作都是O(1)（平均）。hash特别适用于存储对象，将一个对象存储在hash类型中会占用更少的内存，并且可以方便的存取整个对象。</p><p>　　配置： hash_max_zipmap_entries 64 #配置字段最多64个</p><p>　　　　　 hash_max_zipmap_value 512 #配置value最大为512字节</p><p>　　（1）hset myhash field value：设置myhash的field为value</p><p>　　（2）hsetnx myhash field value：不存在的情况下设置myhash的field为value</p><p>　　（3）hmset myhash field1 value1 field2 value2：同时设置多个field</p><p>　　（4）hget myhash field：获取指定的hash field</p><p>　　（5）hmget myhash field1 field2：一次获取多个field</p><p>　　（6）hincrby myhash field 5：指定的hash field加上给定的值</p><p>　　（7）hexists myhash field：测试指定的field是否存在</p><p>　　（8）hlen myhash：返回hash的field数量</p><p>　　（9）hdel myhash field：删除指定的field</p><p>　　（10）hkeys myhash：返回hash所有的field</p><p>　　（11）hvals myhash：返回hash所有的value</p><p>　　（12）hgetall myhash：获取某个hash中全部的field及value　</p><p>##　五、集合结构操作</p><p>　　特点：无序性、确定性、唯一性</p><p>　　（1）sadd key value1 value2：往集合里面添加元素</p><p>　　（2）smembers key：获取集合所有的元素</p><p>　　（3）srem key value：删除集合某个元素</p><p>　　（4）spop key：返回并删除集合中1个随机元素（可以坐抽奖，不会重复抽到某人）　　　</p><p>　　（5）srandmember key：随机取一个元素</p><p>　　（6）sismember key value：判断集合是否有某个值</p><p>　　（7）scard key：返回集合元素的个数</p><p>　　（8）smove source dest value：把source的value移动到dest集合中</p><p>　　（9）sinter key1 key2 key3：求key1 key2 key3的交集</p><p>　　（10）sunion key1 key2：求key1 key2 的并集</p><p>　　（11）sdiff key1 key2：求key1 key2的差集</p><p>　　（12）sinterstore res key1 key2：求key1 key2的交集并存在res里　</p><h2 id="六、有序集合"><a href="#六、有序集合" class="headerlink" title="六、有序集合"></a>六、有序集合</h2><p>　　概念：它是在set的基础上增加了一个顺序属性，这一属性在添加修改元素的时候可以指定，每次指定后，zset会自动按新的值调整顺序。可以理解为有两列的mysql表，一列存储value，一列存储顺序，操作中key理解为zset的名字。</p><p>　　和set一样sorted，sets也是string类型元素的集合，不同的是每个元素都会关联一个double型的score。sorted set的实现是skip list和hash table的混合体。</p><p>　　当元素被添加到集合中时，一个元素到score的映射被添加到hash table中，所以给定一个元素获取score的开销是O(1)。另一个score到元素的映射被添加的skip list，并按照score排序，所以就可以有序地获取集合中的元素。添加、删除操作开销都是O(logN)和skip list的开销一致，redis的skip list 实现是双向链表，这样就可以逆序从尾部去元素。sorted set最经常使用方式应该就是作为索引来使用，我们可以把要排序的字段作为score存储，对象的ID当元素存储。</p><p>　　（1）zadd key score1 value1：添加元素</p><p>　　（2）zrange key start stop [withscore]：把集合排序后,返回名次[start,stop]的元素  默认是升续排列  withscores 是把score也打印出来</p><p>　　（3）zrank key member：查询member的排名（升序0名开始）</p><p>　　（4）zrangebyscore key min max [withscores] limit offset N：集合（升序）排序后取score在[min, max]内的元素，并跳过offset个，取出N个</p><p>　　（5）zrevrank key member：查询member排名（降序 0名开始）</p><p>　　（6）zremrangebyscore key min max：按照score来删除元素，删除score在[min, max]之间</p><p>　　（7）zrem key value1 value2：删除集合中的元素</p><p>　　（8）zremrangebyrank key start end：按排名删除元素，删除名次在[start, end]之间的</p><p>　　（9）zcard key：返回集合元素的个数</p><p>　　（10）zcount key min max：返回[min, max]区间内元素数量</p><p>　　（11）zinterstore dest numkeys key1[key2..] [WEIGHTS weight1 [weight2…]] [AGGREGATE SUM|MIN|MAX]</p><p>　　　　　　求key1，key2的交集，key1，key2的权值分别是weight1，weight2</p><p>　　　　　　聚合方法用 sum|min|max</p><p>　　　　　　聚合结果 保存子dest集合内</p><p>　　　　　　注意：weights,aggregate如何理解？</p><p>答：如果有交集，交集元素又有score，score怎么处理？aggregate num-&gt;score相加，min最小score，max最大score，另外可以通过weights设置不同的key的权重，交集时  score*weight</p><h2 id="七、服务器相关命令"><a href="#七、服务器相关命令" class="headerlink" title="七、服务器相关命令"></a>七、服务器相关命令</h2><p>　　（1）ping：测定连接是否存活</p><p>　　（2）echo：在命令行打印一些内容</p><p>　　（3）select：选择数据库</p><p>　　（4）quit：退出连接</p><p>　　（5）dbsize：返回当前数据库中key的数目</p><p>　　（6）info：获取服务器的信息和统计</p><p>　　（7）monitor：实时转储收到的请求</p><p>　　（8）config get 配置项：获取服务器配置的信息</p><p>　　　　 config set 配置项  值：设置配置项信息</p><p>　　（9）flushdb：删除当前选择数据库中所有的key</p><p>　　（10）flushall：删除所有数据库中的所有的key</p><p>　　（11）time：显示服务器时间，时间戳（秒），微秒数</p><p>　　（12）bgrewriteaof：后台保存rdb快照</p><p>　　（13）bgsave：后台保存rdb快照</p><p>　　（14）save：保存rdb快照</p><p>　　（15）lastsave：上次保存时间</p><p>　　（16）shutdown [save/nosave]</p><p>　　注意：如果不小心运行了flushall，立即shutdown nosave，关闭服务器，然后手工编辑aof文件，去掉文件中的flushall相关行，然后开启服务器，就可以倒回原来是数据。如果flushall之后，系统恰好bgwriteaof了，那么aof就清空了，数据丢失。</p><p>　　（17）showlog：显示慢查询</p><p>　　　　　　问：多慢才叫慢？</p><p>　　　　　　答：由slowlog-log-slower-than 10000，来指定（单位为微秒）</p><p>　　　　　　问：服务器存储多少条慢查询记录</p><p>　　　　　　答：由slowlog-max-len 128，来做限制　　　　　　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redis常用命令总结&quot;&gt;&lt;a href=&quot;#redis常用命令总结&quot; class=&quot;headerlink&quot; title=&quot;redis常用命令总结&quot;&gt;&lt;/a&gt;redis常用命令总结&lt;/h1&gt;&lt;h2 id=&quot;一、key-pattern-查询相应的key&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="redis" scheme="http://jiaxf.github.io/tags/redis/"/>
    
      <category term="缓存" scheme="http://jiaxf.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>redis通配符删除</title>
    <link href="http://jiaxf.github.io/2018/05/24/redis%E9%80%9A%E9%85%8D%E7%AC%A6%E5%88%A0%E9%99%A4/"/>
    <id>http://jiaxf.github.io/2018/05/24/redis通配符删除/</id>
    <published>2018-05-24T07:14:45.000Z</published>
    <updated>2018-05-24T07:44:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis通配符删除"><a href="#redis通配符删除" class="headerlink" title="redis通配符删除"></a>redis通配符删除</h1><h2 id="批量删除Key"><a href="#批量删除Key" class="headerlink" title="批量删除Key"></a>批量删除Key</h2><p>Redis 中有删除单个 Key 的指令 DEL，但好像没有批量删除 Key 的指令，不过我们可以借助 Linux 的 xargs 指令来完成这个动作</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-<span class="keyword">cli</span> keys <span class="string">"*"</span> | xargs redis-<span class="keyword">cli</span> del</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果要指定 Redis 数据库访问密码，使用下面的命令</span></span><br><span class="line">redis-<span class="keyword">cli</span> -a password keys <span class="string">"*"</span> | xargs redis-<span class="keyword">cli</span> -a password del  </span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的命令指定数据序号为0，即默认数据库  </span></span><br><span class="line">redis-<span class="keyword">cli</span> -<span class="keyword">n</span> 0 keys <span class="string">"*"</span> | xargs redis-<span class="keyword">cli</span> -<span class="keyword">n</span> 0 del</span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量删除redis 数据库中redis key的方法如下：</span></span><br><span class="line">bin/redis-cli  –h <span class="params">&lt;your_redis_server_IP&gt;</span></span><br><span class="line">                -p  <span class="number">6379</span>  -n  <span class="params">&lt;your database ID&gt;</span></span><br><span class="line">                -a  <span class="params">&lt;your_auth_keys&gt;</span>  keys  <span class="string">"mykeys*"</span>  |  xargs bin/redis-cli -n <span class="params">&lt;your database ID&gt;</span> del</span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除所有Key，可以使用Redis的flushdb和flushall命令</span></span><br><span class="line"><span class="comment">//删除当前数据库中的所有Key  </span></span><br><span class="line">flushdb  </span><br><span class="line"><span class="comment">//删除所有数据库中的key  </span></span><br><span class="line">flushall</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redis通配符删除&quot;&gt;&lt;a href=&quot;#redis通配符删除&quot; class=&quot;headerlink&quot; title=&quot;redis通配符删除&quot;&gt;&lt;/a&gt;redis通配符删除&lt;/h1&gt;&lt;h2 id=&quot;批量删除Key&quot;&gt;&lt;a href=&quot;#批量删除Key&quot; class
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="redis" scheme="http://jiaxf.github.io/tags/redis/"/>
    
      <category term="缓存" scheme="http://jiaxf.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>程序猿灯谜</title>
    <link href="http://jiaxf.github.io/2018/05/04/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%81%AF%E8%B0%9C/"/>
    <id>http://jiaxf.github.io/2018/05/04/程序猿灯谜/</id>
    <published>2018-05-04T08:24:04.000Z</published>
    <updated>2018-05-04T09:04:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="灯谜"><a href="#灯谜" class="headerlink" title="灯谜"></a>灯谜</h1><ol><li><p>老会计喝二锅（打一热门技术）</p></li><li><p>梦中交谈（打一热门技术）</p></li><li><p>连胜六场又赢了（打一知名操作系统）</p></li><li><p>小米大合唱（打一著名互联网厂商）</p></li><li><p>男女生都一样（打一技术术语）</p></li><li><p>不达目的誓不罢休（打一著名网络解决方案提供商）</p></li><li><p>席卷天下，包举宇内，囊括四海，并吞八荒（打一互联网技术）</p></li><li><p>话又说回来了（打一网络安全术语）</p></li><li><p>禽流感（打一常见的PC/服务器故障）</p></li><li><p>深夜造访（打一网络安全术语）</p></li><li><p>屡屡破记录（打一技术术语）</p></li><li><p>单个花生超产（打一芯片技术）</p></li><li><p>驴友上路多郁闷（打一网络设备）</p></li><li><p>月老难扯二人姻缘（打一网络技术）</p></li><li><p>光芒照四方（打一安全厂商）</p></li><li><p>网管抓狂（打一网络设备）</p></li><li><p>悟空出了五指山（打一技术术语）</p></li><li><p>不听话就得打（打一网络安全术语）</p></li><li><p>整个界面都是阿凡达（打一PC/服务器故障现象）</p></li><li><p>E（打一开发语言）</p></li><li><p>拳王的金腰带（打一网络技术）</p></li><li><p>方便月老配对象（打一网络设备）</p></li><li><p>走麦城（打一网络安全设备）</p></li><li><p>皇帝绷着脸（打一设备）</p></li><li><p>太上老君的金丹（打一网络安全术语）</p></li><li><p>王老吉面壁（打一网络安全设备）</p></li></ol><a id="more"></a><p>谜底</p><ol><li><p>老会计喝二锅（打一热门技术）—— 云计算</p></li><li><p>梦中交谈（打一热门技术）—— 虚拟化</p></li><li><p>连胜六场又赢了（打一知名操作系统）—— Win7</p></li><li><p>小米大合唱（打一著名互联网厂商）—— 谷歌</p></li><li><p>男女生都一样（打一技术术语）—— 兼容性</p></li><li><p>不达目的誓不罢休（打一著名网络解决方案提供商）—— 思科</p></li><li><p>席卷天下，包举宇内，囊括四海，并吞八荒（打一互联网技术）—— 广域网</p></li><li><p>话又说回来了（打一网络安全术语） —— 循环语句</p></li><li><p>禽流感（打一常见的PC/服务器故障）—— 死机</p></li><li><p>深夜造访（打一网络安全术语） —— 黑客</p></li><li><p>屡屡破记录（打一技术术语）—— 超频</p></li><li><p>单个花生超产（打一芯片技术） —— 多核</p></li><li><p>驴友上路多郁闷（打一网络设备）—— 路由器</p></li><li><p>月老难扯二人姻缘（打一网络技术）—— 无线</p></li><li><p>光芒照四方（打一安全厂商）—— 金山</p></li><li><p>网管抓狂（打一网络设备）—— 网卡</p></li><li><p>悟空出了五指山（打一技术术语）—— 解压</p></li><li><p>不听话就得打（打一网络安全术语）—— 拒绝服务攻击</p></li><li><p>整个界面都是阿凡达（打一PC/服务器故障现象）—— 蓝屏</p></li><li><p>E（打一开发语言）—— C++</p></li><li><p>拳王的金腰带（打一网络技术）—— 宽带</p></li><li><p>方便月老配对象（打一网络设备）—— 集线器</p></li><li><p>走麦城（打一网络安全设备）—— 网关</p></li><li><p>皇帝绷着脸（打一设备）—— 主板</p></li><li><p>太上老君的金丹（打一网络安全术语）—— 密钥</p></li><li><p>王老吉面壁（打一网络安全设备）—— 防火墙</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;灯谜&quot;&gt;&lt;a href=&quot;#灯谜&quot; class=&quot;headerlink&quot; title=&quot;灯谜&quot;&gt;&lt;/a&gt;灯谜&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;老会计喝二锅（打一热门技术）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;梦中交谈（打一热门技术）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;连胜六场又赢了（打一知名操作系统）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小米大合唱（打一著名互联网厂商）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;男女生都一样（打一技术术语）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不达目的誓不罢休（打一著名网络解决方案提供商）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;席卷天下，包举宇内，囊括四海，并吞八荒（打一互联网技术）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;话又说回来了（打一网络安全术语）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;禽流感（打一常见的PC/服务器故障）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;深夜造访（打一网络安全术语）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;屡屡破记录（打一技术术语）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单个花生超产（打一芯片技术）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;驴友上路多郁闷（打一网络设备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;月老难扯二人姻缘（打一网络技术）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;光芒照四方（打一安全厂商）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网管抓狂（打一网络设备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;悟空出了五指山（打一技术术语）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不听话就得打（打一网络安全术语）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;整个界面都是阿凡达（打一PC/服务器故障现象）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;E（打一开发语言）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拳王的金腰带（打一网络技术）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方便月老配对象（打一网络设备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;走麦城（打一网络安全设备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;皇帝绷着脸（打一设备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;太上老君的金丹（打一网络安全术语）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;王老吉面壁（打一网络安全设备）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="生活乐趣" scheme="http://jiaxf.github.io/tags/%E7%94%9F%E6%B4%BB%E4%B9%90%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>高性能web平台OpenResty</title>
    <link href="http://jiaxf.github.io/2018/05/04/%E9%AB%98%E6%80%A7%E8%83%BDweb%E5%B9%B3%E5%8F%B0OpenResty/"/>
    <id>http://jiaxf.github.io/2018/05/04/高性能web平台OpenResty/</id>
    <published>2018-05-04T06:38:17.000Z</published>
    <updated>2018-05-04T08:15:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高性能web平台OpenResty"><a href="#高性能web平台OpenResty" class="headerlink" title="高性能web平台OpenResty"></a>高性能web平台OpenResty</h1><h2 id="OpenResty®"><a href="#OpenResty®" class="headerlink" title="OpenResty®"></a>OpenResty®</h2><p>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p>OpenResty® 通过汇聚各种设计精良的 Nginx 模块（主要由 OpenResty 团队自主开发），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。</p><p>OpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。</p><p>OpenResty(又称：ngx_openresty) 是一个基于 NGINX 的可伸缩的 Web 平台，由中国人章亦春发起，提供了很多高质量的第三方模块。<br>OpenResty 是一个强大的 Web 应用服务器，Web 开发人员可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块,更主要的是在性能方面，OpenResty可以 快速构造出足以胜任 10K 以上并发连接响应的超高性能 Web 应用系统。</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="macOS-Mac-OS-X"><a href="#macOS-Mac-OS-X" class="headerlink" title="macOS/Mac OS X"></a>macOS/Mac OS X</h3><p>强烈建议 Mac OS X 或者 macOS 系统用户通过 homebrew 包管理器安装 OpenResty，像下面这样：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>tap openresty/<span class="keyword">brew</span></span><br><span class="line"><span class="keyword">brew </span>install openresty</span><br></pre></td></tr></table></figure><p>如果你之前是从 homebrew/nginx 安装的 OpenResty，请先执行：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>untap homebrew/nginx</span><br></pre></td></tr></table></figure><h1 id="Hello-World实例"><a href="#Hello-World实例" class="headerlink" title="Hello World实例"></a>Hello World实例</h1><p>安装成功后，可以使用openresty直接输出html页面。<br>首先可以创建一个工作目录<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /<span class="built_in">home</span>/www</span><br><span class="line">cd /<span class="built_in">home</span>/www/</span><br><span class="line"><span class="built_in">mkdir</span> logs/ conf/</span><br></pre></td></tr></table></figure></p><p>其中，logs目录用于存放日志，conf用于存放配置文件。</p><p>在conf目录下创建一个nginx.conf文件 代码如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">9000</span>;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">default_type</span> text/html;</span><br><span class="line">            <span class="attribute">content_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">                ngx.say("&lt;p&gt;Hello, World!&lt;/p&gt;")</span></span><br><span class="line"><span class="string">            '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动openresty"><a href="#启动openresty" class="headerlink" title="启动openresty"></a>启动openresty</h2><p>默认情况下 openresty 安装在 /usr/local/openresty 目录中，启动命令为:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/home/</span>www</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/openresty/</span>nginx<span class="regexp">/sbin/</span>nginx -p `pwd`<span class="regexp">/ -c conf/</span>nginx.conf</span><br></pre></td></tr></table></figure></p><p>如果没有任何输出，说明启动成功，-p 指定我们的项目目录，-c 指定配置文件。</p><p>接下来我们可以使用 curl 来测试是否能够正常范围：</p><p><code>curl http://localhost:9000/</code></p><p>输出结果为：</p><p><code>&lt;p&gt;Hello, World!&lt;/p&gt;</code></p><p>OpenResty 的目标是让你的 Web 服务直接跑在 Nginx 服务内部,充分利用 Nginx 的非阻塞 I/O 模型,不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL,PostgreSQL,~Memcaches 以及 ~Redis 等都进行一致的高性能响应。<br>所以对于一些高性能的服务来说，可以直接使用 OpenResty 访问 Mysql或Redis等，而不需要通过第三方语言（PHP、Python、Ruby）等来访问数据库再返回，这大大提高了应用的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高性能web平台OpenResty&quot;&gt;&lt;a href=&quot;#高性能web平台OpenResty&quot; class=&quot;headerlink&quot; title=&quot;高性能web平台OpenResty&quot;&gt;&lt;/a&gt;高性能web平台OpenResty&lt;/h1&gt;&lt;h2 id=&quot;OpenR
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务器" scheme="http://jiaxf.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>对称加密&amp;非对称加密</title>
    <link href="http://jiaxf.github.io/2018/05/03/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86&amp;%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>http://jiaxf.github.io/2018/05/03/对称加密&amp;非对称加密/</id>
    <published>2018-05-03T01:27:09.000Z</published>
    <updated>2018-05-03T02:17:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对称加密-DES"><a href="#对称加密-DES" class="headerlink" title="对称加密 - DES"></a>对称加密 - DES</h1><ol><li>真正的加密算法，带密钥，加密和解密使用相同的密钥</li><li>对称加密优点是算法公开、计算量小、加密速度快、加密效率高</li><li>双方都保存秘钥，其次如果一方的秘钥被泄露，那么加密信息也就不安全了。另外，每对用户每次使用对称加密算法时，都需要使用其他人不知道的唯一秘钥，这会使得收、发双方所拥有的钥匙数量巨大，密钥管理成为双方的负担</li><li>DES使用56位密钥，以现代计算能力，24小时内即可被破解。虽然如此，在某些简单应用中，我们还是可以使用DES加密算法</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DES</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datasource byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password   String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> byte[]</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] datasource, String password) &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">              SecureRandom random = <span class="keyword">new</span> SecureRandom();  </span><br><span class="line">              DESKeySpec desKey = <span class="keyword">new</span> DESKeySpec(password.getBytes());  </span><br><span class="line">              <span class="comment">//创建一个密匙工厂，然后用它把DESKeySpec转换成  </span></span><br><span class="line">              SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);  </span><br><span class="line">              SecretKey securekey = keyFactory.generateSecret(desKey);  </span><br><span class="line">              <span class="comment">//Cipher对象实际完成加密操作  </span></span><br><span class="line">              Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);  </span><br><span class="line">              <span class="comment">//用密匙初始化Cipher对象,Cipher.ENCRYPT_MODE代表编码模式  </span></span><br><span class="line">              cipher.init(Cipher.ENCRYPT_MODE, securekey, random);  </span><br><span class="line">              <span class="comment">//现在，获取数据并加密  </span></span><br><span class="line">              <span class="comment">//正式执行加密操作  </span></span><br><span class="line">              <span class="function"><span class="keyword">return</span> cipher.<span class="title">doFinal</span><span class="params">(datasource)</span></span>;  </span><br><span class="line">          &#125; <span class="keyword">catch</span> (Throwable e) &#123;  </span><br><span class="line">              e.printStackTrace();  </span><br><span class="line">          &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src      byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] src, String password) <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">      <span class="comment">// DES算法要求有一个可信任的随机数源  </span></span><br><span class="line">      SecureRandom random = <span class="keyword">new</span> SecureRandom();  </span><br><span class="line">      <span class="comment">// 创建一个DESKeySpec对象  </span></span><br><span class="line">      DESKeySpec desKey = <span class="keyword">new</span> DESKeySpec(password.getBytes());  </span><br><span class="line">      <span class="comment">// 创建一个密匙工厂  </span></span><br><span class="line">      SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);  </span><br><span class="line">      <span class="comment">// 将DESKeySpec对象转换成SecretKey对象  </span></span><br><span class="line">      SecretKey securekey = keyFactory.generateSecret(desKey);  </span><br><span class="line">      <span class="comment">// Cipher对象实际完成解密操作  </span></span><br><span class="line">      Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);  </span><br><span class="line">      <span class="comment">// 用密匙初始化Cipher对象  </span></span><br><span class="line">      cipher.init(Cipher.DECRYPT_MODE, securekey, random);  </span><br><span class="line">      <span class="comment">// 真正开始解密操作  </span></span><br><span class="line">      <span class="function"><span class="keyword">return</span> cipher.<span class="title">doFinal</span><span class="params">(src)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="非对称加密-RSA"><a href="#非对称加密-RSA" class="headerlink" title="非对称加密 - RSA"></a>非对称加密 - RSA</h1><p>1、用RSA算法生成一对密钥，公钥发放给外部客户，私钥自己保管；有以下应用场景：<br>     【公钥加密、私钥解密】或者【私钥签名、公钥验证】<br>2、非对称加解密的理解：</p><ul><li>小明想秘密给小英发送消息</li><li>小英手里有一个盒子（public key），这个盒子只有小英手里的钥匙（private key）才打得开</li><li>小英把盒子送给小明（分发公钥）</li><li>小明写好消息放进盒子里，锁上盒子（公钥加密）</li><li>小明把盒子寄给小英（密文传输）</li><li>小英用手里的钥匙打开盒子，得到小明的消息（私钥解密）</li><li>假设小刚劫持了盒子，因为没有小英的钥匙，他也打不开</li></ul><p>与DES不同，RSA算法中，每个通信主体都有两个钥匙，一个公钥一个私钥。<br>就是有2把钥匙</p><ol><li>使用publicKey可以对数据进行加密</li><li>使用Key才能对数据进行解密</li></ol><p>单方向传输<br>用公钥加密的数据，只有私钥能解开（可用于加密）；<br>同时，使用私钥加密的数据，只有公钥能解开（签名）。但是速度很慢（比私钥加密慢100到1000倍），<br>公钥的主要算法有RSA，还包括Blowfish,Diffie-Helman等。</p><p>公钥与私钥</p><ol><li>权威数字认证机构（CA）给所有通信主体（个人或组织）颁发公钥和私钥，彼此配对，分别唯一。</li><li>私钥好比数字指纹，同时具有解密和加密功能。个人保管，不公开。</li><li>公钥好比安全性极高的挂号信箱地址，公开。</li></ol><p><em>公私钥加解密举例</em></p><p><img src="/images/20160122203001725.jpeg" alt=""></p><p>设若甲有一份需保密的数字商业合同发给乙签署。经过如下步骤：</p><ol><li>甲用乙的公钥对合同加密。</li><li>密文从甲发送到乙。</li><li>乙收到密文，并用自己的私钥对其解密。</li><li>解密正确，经阅读，乙用自己的私钥对合同进行签署。</li><li>乙用甲的公钥对已经签署的合同进行加密。</li><li>乙将密文发给甲。</li><li>甲用自己的私钥将已签署合同解密。</li><li>解密正确，确认签署。</li></ol><p>公私钥加解密说明<br>从以上步骤，我们知道：</p><ol><li>用公钥加密的密文能且只能用与其唯一配对的私钥才能解开。</li><li>如果某份密文被解开，那么肯定是密文的目标信息主体解开的。</li><li>私钥因其唯一标识所有者的属性，被用于数字签名，具有法律效力。</li></ol><p>一。 公私钥生成</p><ol><li>随机选定两个大素数p, q.</li><li>计算公钥和私钥的公共模数 n = pq .</li><li>计算模数n的欧拉函数 φ(n) .</li><li>选定一个正整数e, 使1 &lt; e &lt; φ(n) , 且e与φ(n)互质.</li><li>计算d, 满足 de ≡ 1  (mod φ(n) ), (k为某个正整数).<br>6.n与e决定公钥, n与d决定私钥.</li></ol><p>二。加解密<br>该过程为小张给小李发消息，公钥为小李的公钥(n &amp; e), 私钥为小李的私钥(n &amp; d).</p><ol><li>小张欲给小李发一个消息M, 他先把M转换为一个大数m &lt; n, 然后用小李的公钥(n &amp; e)把m加密为另一个大数:<br>c = me    mod n</li><li>小李收到小张发来的大数c, 着手解密. 通过自己的私钥(n &amp; d), 得到原来的大数m:<br>m = cd    mod n<br>3.再把m转换为M, 小李即得到小张的原始消息.</li></ol><p>这个过程之所以能通过, 是因为有如下等式:<br>  cd ≡(me)d ≡med    (mod n)</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/program008/article/details/50563944" target="_blank" rel="noopener">编码和加密算法的使用（MD5、Base64、DES、RSA）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对称加密-DES&quot;&gt;&lt;a href=&quot;#对称加密-DES&quot; class=&quot;headerlink&quot; title=&quot;对称加密 - DES&quot;&gt;&lt;/a&gt;对称加密 - DES&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;真正的加密算法，带密钥，加密和解密使用相同的密钥&lt;/li&gt;
&lt;li&gt;对称
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="加密" scheme="http://jiaxf.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="解密" scheme="http://jiaxf.github.io/tags/%E8%A7%A3%E5%AF%86/"/>
    
      <category term="算法" scheme="http://jiaxf.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MD5、SHA1、HMAC、HMAC_SHA1区别</title>
    <link href="http://jiaxf.github.io/2018/05/02/MD5%E3%80%81SHA1%E3%80%81HMAC%E3%80%81HMAC_SHA1/"/>
    <id>http://jiaxf.github.io/2018/05/02/MD5、SHA1、HMAC、HMAC_SHA1/</id>
    <published>2018-05-02T07:43:02.000Z</published>
    <updated>2018-05-03T01:16:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MD5、SHA1、HMAC、HMAC-SHA1区别"><a href="#MD5、SHA1、HMAC、HMAC-SHA1区别" class="headerlink" title="MD5、SHA1、HMAC、HMAC_SHA1区别"></a>MD5、SHA1、HMAC、HMAC_SHA1区别</h1><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>MD5 – message-digest algorithm 5(信息-摘要算法)缩写，是一种不可逆的加密算法，对任何字符串都可以加密成一段唯一的固定长度的代码。可以是128位。<br>MD5码可以唯一地代码原信息的特征，通常用于密码的加密存储，数字签名，文件完整性验证等。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * MD5加密  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptMD5(<span class="keyword">byte</span> [] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  MessageDigest md5 = MessageDigest.getInstance(KEY_MD5);</span><br><span class="line">  md5.update(data);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">return</span> md5.<span class="title">digest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h2><p>SHA(Secure Hash Algorithm,安全散列算法)，较MD5更安全。<br>SHA1是由NISTNSA设计，对长度小于264的输入，产生长度为160bit的散列值，可穷举性(brute-force<br>  )更好。SHA-1是由美国标准技术局（NIST）颁布的国家标准，是一种应用最为广泛的Hash函数算法，也是<br>  目前最先进的加密技术，被政府部门和私营业主用来处理敏感信息。也常用于验证文件有没有被篡改。</p>  <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptSHA(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  MessageDigest sha = MessageDigest.getInstance(KEY_SHA);</span><br><span class="line">  sha.update(data);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">return</span> sha.<span class="title">digest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HMAC-SHA1"><a href="#HMAC-SHA1" class="headerlink" title="HMAC_SHA1"></a>HMAC_SHA1</h2><p>HMAC是密钥相关的哈希运算消息认证码(Hash-based Message Authentication Code, 散列消息鉴别码),HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生产一个消息摘要作为输出。消息鉴别码实现鉴别的原理是，<br>用公开函数和密钥产生一个固定长度的值作为认证标识，用这个标识鉴别消息的完整性。使用一个密钥生成一个<br>固定大小的小数据块，即MAC,并将其加入到消息中，然后传输。接收方利用与发送方共享的密钥进行鉴别认证等。</p><p>HMAC_SHA1需要一个密钥，而SHA1不需要。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 初始化HMAC密钥  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">initMacKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  Keygenerator keyGenerator = KeyGenerator.getInstance(KEY_MAC);</span><br><span class="line"></span><br><span class="line">  SecretKey secretKey = keyGenerator.geterateKey();</span><br><span class="line">  <span class="keyword">return</span> encryptBASE64(secretKey.getEncoded());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * HMAC加密  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptHMAC(<span class="keyword">byte</span>[] data, String key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(decryptBASE64(key), KEY_MAC);</span><br><span class="line">  Mac mac = Mac.getInstance(secretKey.getAlgorithm());</span><br><span class="line">  mac.init(secretKey);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">return</span> mac.<span class="title">doFinal</span><span class="params">(data)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CRC"><a href="#CRC" class="headerlink" title="CRC"></a>CRC</h2><p>CRC的全称为CyclicRedundancyCheck，中文名称为循环冗余校验。它是一类重要的线性分组码，编码和解码方法<br>简单，检错和纠错能力强，在通信领域广泛地用于实现差错控制。</p><h2 id="BASE64"><a href="#BASE64" class="headerlink" title="BASE64"></a>BASE64</h2><p>按照RFC2045的定义，Base64被定义为：Base64内容传送编码被设计用来把任意序列的8位字节描述为一种<br>不易被人直接识别的形式。（The Base64 Content-Transfer-Encoding is designed to represent<br> brbitrary sequences of octets in a form that need not be humamly readable.）</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>BASE64解密  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*   </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@param key  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@return  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@throws Exception  </span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line">public <span class="keyword">static</span> byte[] decryptBASE64(<span class="built_in">String</span> key) throws Exception &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Decoder()).decodeBuffer(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>BASE64加密  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*   </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@param key  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@return  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@throws Exception  </span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span>    </span><br><span class="line">public <span class="keyword">static</span> <span class="built_in">String</span> encryptBASE64(byte[] key) throws Exception &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Encoder()).encodeBuffer(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##　hash算法的作用</p><ul><li><ol><li>文件校验</li></ol></li></ul><p>MD5Hash算法的“数字指纹”，使它成为目前应用最广泛的一种文件完整性校验和（Checksum）算法，不少Unix<br>系统有提供计算md5checksum的命令。</p><ul><li><ol start="2"><li>数字签名</li></ol></li></ul><p>Hash算法也是现代密码体系中的一个重要组成部分，由于非对称算法的运算速度较慢，所以在数字签名协议中，<br>单项散列函数扮演了一个重要的角色。对Hash值，又称”数字摘要”进行数字签名，在统计上可以任务与对文件<br>本身进行数字签名是等效的。</p><ul><li><ol start="3"><li>鉴权协议</li></ol></li></ul><p><em>完整代码</em></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;    </span><br><span class="line"><span class="keyword">import</span> javax.crypto.Mac;    </span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;    </span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 基础加密组件  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiaxf  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0  </span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coder</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_SHA = <span class="string">"SHA"</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MD5 = <span class="string">"MD5"</span>;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * MAC算法可选以下多种算法  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;  </span></span><br><span class="line"><span class="comment">     * HmacMD5   </span></span><br><span class="line"><span class="comment">     * HmacSHA1   </span></span><br><span class="line"><span class="comment">     * HmacSHA256   </span></span><br><span class="line"><span class="comment">     * HmacSHA384   </span></span><br><span class="line"><span class="comment">     * HmacSHA512  </span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MAC = <span class="string">"HmacMD5"</span>;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * BASE64解密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptBASE64(String key) <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Decoder()).decodeBuffer(key);    </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * BASE64加密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">encryptBASE64</span><span class="params">(<span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Encoder()).encodeBuffer(key);    </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * MD5加密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptMD5(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line"></span><br><span class="line">        MessageDigest md5 = MessageDigest.getInstance(KEY_MD5);    </span><br><span class="line">        md5.update(data);    </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> md5.<span class="title">digest</span><span class="params">()</span></span>;    </span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * SHA加密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptSHA(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line"></span><br><span class="line">        MessageDigest sha = MessageDigest.getInstance(KEY_SHA);    </span><br><span class="line">        sha.update(data);    </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> sha.<span class="title">digest</span><span class="params">()</span></span>;    </span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 初始化HMAC密钥  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">initMacKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;    </span><br><span class="line">        KeyGenerator keyGenerator = KeyGenerator.getInstance(KEY_MAC);    </span><br><span class="line"></span><br><span class="line">        SecretKey secretKey = keyGenerator.generateKey();    </span><br><span class="line">        <span class="keyword">return</span> encryptBASE64(secretKey.getEncoded());    </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * HMAC加密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptHMAC(<span class="keyword">byte</span>[] data, String key) <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line"></span><br><span class="line">        SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(decryptBASE64(key), KEY_MAC);    </span><br><span class="line">        Mac mac = Mac.getInstance(secretKey.getAlgorithm());    </span><br><span class="line">        mac.init(secretKey);    </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> mac.<span class="title">doFinal</span><span class="params">(data)</span></span>;    </span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>测试类</em></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * @author jiaxf</span></span><br><span class="line"><span class="comment"> * @version 1.0  </span></span><br><span class="line"><span class="comment"> * @since 1.0  </span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line"><span class="keyword">public</span> class CoderTest &#123;    </span><br><span class="line"></span><br><span class="line">    @Test    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test() <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line">        <span class="keyword">String</span> inputStr = <span class="string">"简单加密"</span>;    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"原文:/n"</span> + inputStr);    </span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] inputData = inputStr.getBytes();    </span><br><span class="line">        <span class="keyword">String</span> code = Coder.encryptBASE64(inputData);    </span><br><span class="line"></span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"BASE64加密后:/n"</span> + code);    </span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] output = Coder.decryptBASE64(code);    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> outputStr = <span class="keyword">new</span> <span class="keyword">String</span>(output);    </span><br><span class="line"></span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"BASE64解密后:/n"</span> + outputStr);    </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证BASE64加密解密一致性    </span></span><br><span class="line">        assertEquals(inputStr, outputStr);    </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证MD5对于同一内容加密是否一致    </span></span><br><span class="line">        assertArrayEquals(Coder.encryptMD5(inputData), Coder    </span><br><span class="line">                .encryptMD5(inputData));    </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证SHA对于同一内容加密是否一致    </span></span><br><span class="line">        assertArrayEquals(Coder.encryptSHA(inputData), Coder    </span><br><span class="line">                .encryptSHA(inputData));    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">key</span> = Coder.initMacKey();    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"Mac密钥:/n"</span> + <span class="built_in">key</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证HMAC对于同一内容，同一密钥加密是否一致    </span></span><br><span class="line">        assertArrayEquals(Coder.encryptHMAC(inputData, <span class="built_in">key</span>), Coder.encryptHMAC(    </span><br><span class="line">                inputData, <span class="built_in">key</span>));    </span><br><span class="line"></span><br><span class="line">        BigInteger md5 = <span class="keyword">new</span> BigInteger(Coder.encryptMD5(inputData));    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"MD5:/n"</span> + md5.toString(<span class="number">16</span>));    </span><br><span class="line"></span><br><span class="line">        BigInteger sha = <span class="keyword">new</span> BigInteger(Coder.encryptSHA(inputData));    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"SHA:/n"</span> + sha.toString(<span class="number">32</span>));    </span><br><span class="line"></span><br><span class="line">        BigInteger mac = <span class="keyword">new</span> BigInteger(Coder.encryptHMAC(inputData, inputStr));    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"HMAC:/n"</span> + mac.toString(<span class="number">16</span>));    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/lplj717/article/details/51828692" target="_blank" rel="noopener">加密算法中BASE64、MD5、SHA、HMAC等之间的区别</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MD5、SHA1、HMAC、HMAC-SHA1区别&quot;&gt;&lt;a href=&quot;#MD5、SHA1、HMAC、HMAC-SHA1区别&quot; class=&quot;headerlink&quot; title=&quot;MD5、SHA1、HMAC、HMAC_SHA1区别&quot;&gt;&lt;/a&gt;MD5、SHA1、HM
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="加密" scheme="http://jiaxf.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="解密" scheme="http://jiaxf.github.io/tags/%E8%A7%A3%E5%AF%86/"/>
    
      <category term="Base64" scheme="http://jiaxf.github.io/tags/Base64/"/>
    
      <category term="md5" scheme="http://jiaxf.github.io/tags/md5/"/>
    
      <category term="算法" scheme="http://jiaxf.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2018-05-02-Node.js10和npm6发布</title>
    <link href="http://jiaxf.github.io/2018/05/02/2018-05-02-Node.js10%E5%92%8Cnpm6%E5%8F%91%E5%B8%83/"/>
    <id>http://jiaxf.github.io/2018/05/02/2018-05-02-Node.js10和npm6发布/</id>
    <published>2018-05-02T00:54:19.000Z</published>
    <updated>2018-05-02T02:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js10及npm6发布"><a href="#Node-js10及npm6发布" class="headerlink" title="Node.js10及npm6发布"></a>Node.js10及npm6发布</h1><p>Node.js 发布最新版本 Node.js 10.0.0，同时，npm 6 也随之发布。据了解，今年 10 月，Node.js 10.x 将成为长期支持版本，该版本专注于稳定性、扩展支持以及为各类应用提供一个可靠稳定的平台。</p><p>Node.js 10.x 将是第一个支持 OpenSSL 1.1.0 的版本。该版本配备了 Google V8 6.6 JavaScript 引擎，性能会增强，错误处理和跟踪诊断能力也将会提升。<br>此版本还将推出 Node.js API（N-API），N-API 是一个稳定的 API 模块，它独立于 V8，这样就不会阻碍模块在不重新编译的情况下运行新版本的 Node.js。</p><h2 id="关于-N-API"><a href="#关于-N-API" class="headerlink" title="关于 N-API"></a>关于 N-API</h2><p>N-API 提高了 Node.js 的 ABI 稳定性，有助于模块的部署和维护。<br>Node.js 10 将 ABI 的稳定模块 API（N-API）作为官方支持的 API 层。N-API 旨在解决当今生态系统中的两个问题，一是降低本地模块的维护成本，二是在升级 Node.js 版本时，降低模块使用者之间的摩擦。</p><p>升级到最新的 Node.js 版本后，Node.js 版本之间的模块损坏将不再成为 N-API 模块的问题，这对于开发者和消费者来说都是双赢的。为了提高此功能的实用性，N-API 也将被移植到 Node.js 8.x 和 6.x 中，还包括下一版本。</p><h2 id="现代化的加密"><a href="#现代化的加密" class="headerlink" title="现代化的加密"></a>现代化的加密</h2><p>Node.js 10.x 是第一代支持 OpenSSL 1.1.0 的版本，Node.js 现在能够充分利用由 OpenSSL 团队在代码质量、清理和现代化上提供的服务。</p><p>Node.js 现在可以将其加密支持扩展到对称加密算法 ChaCha20 和身份认证算法 Poly1305 上，它们共同构成了现代加密系统，增加了 Node.js 使用“ AEAD ”密码套件的可能性。<br>伴随着最近 TLS 1.3 规范的完成，网络安全迈出了一大步，OpenSSL 团队正准备发布 1.1.1 版本，其主要特性是支持 TLS 1.3，而支持 OpenSSL 1.1.1 的 Node.js 10 将可以轻松实现 API 和 ABI 的稳定升级。</p><h2 id="错误处理能力提升"><a href="#错误处理能力提升" class="headerlink" title="错误处理能力提升"></a>错误处理能力提升</h2><p>Node.js 10.x 在利用错误代码以缓解持续性的错误检验上取得了很好的进展。过去，更改文本里的错误都需要等到 semver 主版本更新后，这也意味着只有等到下一个主版本的 Node.js 才能对错误进行更改，而 Node.js 主版本每六个月发布一次。使用错误代码将可以在不中断应用程序的情况下更新文本。</p><h2 id="性能改进"><a href="#性能改进" class="headerlink" title="性能改进"></a>性能改进</h2><p>最新的 V8 在 Promise、异步生成器和阵列性能（array performance）有了很大的改进，Promise 和异步函数的改进消除了异步函数和 desugarded promise 链之间的隔阂，这有利于提高使用 Node.js 构建的应用程序性能。</p><h2 id="诊断跟踪和Post-mortem"><a href="#诊断跟踪和Post-mortem" class="headerlink" title="诊断跟踪和Post mortem"></a>诊断跟踪和Post mortem</h2><p>在 Node.js 10 中，新的跟踪事件由 performance API 发布，提高了代码的透明性。此外，它还将引入了新的 API，允许用户在代码运行时按需启用和禁用跟踪事件，从而提高了运行时诊断 Node.js 应用程序问题的灵活性。</p><h2 id="Node-js-10-x引入npm6"><a href="#Node-js-10-x引入npm6" class="headerlink" title="Node.js 10.x引入npm6"></a>Node.js 10.x引入npm6</h2><p>Node.js 10.0.0 附带 npm 5.7.x， 但是，预计在 Node.js 10.x 生命周期的早期会更新为 npm 6。第 6 版将侧重于性能、稳定性和安全性，与先前版本的 npm 相比，性能提高 1700％。<br>以后，如果使用具有已知安全问题的代码，npm Registry 的用户会收到警告通知。npm 将自动检查针对 NSP 数据库的安装请求，并在代码包含漏洞时发出警告通知。</p><p>有关npm6的更多信息，可访问<a href="https://go.npm.me/npm6" target="_blank" rel="noopener">https://go.npm.me/npm6</a></p><blockquote><p>注意： Node.js 10 版本可能还会发生其他变动，可参考<a href="https://medium.com/the-node-js-collection/the-node-js-project-introduces-latest-release-line-node-js-10-x-bf07abfa9076" target="_blank" rel="noopener">https://medium.com/the-node-js-collection/the-node-js-project-introduces-latest-release-line-node-js-10-x-bf07abfa9076</a></p></blockquote><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ol><li><a href="https://nodejs.org/en/blog/release/v10.0.0/" target="_blank" rel="noopener">Node.js 10文档</a></li><li><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">Node.js API 中文文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Node-js10及npm6发布&quot;&gt;&lt;a href=&quot;#Node-js10及npm6发布&quot; class=&quot;headerlink&quot; title=&quot;Node.js10及npm6发布&quot;&gt;&lt;/a&gt;Node.js10及npm6发布&lt;/h1&gt;&lt;p&gt;Node.js 发布最新版本
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="node" scheme="http://jiaxf.github.io/tags/node/"/>
    
      <category term="npm" scheme="http://jiaxf.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>PWA简介</title>
    <link href="http://jiaxf.github.io/2018/04/25/PWA%E7%AE%80%E4%BB%8B/"/>
    <id>http://jiaxf.github.io/2018/04/25/PWA简介/</id>
    <published>2018-04-25T01:06:57.000Z</published>
    <updated>2018-04-25T03:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWA简介"><a href="#PWA简介" class="headerlink" title="PWA简介"></a>PWA简介</h1><p>Progressive Web Apps，简称PWA.<br>渐进式提升Web App原生体验的技术方案，能给用户原生应用的体验。</p><p>PWA能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA本质上是WebApp，借助一些新技术也具备NativeApp的一些特性，兼具WebApp和NativeApp的优点。</p><h2 id="PWA具有的一些特点及特性"><a href="#PWA具有的一些特点及特性" class="headerlink" title="PWA具有的一些特点及特性"></a>PWA具有的一些特点及特性</h2><p>PWA特点：</p><ul><li>可靠 即使在不稳定的网络环境下，也能瞬间加载并展现</li><li>体验 快速响应，并且有平滑的动画响应用户的操作</li><li>粘性 像设备上的原生应用，具有沉浸式饿得用户体验，用户可以添加到桌面</li></ul><p>PWA具有特性</p><ul><li>渐进式 - Progressive 适用于所有浏览器，因为它以渐进式增强作为宗旨开发</li><li>连接无关性 - 能够借助Service Worker在离线或这网络较差情况下正常访问</li><li>类似应用 - 由于在App Shell模型基础上开发，因为应具有NativeApp的交互和导航，给用户NativeApp的体验</li><li>持续更新 - 始终是最新的，无版本和更新问题</li><li>安全 - 通过HTTPS协议提供服务，防止窥探和确保内容不被篡改</li><li>可索引 - 应用清单文件和ServiceWorker可以让搜索引擎引到，从而将其识别为应用</li><li>粘性 - 通过推送离线通知等，可以让用户回流</li><li>免安装 - 用户可以添加常用的webapp到桌面，免去应用商店下载的麻烦</li><li><p>可链接 - 通过链接即可分享内容，无需下载安装</p></li><li><p>Web App Manifest(主屏图标)</p></li><li>ServiceWorker(离线可用)</li><li>Notification API &amp; Push API(离线通知)</li><li>App Shell &amp; App Skeleton设计模型</li><li>PRPL Pattern(Push, Render, Pre-cache, Lazy-load)</li><li>安全HTTPS</li><li>交互 &amp; 动画</li><li>PWA通常是SPA 通常采用AppShell设计模型</li></ul><h2 id="ServiceWorker"><a href="#ServiceWorker" class="headerlink" title="ServiceWorker"></a>ServiceWorker</h2><h2 id="什么是Service-Worker"><a href="#什么是Service-Worker" class="headerlink" title="什么是Service Worker"></a>什么是Service Worker</h2><p>W3C 组织早在 2014 年 5 月就提出过 Service Worker 这样的一个 HTML5 API ，主要用来做持久的离线缓存。<br>浏览器中的 javaScript 都是运行在一个单一主线程上的，在同一时间内只能做一件事情。随着 Web 业务不断复杂，我们逐渐在 js 中加了很多耗资源、耗时间的复杂运算过程，这些过程导致的性能问题在 WebApp 的复杂化过程中更加凸显出来。</p><p>W3C 组织早早的洞察到了这些问题可能会造成的影响，这个时候有个叫 Web Worker 的 API 被造出来了，这个 API 的唯一目的就是解放主线程，Web Worker 是脱离在主线程之外的，将一些复杂的耗时的活交给它干，完成后通过 postMessage 方法告诉主线程，而主线程通过 onMessage 方法得到 Web Worker 的结果反馈。</p><p>Service Worker 在 Web Worker 的基础上加上了持久离线缓存能力。<br>Service Worker 有以下功能和特性：</p><ul><li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li><li>一旦被 install，就永远存在，除非被 uninstall</li><li>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）</li><li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li><li>离线内容开发者可控</li><li>能向客户端推送消息</li><li>不能直接操作 DOM</li><li>出于安全的考虑，必须在 HTTPS 环境下才能工作</li><li>异步实现，内部大都是通过 Promise 实现</li></ul><h2 id="Service-Worker生命周期"><a href="#Service-Worker生命周期" class="headerlink" title="Service Worker生命周期"></a>Service Worker生命周期</h2><p>MDN 给出了详细的 Service Worker 生命周期图：<br><img src="/images/sw-lifecycle.png" alt=""></p><p>生命周期状态：</p><ul><li><p>安装( installing )：这个状态发生在 Service Worker 注册之后，表示开始安装，触发 install 事件回调指定一些静态资源进行离线缓存。</p><blockquote><p>install 事件回调中有两个方法：</p><ul><li>event.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。</li><li>self.skipWaiting()：self 是当前 context 的 global 变量，执行该方法表示强制当前处在 waiting 状态的 Service Worker 进入 activate 状态。</li><li>安装后( installed )：Service Worker 已经完成了安装，并且等待其他的 Service Worker 线程被关闭。</li><li>激活( activating )：在这个状态下没有被其他的 Service Worker 控制的客户端，允许当前的 worker 完成安装，并且清除了其他的 worker 以及关联缓存的旧缓存资源，等待新的 Service Worker 线程被激活。<br>activate 回调中有两个方法：</li><li>event.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。</li><li>self.clients.claim()：在 activate 事件回调中执行该方法表示取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面，之后会被停止。</li><li>激活后( activated )：在这个状态会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)。</li><li>废弃状态 ( redundant )：这个状态表示一个 Service Worker 的生命周期结束。</li></ul></blockquote><blockquote><p>进入废弃 (redundant) 状态的原因可能为这几种：</p><ul><li>安装 (install) 失败</li><li>激活 (activating) 失败</li><li>新版本的 Service Worker 替换了它并成为激活状态</li></ul></blockquote></li></ul><h2 id="Service-Worker支持的事件"><a href="#Service-Worker支持的事件" class="headerlink" title="Service Worker支持的事件"></a>Service Worker支持的事件</h2><p>MDN 也列出了 Service Worker 所有支持的事件：<br><img src="/images/sw-events.png" alt=""></p><h2 id="怎么使用Service-worker"><a href="#怎么使用Service-worker" class="headerlink" title="怎么使用Service worker"></a>怎么使用Service worker</h2><ol><li>注册</li></ol><p>安装serviceWoker ,通常需要在js主线程（常规页面的js）注册SeriveWorker来启动安装，这个过程将会通知浏览器我们的Service Worker线程的javascript文件在什么地方呆着。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      navigator.serviceWorker.register(<span class="string">'/sw.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'/'</span>&#125;)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">registration</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 注册成功</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'ServiceWoker registration successful with scope:'</span>, registration.scope);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 注册失败</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'ServiceWoker registration failed:'</span>, err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注：查看是否注册成功，可以用chrome浏览器，输入 <code>chrome://inspect/#service-workers</code></em></p><ol start="2"><li>安装</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 service worker的install事件</span></span><br><span class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 如果监听到了service worker 已经安装成功，就会调用event.waitUntil回调函数</span></span><br><span class="line">  event.waitUntil(</span><br><span class="line">      <span class="comment">// 安装成功后操作 CacheStorage缓存，使用之前需要先通过caches.open()打开对应缓存空间</span></span><br><span class="line">      cache.open(<span class="string">'my-test-cache-v1'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(cache)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过cache缓存对象的addAll方法添加precache缓存</span></span><br><span class="line">        <span class="keyword">return</span> cache.addAll([</span><br><span class="line">          <span class="string">'/'</span>,</span><br><span class="line">          <span class="string">'/index.html'</span>,</span><br><span class="line">          <span class="string">'/main.css'</span>,</span><br><span class="line">          <span class="string">'/main.js'</span>,</span><br><span class="line">          <span class="string">'/image.jpg'</span></span><br><span class="line">        ])</span><br><span class="line">      &#125;);</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>自定义请求响应</li></ol><p>任何被Service Worker控制的资源被请求时，都会触发fetch事件，这些资源包括了指定的scope内的html文档，和这些html文档内引用的其他任何资源。<br>实现思路: Serivice Worker代理服务，给Service Woker添加一个fetch的事件监听器，接着调用event上的<code>respondWith()</code>方法来劫持HTTP响应，然后来更新他们。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">this.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">   event.respondWith(</span><br><span class="line">      caches.match(event.request).then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 来来来，代理可以搞一些代理的事情</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果Service Worker有自己的返回，就直接返回，减少一次http请求</span></span><br><span class="line">          <span class="keyword">if</span>(response)&#123;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果service worker没有返回，那就得直接请求真实远程服务</span></span><br><span class="line">          <span class="keyword">var</span> request = event.request.<span class="keyword">clone</span>(); <span class="comment">//把原始请求拷过来</span></span><br><span class="line">          <span class="keyword">return</span> fetch(request).then(<span class="function"><span class="keyword">function</span><span class="params">(httpRes)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// http请求的返回已被抓到，可以处置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求失败了，直接返回失败的结果就好</span></span><br><span class="line">            <span class="keyword">if</span>(!httpRes ||  httpRes.status !== <span class="number">200</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> httpRes;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求成功的话，将请求缓存起来</span></span><br><span class="line">            <span class="keyword">var</span> responseClone = httpRes.<span class="keyword">clone</span>();</span><br><span class="line">            cache.open(<span class="string">'my-test-cache-v1'</span>).then(<span class="function"><span class="keyword">function</span> <span class="params">(cache)</span></span>&#123;</span><br><span class="line">              cache.put(event.request, responseClone);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> httpRes;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">   );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Service Worker版本更新</p><ul><li><p>自动更新所有页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装阶段跳过等待，直接进入active</span></span><br><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">  event.waitUntil(<span class="keyword">self</span>.skipWaiting());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">  event.waitUntil(</span><br><span class="line">      Promise.all([</span><br><span class="line">        <span class="comment">// 更新客户端</span></span><br><span class="line">        <span class="keyword">self</span>.clients.claim(),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清理旧版本</span></span><br><span class="line">        caches.keys().then(<span class="function"><span class="keyword">function</span><span class="params">(cacheList)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Promise.all(</span><br><span class="line">                cacheList.map(<span class="function"><span class="keyword">function</span><span class="params">(cacheName)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(cacheName ！== <span class="string">'my-test-cache-v1'</span>)&#123;</span><br><span class="line">                      <span class="keyword">return</span> caches.delete(cacheName)；</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            );</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      ])</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>手动更新Service Worker</p></li></ul></li></ol><p>在页面中可以手动借助<code>Registration.update()</code>更新。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var version = <span class="string">'1.0.1'</span>;</span><br><span class="line">navigator.serviceWorker.register(<span class="string">'/sw.js'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(reg)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(localStorage.getItem(<span class="string">'sw_version'</span>) !== version)&#123;</span><br><span class="line">    reg.update().<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">      localStorage.setItem(<span class="string">'sw_version'</span>, version)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>debug时更新</p><p>Service Worker被载入后立即激活可以保证每次<code>/sw.js</code>为最新。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">self</span>.skipWaiting();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>意外惊喜</p></li></ul><p>Service Worker的特殊之处除了由浏览器触发更新之外，还应用了特殊的缓存策略：如果该文件已24小时没有更新，当update触发时会强制更新。意外着最坏情况下Service Worker会每天更新一次。</p><p>ServiceWorker如何更新？</p><ul><li>浏览器每天至少更新一次ServiceWorker</li><li>注册新的Service Worker,带上版本号，如: /sw.js?t=201709091920</li><li>手动更新resistration.update()</li><li>逐字节对比新的sw文件和旧的sw，有区别才更新</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line">navigator.serviceWoker.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.data === <span class="string">'sw.update'</span>)&#123;</span><br><span class="line">    <span class="comment">//提醒用户刷新</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sw.js</span></span><br><span class="line"><span class="keyword">self</span>.clients.matchAll().then(<span class="function"><span class="keyword">function</span><span class="params">(clients)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(clients &amp;&amp; clients.length)&#123;</span><br><span class="line">    clients.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(client)</span></span>&#123;</span><br><span class="line">      client.postMessage(<span class="string">'sw.update'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>PWA SEO可以服务器端渲染Server Side Rendering(SSR).<br>SSR中如何正确使用Service Worker</p><p><img src="/images/ssr.jpg" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://lavas.baidu.com/" target="_blank" rel="noopener">LAVAS百度</a></li><li><a href="/works/PWA.pdf">个人分享PWA简介</a></li><li><a href="https://static001.geekbang.org/con/28/pdf/2706484488/file/QCon2018-%E3%80%8ALavas%EF%BC%9APWA%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E3%80%8B-%E5%BD%AD%E6%98%9F.pdf" target="_blank" rel="noopener">QCon2018-《Lavas：PWA的探索与最佳实践》-彭星</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PWA简介&quot;&gt;&lt;a href=&quot;#PWA简介&quot; class=&quot;headerlink&quot; title=&quot;PWA简介&quot;&gt;&lt;/a&gt;PWA简介&lt;/h1&gt;&lt;p&gt;Progressive Web Apps，简称PWA.&lt;br&gt;渐进式提升Web App原生体验的技术方案，能给用户原
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>区块链的几个基本概念</title>
    <link href="http://jiaxf.github.io/2018/04/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://jiaxf.github.io/2018/04/20/区块链的几个基本概念/</id>
    <published>2018-04-20T06:36:45.000Z</published>
    <updated>2018-04-25T03:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区块链的几个基本概念"><a href="#区块链的几个基本概念" class="headerlink" title="区块链的几个基本概念"></a>区块链的几个基本概念</h1><p><code>区块链</code>（blockchain）本质上是一种特殊的分布式数据库。</p><p><img src="/img/bg2017122701.jpg" alt=""></p><p>首先，区块链的主要作用是储存信息。任何需要保存的信息，都可以写入区块链，也可以从里面读取，所以它是数据库。</p><p>其次，任何人都可以架设服务器，加入区块链网络，成为一个节点。区块链的世界里面，没有中心节点，每个节点都是平等的，都保存着整个数据库。你可以向任何一个节点，写入/读取数据，因为所有节点最后都会同步，保证区块链一致。</p><p>区块链是去中心化的，没有管理员，是彻底无中心的。</p><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块链是由一个个<code>区块</code>（block）组成。区块很像数据库的记录，每次写入数据，就是创建一个区块。</p><p>每个区块包含两个部分</p><ul><li>区块头(Head): 记录当前区块的特征值（当前时间、上一个区块的Hash、区块体的Hash）</li><li>区块体（body): 实际数据</li></ul><blockquote><p>两个重要推论：</p><p>推论1: 每个区块的哈希都是不一样的，可以通过哈希标识区块。</p><p>推论2：如果区块的内容变了，它的哈希一定会改变。</p></blockquote><h2 id="采矿"><a href="#采矿" class="headerlink" title="采矿"></a>采矿</h2><p>添加新区块需要一定的计算，只有通过极其大量的计算，才能得到当前区块的有效哈希，从而把新区块添加到区块链。<br>这个过程就叫做采矿（mining),因为计算有效哈希的难度，好比在全世界的沙子里面，找到一粒符合条件的沙子。<br>计算哈希的机器就叫做矿机，操作矿机的人就叫做矿工。</p><h2 id="难度系数"><a href="#难度系数" class="headerlink" title="难度系数"></a>难度系数</h2><p>区块头包含一个难度（difficulty),这个值决定了计算哈希的难度。<br>区块链协议规定，使用一个常量除以难度系数，可以得到目标值（target）。难度系数越大，目标值就越小。</p><h3 id="区块链的适用场景"><a href="#区块链的适用场景" class="headerlink" title="区块链的适用场景"></a>区块链的适用场景</h3><ol><li>不存在所有成员都信任的管理当局</li><li>希尔的数据不要求实时使用</li><li>挖矿的收益能弥补本身成本</li></ol><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>加密和解密需要两把钥匙：一把公钥和一把私钥。公钥是公开的，任何人都可以获取。私钥是保密的，只有拥有者才能使用。<br>他人使用你的公钥加密信息，然后发送给你，你用私钥解密，取出信息。反过来，你也可以用私钥加密信息，别人用你的公钥<br>解开，从而证明这个信息是你发的，且未被篡改，这就叫数字签名。</p><h3 id="比特币特点"><a href="#比特币特点" class="headerlink" title="比特币特点"></a>比特币特点</h3><ol><li>不会轻易被偷走</li><li>无法伪造</li><li>无法大批生成</li></ol><h3 id="区块链的作用"><a href="#区块链的作用" class="headerlink" title="区块链的作用"></a>区块链的作用</h3><p>区块链就是一个数据库，记载了所有的交易，用作中央记账系统，分布在无数个节点之上。</p><blockquote><p>数字货币的本质就是一条可信的数据库记录。</p></blockquote><p>比特币协议规定，分支点之后最先达到6个区块的那个分支被认定为正式的区块链，其他分支都被放弃。由于区块<br>的生成速度由计算能力决定，所以到底哪一笔交易最后会被写入区块链，完全由它所在的分支能吸引多少计算能力决定。<br>隐藏的逻辑是，如果大多数人（计算能力）选择相信某一笔交易，那么它就应该是真的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;区块链的几个基本概念&quot;&gt;&lt;a href=&quot;#区块链的几个基本概念&quot; class=&quot;headerlink&quot; title=&quot;区块链的几个基本概念&quot;&gt;&lt;/a&gt;区块链的几个基本概念&lt;/h1&gt;&lt;p&gt;&lt;code&gt;区块链&lt;/code&gt;（blockchain）本质上是一种特殊的分
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="区块链" scheme="http://jiaxf.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="http://jiaxf.github.io/2018/04/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://jiaxf.github.io/2018/04/19/函数式编程/</id>
    <published>2018-04-19T06:19:50.000Z</published>
    <updated>2018-04-19T06:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="Javascript的箭头函数"><a href="#Javascript的箭头函数" class="headerlink" title="Javascript的箭头函数"></a>Javascript的箭头函数</h2><p><code>ECMAScript2015</code>引入箭头表达式。箭头函数其实是匿名函数，基本语法如下：</p><blockquote><p>(param1, param2, …, paramN) =&gt; { statements }</p><p>(param1, param2, …, paramN) =&gt; expression</p><p>   // 等于 :  =&gt; { return expression; }</p><p>   // 只有一个参数时,括号才可以不加:</p><p>   (singleParam) =&gt; { statements }</p><p>   singleParam =&gt; { statements }</p><p>   //如果没有参数,就一定要加括号:</p><p>   () =&gt; { statements }</p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> simple = <span class="function"><span class="params">a</span> =&gt;</span> a &gt; <span class="number">15</span> ? <span class="number">15</span> : a;</span><br><span class="line">simple(<span class="number">16</span>);   <span class="comment">// 15</span></span><br><span class="line">simple(<span class="number">10</span>);   <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> max = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);  <span class="comment">//66</span></span><br><span class="line"><span class="keyword">var</span> even = arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> v % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// [6, 0, 18]</span></span><br><span class="line"><span class="keyword">var</span> double = arr.map(<span class="function"><span class="params">v</span> =&gt;</span> v * <span class="number">2</span>);       <span class="comment">// [10, 12, 26, 0, 36, 46]</span></span><br></pre></td></tr></table></figure><p>有些时候，某些函数在声明的时候就是调用的时候，尤其是函数式编程中，一个函数还对外返回函数的时候。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakePowerFn</span>(<span class="params">power</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">PowerFn</span>(<span class="params">base</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(base, power);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">power3 = MakePowerFn(<span class="number">3</span>); <span class="comment">// 制造一个X的3次方的函数</span></span><br><span class="line">power2 = MakePowerFn(<span class="number">2</span>); <span class="comment">// 制造一个X的2次方的函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(power3(<span class="number">10</span>));  <span class="comment">// 10的3次方 1000</span></span><br><span class="line"><span class="built_in">console</span>.log(power2(<span class="number">10</span>));  <span class="comment">// 10的2次方 100</span></span><br></pre></td></tr></table></figure><p>用箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MakePowerFn = <span class="function"><span class="params">power</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">base</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(base, power);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line">MakePowerFn = <span class="function"><span class="params">power</span> =&gt;</span> base =&gt; <span class="built_in">Math</span>.pow(base, power)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上括号</span></span><br><span class="line">MakePowerFn = <span class="function">(<span class="params">power</span>) =&gt;</span> (</span><br><span class="line">  (base) =&gt; (<span class="built_in">Math</span>.pow(base, power))</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="匿名函数的递归"><a href="#匿名函数的递归" class="headerlink" title="匿名函数的递归"></a>匿名函数的递归</h2><p>函数式编程立志于用函数表达式来消除有状态的函数，以及for/while循环，所以在函数式编程里不应该用for/while循环，而要改用递归(递归的性能很差，所以，一般用尾递归来做优化，也就是把函数的计算状态当参数一层一层往下传递，这样语言的编译器后解释器就需要用函数栈来帮你保存函数的内部变量的状态了)。</p><p>递归的代码就是函数自己调用自己，比如求阶乘</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">fact</span>(n)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">n</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="type">n</span> * fact(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于匿名函数，可以把匿名函数当成一个参数传给另外一个函数，因为函数的参数有名字，所以就可以调用自己了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function combinator(<span class="function"><span class="keyword">func</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数式的匿名函数</span></span><br><span class="line">（<span class="function"><span class="keyword">func</span>） =&gt; <span class="params">(<span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span></span></span>)</span><br></pre></td></tr></table></figure><p>阶乘代码重构<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">funtion fact(<span class="function"><span class="keyword">func</span>, <span class="title">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">1</span>: n * <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, n-<span class="number">1</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数版</span></span><br><span class="line"><span class="keyword">var</span> fact = (<span class="function"><span class="keyword">func</span>, <span class="title">n</span>) =&gt; <span class="params">(n == <span class="number">0</span> ? <span class="number">1</span> : <span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, n-<span class="number">1</span>)</span></span></span>);</span><br><span class="line">fact(fact, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数体声明时调用自己</span></span><br><span class="line">（<span class="function"><span class="keyword">func</span>, <span class="title">x</span>) =&gt; <span class="title">func</span><span class="params">(<span class="keyword">func</span>, x)</span></span>(</span><br><span class="line">    (<span class="function"><span class="keyword">func</span>, <span class="title">n</span>) =&gt; <span class="params">( n ==<span class="number">0</span> ? <span class="number">1</span> : n * <span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, n-<span class="number">1</span>)</span></span></span>),  <span class="comment">// 第一个调用参数</span></span><br><span class="line">    <span class="number">5</span> <span class="comment">// 第二个调用参数</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="动态高级函数的递归"><a href="#动态高级函数的递归" class="headerlink" title="动态高级函数的递归"></a>动态高级函数的递归</h2><p>递归版高阶函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">HighOrderFact = function(<span class="function"><span class="keyword">func</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> function(n)&#123;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">1</span> : <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span><span class="params">(n-1)</span>;</span></span><br><span class="line"><span class="function">  &#125;;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 需要一个函数做参数，然后返回这个函数的递归版本</span></span><br><span class="line"><span class="function"><span class="title">fact</span> = <span class="title">HighOrderFact</span><span class="params">(HighOrderFact)</span>;</span></span><br><span class="line"><span class="function"><span class="title">fact</span><span class="params">(5)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">HighOrderFact</span><span class="params">(HighOrderFact)</span><span class="params">(5)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fact</span> = <span class="title">function</span><span class="params">(hifunc)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> hifunc(hifunc);</span><br><span class="line">&#125;(</span><br><span class="line">   <span class="comment">// 调用参数是一个函数</span></span><br><span class="line">   function(<span class="function"><span class="keyword">func</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> function(n)&#123;</span><br><span class="line">       <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">1</span> : n * <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span><span class="params">(n-1)</span>;</span></span><br><span class="line"><span class="function">     &#125;;</span></span><br><span class="line"><span class="function">   &#125;</span></span><br><span class="line"><span class="function">);</span></span><br><span class="line"><span class="function">// 调用</span></span><br><span class="line"><span class="function"><span class="title">fact</span><span class="params">(5)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 箭头函数重构</span></span><br><span class="line"><span class="function"><span class="title">fact</span> = <span class="params">(highfunc =&gt; highfunc(highfunc)</span>) <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">func</span> =&gt; n =&gt; n == 0 ? 1 : n * <span class="keyword">func</span>(<span class="keyword">func</span>)</span><span class="params">(n-1)</span></span></span><br><span class="line"><span class="function">);</span></span><br></pre></td></tr></table></figure><h2 id="重构之前的程序"><a href="#重构之前的程序" class="headerlink" title="重构之前的程序"></a>重构之前的程序</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 查找数组正常版本</span></span><br><span class="line"> function <span class="built_in">find</span>(x, y) &#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; x.length; i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(x[i] == y) <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> null;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 干掉for，搞成递归版本</span></span><br><span class="line"> funcion  <span class="built_in">find</span>(x, y, i=<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>( i &gt;= x.length) <span class="keyword">return</span> null;</span><br><span class="line">   <span class="keyword">if</span>( x[i] == y) <span class="keyword">return</span> i;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">find</span>(x, y, i+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 继续重构 带实参的匿名函数版本</span></span><br><span class="line">((<span class="function"><span class="keyword">func</span>, <span class="title">x</span>, <span class="title">y</span>, <span class="title">i</span>) =&gt; <span class="title">func</span><span class="params">(<span class="keyword">func</span>, x,y i)</span></span>) ( <span class="comment">// 函数体</span></span><br><span class="line">    (<span class="function"><span class="keyword">func</span>, <span class="title">x</span>, <span class="title">y</span>, <span class="title">i</span>=0) =&gt; <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      i&gt;= x.length ? null :</span></span></span><br><span class="line"><span class="function"><span class="params">        x[i] == y ? i : <span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, x, y, i+<span class="number">1</span>)</span></span></span></span><br><span class="line">      ), <span class="comment">// 第一个调用参数</span></span><br><span class="line">      arr,  <span class="comment">// 第二个调用参数</span></span><br><span class="line">      <span class="number">2</span> <span class="comment">// 第三个调用参数    </span></span><br><span class="line">)</span><br><span class="line"> <span class="comment">// 引入高级函数，去除实参</span></span><br><span class="line"></span><br><span class="line">const <span class="built_in">find</span> = （highfunc =&gt; highfunc(highfunc))(</span><br><span class="line">   <span class="function"><span class="keyword">func</span> =&gt; <span class="params">(x, y, i =<span class="number">0</span> )</span></span> =&gt; (</span><br><span class="line">      i &gt;= x.length ? null :</span><br><span class="line">        x[i] == y ? i : <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span></span>(x, y, i+<span class="number">1</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"> ;</span><br></pre></td></tr></table></figure><p>可以参考以下两篇文章</p><ul><li><em><a href="http://mvanier.livejournal.com/2897.html" target="_blank" rel="noopener">《The Y Combinator (Slight Return)》</a></em></li><li><em><a href="https://en.wikipedia.org/wiki/Fixed-point_combinator" target="_blank" rel="noopener">《Wikipedia: Fixed-point combinator》</a></em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h1&gt;&lt;h2 id=&quot;Javascript的箭头函数&quot;&gt;&lt;a href=&quot;#Javascript的箭头函数&quot; class=&quot;he
      
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="函数式编程" scheme="http://jiaxf.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>javascript模式</title>
    <link href="http://jiaxf.github.io/2018/04/19/jsPattern/"/>
    <id>http://jiaxf.github.io/2018/04/19/jsPattern/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascriptPattern"><a href="#javascriptPattern" class="headerlink" title="javascriptPattern"></a>javascriptPattern</h1><p>《javascript设计模式与开发实践》学习记录</p><h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><hr><h2 id="什么是模式"><a href="#什么是模式" class="headerlink" title="什么是模式"></a>什么是模式</h2><p>模式是一个可复用的解决方案，可用于解决软件设计中的常见问题。三大好处：</p><ol><li>模式是已验证的解决方案</li><li>模式很容易被复用</li><li>模式富有表达力</li></ol><h2 id="优秀的模式"><a href="#优秀的模式" class="headerlink" title="优秀的模式"></a>优秀的模式</h2><p>优秀的模式应当可以执行以下操作：</p><ol><li>解决特殊问题</li><li>没有显而易见的解决方案</li><li>描述经过验证的概念</li><li>描述一种关系</li></ol><h1 id="设计模式的类别"><a href="#设计模式的类别" class="headerlink" title="设计模式的类别"></a>设计模式的类别</h1><a id="more"></a><h2 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h2><p>专注语处理对象创建机制，以合适给定情况的方式来创建对象。包括：</p><ul><li>Constructor构造器</li><li>Factory工厂</li><li>Abstract抽象</li><li>Prototype原型</li><li>Singleton单例</li><li>Builder生成器</li></ul><h2 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h2><p>结构型设计模式与组合对象有关，通常可以用于找出在不同对象之间建立关系的简单方法。这种模式有助于确保系统某一部分改变时，不会影响到整体结构，同时改变后能较好地重组。包括：</p><ul><li>Decorator装饰者</li><li>Facade外观</li><li>Flyweight享元</li><li>Adapter适配器</li><li>Proxy代理</li></ul><h2 id="行为设计模式"><a href="#行为设计模式" class="headerlink" title="行为设计模式"></a>行为设计模式</h2><p>专注语改善或简化系统中不同对象之间的通信，包括：</p><ul><li>Iterator迭代器</li><li>Mediator终结者</li><li>Observer观察者</li><li>Visitor访问者</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascriptPattern&quot;&gt;&lt;a href=&quot;#javascriptPattern&quot; class=&quot;headerlink&quot; title=&quot;javascriptPattern&quot;&gt;&lt;/a&gt;javascriptPattern&lt;/h1&gt;&lt;p&gt;《javascript设计模式与开发实践》学习记录&lt;/p&gt;
&lt;h1 id=&quot;模式&quot;&gt;&lt;a href=&quot;#模式&quot; class=&quot;headerlink&quot; title=&quot;模式&quot;&gt;&lt;/a&gt;模式&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;什么是模式&quot;&gt;&lt;a href=&quot;#什么是模式&quot; class=&quot;headerlink&quot; title=&quot;什么是模式&quot;&gt;&lt;/a&gt;什么是模式&lt;/h2&gt;&lt;p&gt;模式是一个可复用的解决方案，可用于解决软件设计中的常见问题。三大好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模式是已验证的解决方案&lt;/li&gt;
&lt;li&gt;模式很容易被复用&lt;/li&gt;
&lt;li&gt;模式富有表达力&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;优秀的模式&quot;&gt;&lt;a href=&quot;#优秀的模式&quot; class=&quot;headerlink&quot; title=&quot;优秀的模式&quot;&gt;&lt;/a&gt;优秀的模式&lt;/h2&gt;&lt;p&gt;优秀的模式应当可以执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解决特殊问题&lt;/li&gt;
&lt;li&gt;没有显而易见的解决方案&lt;/li&gt;
&lt;li&gt;描述经过验证的概念&lt;/li&gt;
&lt;li&gt;描述一种关系&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;设计模式的类别&quot;&gt;&lt;a href=&quot;#设计模式的类别&quot; class=&quot;headerlink&quot; title=&quot;设计模式的类别&quot;&gt;&lt;/a&gt;设计模式的类别&lt;/h1&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="js" scheme="http://jiaxf.github.io/tags/js/"/>
    
      <category term="pattern" scheme="http://jiaxf.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 3</title>
    <link href="http://jiaxf.github.io/2018/04/19/3-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/3-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Partial-Application"><a href="#Thinking-in-Ramda-Partial-Application" class="headerlink" title="Thinking in Ramda: Partial Application"></a>Thinking in Ramda: Partial Application</h1><h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher-Order Functions"></a>Higher-Order Functions</h2><p>Functions that take or return other functions are known as “higher-order functions”.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Full function version:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">publishedInYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> book.year === year</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrow function version:</span></span><br><span class="line"><span class="keyword">const</span> publishedInYear = <span class="function"><span class="params">year</span> =&gt;</span> book =&gt; book.year === year</span><br><span class="line"><span class="keyword">const</span> titlesForYear = <span class="function">(<span class="params">books, year</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = filter(publishedInYear(year), books)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> map(<span class="function"><span class="params">book</span> =&gt;</span> book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Partially-Applying-functions"><a href="#Partially-Applying-functions" class="headerlink" title="Partially-Applying functions"></a>Partially-Applying functions</h2><p>We could rewrite any multi-argument function this way if we wanted to, but we don’t own all of the functions we might want to use. Also, we might want to use some multi-argument functions in the usual way.</p><p>Ramda provides two functions to help us out: <code>partial</code>, and <code>partialRight</code>.</p><p>These two functions let us call any function with fewer arguments than it needs. They both return a new function that takes the missing arguments and then calls the original function once all of the arguments have been supplied.</p><p>The difference between <code>partial</code> and <code>partialRight</code> is whether the arguments we supply are the left-most or right-most arguments needed by the original function.</p><p>Note that the arguments we supply to <code>partial</code> and <code>partialRight</code> must always be in an array, even if there’s only one of them.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = (book, <span class="built_in">year</span>) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(partialRight(publishedInYear, [<span class="built_in">year</span>]), books)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Curry"><a href="#Curry" class="headerlink" title="Curry"></a>Curry</h2><p>Currying is another core concept in functional programming. Technically, a curried function is always a series of single-argument functions, which is what I was just complaining about. In pure functional languages, the syntax generally makes that look no different than calling a function with multiple arguments.</p><blockquote><p>柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。“如果固定某些参数，将会得到余下参数的一个函数”。</p></blockquote><blockquote><p>函数柯里化的对偶是Uncurrying,一种是使用匿名单参数函数来实现多参数函数的方法。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span><span class="params">(a)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*a + b*b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(foo(<span class="number">3</span>))(<span class="number">4</span>) <span class="keyword">or</span> foo(<span class="number">3</span>)(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>惰性求值（Lazy Evaluation），又称惰性计算、懒惰求值，也称为传需求调用（call-by-need）。它的目的是要最小化计算机要做的工作。除可以得到性能的提升外，惰性计算的最重要的好处是它可以构造一个无限的数据类型或可计算的无限列表而没有妨碍计算的无限循环或大小问题。<br>惰性求值的相反是及早求值，这是一个大多少编程语言所拥有的普通计算方式。</p></blockquote><blockquote><p>λ演算是一套用于研究函数定义、函数应用和递归的形式系统。这种演算可以用来清晰地定义什么是一个可计算函数。Lambda演算可以被称为最小的通用程序设计语言，它包括一条变换规则（变量替换）和一条函数定义方式，Lambda演算置通用在于，任何一个可计算函数都能用这种形式来表达和求值。因此，它是等价于图灵机的。<br>在lambda表达式的集合定义一个等价关系（== 标注），“两个表达式其实表示的是同一个函数”这样的直觉性判断即由此表述，这种等级关系是通过所谓的“alpha-变换规则”和”beta-归约规则”。</p></blockquote><p>In Ramda, a curried function can be called with only a subset of its arguments, and it will return a new function that accepts the remaining arguments. If you call a curried function with all of its arguments, it will call just call the function.</p><p>You can think of a curried function as the best of both worlds: you can call it normally with all of its arguments and it will just work. Or you can call it with a subset of its arguments, and it will act as if you’d used <code>partial</code>.</p><p>Note that this flexibility introduces a small performance hit, because <code>curry</code> needs to figure out how the function was called and then determine what to do. In general, I only curry functions when I find I need to use <code>partial</code> in more than one place.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = curry((<span class="built_in">year</span>, book) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(publishedInYear(<span class="built_in">year</span>), books)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Argument-Order"><a href="#Argument-Order" class="headerlink" title="Argument Order"></a>Argument Order</h2><p>Notice that to make curry work for us, we had to reverse the argument order. This is extremely common with functional programming, so almost every Ramda function is written so that the data to be operated on comes last.</p><h1 id="Arguments-In-The-Wrong-order"><a href="#Arguments-In-The-Wrong-order" class="headerlink" title="Arguments In The Wrong order"></a>Arguments In The Wrong order</h1><p>###　Filp</p><p>The first option is <code>flip</code>. flip takes a function of 2 or more arguments and returns a new function that takes the same arguments, but switches the order of the first two arguments. It is mostly used with two argument functions, but is more general than that.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = curry((book, <span class="built_in">year</span>) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(flip(publishedInYear)(<span class="built_in">year</span>), books)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In most cases, I’d prefer to use the more convenient argument order, but if you need to use a function you don’t control, <code>flip</code> is a helpful option.</p><h3 id="Placeholder"><a href="#Placeholder" class="headerlink" title="Placeholder"></a>Placeholder</h3><p>The more general option is the “placeholder” argument (__).</p><p>What if we have a curried function of three arguments, and we want to supply the first and last arguments, leaving the middle one for later? We can use the placeholder for the middle argument:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> threeArgs = curry(<span class="function">(<span class="params">a,b,c</span>) =&gt;</span> &#123; <span class="comment">/* ... */</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleArgumentLater = threeArgs(<span class="string">'value for a'</span>, __, <span class="string">'value fro c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleAargumentOnly = threeArgs(__, <span class="string">'value for b'</span>, __)</span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = curry ((book, <span class="built_in">year</span>) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(publishedInYear(__, <span class="built_in">year</span>), books)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that <strong> only works for curried functions, while partial, partialRight, and flip all work on any function. If you need to use </strong> with a normal function, you can always wrap it with a call to curry first.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const publishedInYear = curry((<span class="name">year</span>, book) =&gt; book.year === year)</span><br><span class="line"></span><br><span class="line">const titlesForYear = curry((<span class="name">year</span>, books) =&gt;</span><br><span class="line">  pipe(</span><br><span class="line">      filter(<span class="name">publishedInYear</span>(<span class="name">year</span>)),</span><br><span class="line">      map(<span class="name">book</span> =&gt; book.title)</span><br><span class="line">  )(<span class="name">books</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><p>  <em>Cite From <a href="http://randycoulman.com/blog/2016/06/07/thinking-in-ramda-partial-application/" target="_blank" rel="noopener">« Thinking in Ramda: Partial Application »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Partial-Application&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Partial-Application&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Partial Application&quot;&gt;&lt;/a&gt;Thinking in Ramda: Partial Application&lt;/h1&gt;&lt;h2 id=&quot;Higher-Order-Functions&quot;&gt;&lt;a href=&quot;#Higher-Order-Functions&quot; class=&quot;headerlink&quot; title=&quot;Higher-Order Functions&quot;&gt;&lt;/a&gt;Higher-Order Functions&lt;/h2&gt;&lt;p&gt;Functions that take or return other functions are known as “higher-order functions”.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Full function version:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;publishedInYear&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;year&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;book&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; book.year === year&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Arrow function version:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; publishedInYear = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;year&lt;/span&gt; =&amp;gt;&lt;/span&gt; book =&amp;gt; book.year === year&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; titlesForYear = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;books, year&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; selected = filter(publishedInYear(year), books)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;book&lt;/span&gt; =&amp;gt;&lt;/span&gt; book.title, selected)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 8</title>
    <link href="http://jiaxf.github.io/2018/04/19/8-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/8-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Lenses"><a href="#Thinking-in-Ramda-Lenses" class="headerlink" title="Thinking in Ramda: Lenses"></a>Thinking in Ramda: Lenses</h1><p>Ramda provides a more general tool for performing the operations such as read, update, and transform object properties and array elements in a declarative, immutable way, the lens.</p><h2 id="What-is-a-Lens"><a href="#What-is-a-Lens" class="headerlink" title="What is a Lens?"></a>What is a Lens?</h2><p>A lens combines a “getter” function and a “setter” function into a single unit. Ramda provides a set of functions for working with lenses.</p><p>We can think of a lens as something that focuses on a specific part of a larger data structure.</p><h2 id="How-Do-I-Create-a-Lens"><a href="#How-Do-I-Create-a-Lens" class="headerlink" title="How Do I Create a Lens?"></a>How Do I Create a Lens?</h2><p>The most generic way to create a lens in Ramda is with the lens function. lens takes a getter function and a setter function and returns the new lens.</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Randy'</span>,</span><br><span class="line">  socialMedia:&#123;</span><br><span class="line">    github: <span class="string">'randycoulamn'</span>,</span><br><span class="line">    twitter: <span class="string">'@randycoulman'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameLens = lens(prop(<span class="string">'name'</span>), assoc(<span class="string">'name'</span>))</span><br><span class="line"><span class="keyword">const</span> twitterLens = lens(</span><br><span class="line">    path([<span class="string">'socialMedia'</span>, <span class="string">'twitter'</span>]),</span><br><span class="line">    assocPath([<span class="string">'socialMedia'</span>, <span class="string">'twitter'</span>])</span><br><span class="line">)</span><br></pre></td></tr></table></figure><a id="more"></a><p>Here we’re using prop and path as our getter functions and <code>assoc</code> and <code>assocPath</code> as our setter functions.</p><p>Note that we had to duplicate the property and path arguments to these functions. Fortunately， Ramda provides nice shortcuts for the most common uses of lenses：<br><code>lensProp</code>，<code>lensPath</code>, and <code>lensIndex</code>.</p><ul><li><code>lensProp</code> creates a lens that focuses on a property of an object.</li><li><code>lensPath</code> creates a lens that focuses on a nested property of an object.</li><li><code>lensIndex</code> creates a lens that focuses on an element of an array.</li></ul><p>We could rewrite our lenses above with <code>lensProp</code> and <code>lensPath</code>:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameLens = lensProp(<span class="string">'name'</span>)</span><br><span class="line"><span class="keyword">const</span> twitterLens = lensPath([<span class="string">'socialMedia'</span>, <span class="string">'twitter'</span>])</span><br></pre></td></tr></table></figure><h2 id="What-Can-I-Do-With-It"><a href="#What-Can-I-Do-With-It" class="headerlink" title="What Can I Do With It?"></a>What Can I Do With It?</h2><p>Ramda provides three functions for working with lenses.</p><ul><li><code>view</code> reads the value of the lens.</li><li><code>set</code> updates the value of the lens.</li><li><code>over</code> applies a transformation funtion to the lens.</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">view</span><span class="params">(nameLens, person)</span></span>  <span class="comment">// =&gt;'Randy'</span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(twitterLens, <span class="string">'@randy'</span>, person)</span></span></span><br><span class="line"><span class="comment">//=&gt;&#123;</span></span><br><span class="line"><span class="comment">//  name: 'Randy',</span></span><br><span class="line"><span class="comment">//  socialMedia: &#123;</span></span><br><span class="line"><span class="comment">//    github: 'randycoulman',</span></span><br><span class="line"><span class="comment">//    twitter: '@randy'</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">over</span><span class="params">(nameLens, toUpper, person)</span></span></span><br><span class="line"><span class="comment">// =&gt; &#123;</span></span><br><span class="line"><span class="comment">//  name: 'RANDY',</span></span><br><span class="line"><span class="comment">//  socialMedia: &#123;</span></span><br><span class="line"><span class="comment">//    github: 'randycoulman',</span></span><br><span class="line"><span class="comment">//    twitter: '@randycoulman'</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Lenses can be handy if we have a somewhat complex data structure that we want to abstract away from calling code.Rather than exposing the structure or providing a getter, setter, and transformer for every accessible property,we can instead expose lenses.</p><p>Client code can the work with our data structure using <code>view</code>, <code>set</code>, and <code>over</code> without being coupled to the exact shape of the structrue.</p><hr><p><em>Cite From <a href="http://randycoulman.com/blog/2016/07/12/thinking-in-ramda-lenses/" target="_blank" rel="noopener">« Thinking in Ramda: Lenses »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Lenses&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Lenses&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Lenses&quot;&gt;&lt;/a&gt;Thinking in Ramda: Lenses&lt;/h1&gt;&lt;p&gt;Ramda provides a more general tool for performing the operations such as read, update, and transform object properties and array elements in a declarative, immutable way, the lens.&lt;/p&gt;
&lt;h2 id=&quot;What-is-a-Lens&quot;&gt;&lt;a href=&quot;#What-is-a-Lens&quot; class=&quot;headerlink&quot; title=&quot;What is a Lens?&quot;&gt;&lt;/a&gt;What is a Lens?&lt;/h2&gt;&lt;p&gt;A lens combines a “getter” function and a “setter” function into a single unit. Ramda provides a set of functions for working with lenses.&lt;/p&gt;
&lt;p&gt;We can think of a lens as something that focuses on a specific part of a larger data structure.&lt;/p&gt;
&lt;h2 id=&quot;How-Do-I-Create-a-Lens&quot;&gt;&lt;a href=&quot;#How-Do-I-Create-a-Lens&quot; class=&quot;headerlink&quot; title=&quot;How Do I Create a Lens?&quot;&gt;&lt;/a&gt;How Do I Create a Lens?&lt;/h2&gt;&lt;p&gt;The most generic way to create a lens in Ramda is with the lens function. lens takes a getter function and a setter function and returns the new lens.&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;Randy&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  socialMedia:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    github: &lt;span class=&quot;string&quot;&gt;&#39;randycoulamn&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    twitter: &lt;span class=&quot;string&quot;&gt;&#39;@randycoulman&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nameLens = lens(prop(&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;), assoc(&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; twitterLens = lens(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path([&lt;span class=&quot;string&quot;&gt;&#39;socialMedia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;twitter&#39;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assocPath([&lt;span class=&quot;string&quot;&gt;&#39;socialMedia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;twitter&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 9</title>
    <link href="http://jiaxf.github.io/2018/04/19/9-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/9-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Wrap-Up"><a href="#Thinking-in-Ramda-Wrap-Up" class="headerlink" title="Thinking in Ramda: Wrap-Up"></a>Thinking in Ramda: Wrap-Up</h1><p>Ramda has some underlying principles that drive its API:</p><ul><li><p>Data last: Almost all of the functions take the data parameter as the last parameter.</p></li><li><p>Currying: Almost every function in Ramda is “curried”. That is, you can call a function with only a subset of its required arguments, and it will return a new function that takes the remaining arguments. Once all of the arguments are provided, the original function is invoked.</p><a id="more"></a><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1></li><li><p>Getting started introduces us to the idea of functions, pure functions, and immutablilty. If the gets us started by looking at the collection iteration functions like <code>map</code>, <code>filter</code>, and <code>reduce</code>.</p></li><li>Combinging Functions shows us that we can combine functions in various ways using tools such as <code>both</code>, <code>either</code>, <code>pipe</code> and <code>compose</code>.</li><li>Partial Application help us that it can be useful to only supply some of the arguments to a function, allowing a later function to supply the rest.We use <code>partial</code> and <code>curry</code> to help us with this and learn about <code>flip</code> and the placeholder(<code>__</code>).</li><li>Declarative Programming teaches us about the difference between imperative and declarative programming.We learn how to use Ramda’s declarative replacements for arithmetic, comparisons,logic and conditionals.</li><li>Pointfree Style introduces us the idea of pointfree style,also known as tacit programming.In pointfree style,we don’t actually see the data parameter that we’ar operating on;it’s implicit. Our programs are made up of small, simple building blocks that are combined together to do what we need. Only at the end do we apply out compound functions to the actual data.</li><li>Immutability and Objects returns us to the idea of working declaratively, this time giving us the tools we need to read, update, delete, and transform properties of objects.</li><li>Immutability and Arrays continues the theme and shows us how to do the same for arrays.</li><li>Lenses concludes by introducing the concept of a lens, a construct that allows us to focus on a small part of a larger data structure. Using the view, set, and over functions, we can read, update, and transform the focused value in the context of its larger data structure.</li></ul><hr><p><em>Cite from <a href="http://randycoulman.com/blog/2016/07/19/thinking-in-ramda-wrap-up/" target="_blank" rel="noopener">« Thinking in Ramda: Wrap-Up »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Wrap-Up&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Wrap-Up&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Wrap-Up&quot;&gt;&lt;/a&gt;Thinking in Ramda: Wrap-Up&lt;/h1&gt;&lt;p&gt;Ramda has some underlying principles that drive its API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data last: Almost all of the functions take the data parameter as the last parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Currying: Almost every function in Ramda is “curried”. That is, you can call a function with only a subset of its required arguments, and it will return a new function that takes the remaining arguments. Once all of the arguments are provided, the original function is invoked.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 4</title>
    <link href="http://jiaxf.github.io/2018/04/19/4-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/4-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Declarative-Programming"><a href="#Thinking-in-Ramda-Declarative-Programming" class="headerlink" title="Thinking in Ramda: Declarative Programming"></a>Thinking in Ramda: Declarative Programming</h1><p>As we start writing small functional building blocks and combining them, we find that we have to write a lot of functions that wrap JavaScript’s operators such as arithmetic, comparison, logic, and control flow. This can feel tedious, but Ramda has our back.</p><p>There are many different ways to divide up the programming language/style landscape. There’s static typing vs dynamic typing, interpreted languages vs compiled languages, low-level vs high-level, etc.</p><p>Another such division is imperative programming vs declarative programming.<br><a id="more"></a><br>Functional programming is considered a subset of declarative programming. In a functional program, we define functions and then tell the computer what to do by combining these functions.</p><p>Even in declarative programs, it is necessary to do similar tasks to those we do in imperative programs. Control flow, arithmetic, comparison, and logic are still the basic building blocks we have to work with. But we need to find a way to express these constructs in a declarative way.</p><h2 id="Declarative-Replacements"><a href="#Declarative-Replacements" class="headerlink" title="Declarative Replacements"></a>Declarative Replacements</h2><p>Since we’re programming in JavaScript, an imperative language, it’s fine to use the standard imperative constructs when writing “normal” JavaScript code.</p><p>But when we’re writing functional transformations using pipelines and similar constructs, the imperative constructs don’t play well.</p><p>Ramda provides add, subtract, multiply, and divide functions to use in place of the standard arithmetic operators.</p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>Notice that some of our functions are using standard comparison operators (<code>===</code> and `&gt;= in this case). As you might suspect by now, Ramda also provides replacements for these.</p><p>Let’s modify our code to use <code>equals</code> in place of <code>===</code> and <code>gte</code> in place of <code>&gt;=</code>.</p><p>Ramda also provides <code>gt</code> for <code>&gt;</code>, <code>lt</code> for <code>&lt;</code>, and <code>lte</code> for <code>&lt;=</code>.</p><p>In addition to <code>equals</code>, there is <code>identical</code> for determining if two values reference the same memory.</p><p>There are a couple of common uses of <code>===</code>: checking if a string or array is empty (<code>str === &#39;&#39;</code> or <code>arr.length === 0</code>), and checking if a variable is <code>null</code> or <code>undefined</code>. Ramda provides handy functions for both cases: <code>isEmpty</code> and <code>isNil</code>.</p><h2 id="Logic"><a href="#Logic" class="headerlink" title="Logic"></a>Logic</h2><p>we used the <code>both</code> and <code>either</code> functions in place of <code>&amp;&amp;</code> and <code>||</code> operations. We also talked about <code>complement</code> in place of <code>!</code>.</p><p>But sometimes we need to apply <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code> to disparate values. For those cases, Ramda gives us <code>and</code>, <code>or</code>, and <code>not</code> functions. I think of it this way: <code>and</code>, <code>or</code>, and <code>not</code> work with values, while <code>both</code>, <code>either</code>, and <code>complement</code> work with functions.</p><p><code>defaultTo</code> checks if the second argument <code>isNil</code>. If it isn’t, it returns that as the value, otherwise it returns the first value.</p><h2 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h2><ul><li>IfElse</li></ul><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><p>Constant functions are quite useful in situations like this. As you might imagine, Ramda provides us a shortcut. In this case, the shortcut is named <code>always</code>.</p><p>Ramda also provides <code>T</code> and <code>F</code> as further shortcuts for <code>always(true)</code> and <code>always(false)</code>.</p><h2 id="Identity"><a href="#Identity" class="headerlink" title="Identity"></a>Identity</h2><p><code>identity</code> can take more than one argument, but it always returns its first argument. If we want to return something other than the first argument, there’s the more general <code>nthArg</code> function. It’s much less common than <code>identity</code>.</p><h2 id="When-And-Unless"><a href="#When-And-Unless" class="headerlink" title="When And Unless"></a>When And Unless</h2><h2 id="Cond"><a href="#Cond" class="headerlink" title="Cond"></a>Cond</h2><hr><p><em>Cite From <a href="http://randycoulman.com/blog/2016/06/14/thinking-in-ramda-declarative-programming/" target="_blank" rel="noopener">« Thinking in Ramda: Declarative Programming »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Declarative-Programming&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Declarative-Programming&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Declarative Programming&quot;&gt;&lt;/a&gt;Thinking in Ramda: Declarative Programming&lt;/h1&gt;&lt;p&gt;As we start writing small functional building blocks and combining them, we find that we have to write a lot of functions that wrap JavaScript’s operators such as arithmetic, comparison, logic, and control flow. This can feel tedious, but Ramda has our back.&lt;/p&gt;
&lt;p&gt;There are many different ways to divide up the programming language/style landscape. There’s static typing vs dynamic typing, interpreted languages vs compiled languages, low-level vs high-level, etc.&lt;/p&gt;
&lt;p&gt;Another such division is imperative programming vs declarative programming.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
</feed>

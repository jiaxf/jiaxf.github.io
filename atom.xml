<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞天雪的技术博客</title>
  <icon>https://www.gravatar.com/avatar/221bd4f690152d292d31dbe2f498412f</icon>
  <subtitle>技术无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiaxf.github.io/"/>
  <updated>2018-04-19T06:44:50.000Z</updated>
  <id>http://jiaxf.github.io/</id>
  
  <author>
    <name>Jiaxf</name>
    <email>jiaxuefeng0@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>函数式编程</title>
    <link href="http://jiaxf.github.io/2018/04/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://jiaxf.github.io/2018/04/19/函数式编程/</id>
    <published>2018-04-19T06:19:50.000Z</published>
    <updated>2018-04-19T06:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="Javascript的箭头函数"><a href="#Javascript的箭头函数" class="headerlink" title="Javascript的箭头函数"></a>Javascript的箭头函数</h2><p><code>ECMAScript2015</code>引入箭头表达式。箭头函数其实是匿名函数，基本语法如下：</p><blockquote><p>(param1, param2, …, paramN) =&gt; { statements }</p><p>(param1, param2, …, paramN) =&gt; expression</p><p>   // 等于 :  =&gt; { return expression; }</p><p>   // 只有一个参数时,括号才可以不加:</p><p>   (singleParam) =&gt; { statements }</p><p>   singleParam =&gt; { statements }</p><p>   //如果没有参数,就一定要加括号:</p><p>   () =&gt; { statements }</p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> simple = <span class="function"><span class="params">a</span> =&gt;</span> a &gt; <span class="number">15</span> ? <span class="number">15</span> : a;</span><br><span class="line">simple(<span class="number">16</span>);   <span class="comment">// 15</span></span><br><span class="line">simple(<span class="number">10</span>);   <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> max = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);  <span class="comment">//66</span></span><br><span class="line"><span class="keyword">var</span> even = arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> v % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// [6, 0, 18]</span></span><br><span class="line"><span class="keyword">var</span> double = arr.map(<span class="function"><span class="params">v</span> =&gt;</span> v * <span class="number">2</span>);       <span class="comment">// [10, 12, 26, 0, 36, 46]</span></span><br></pre></td></tr></table></figure><p>有些时候，某些函数在声明的时候就是调用的时候，尤其是函数式编程中，一个函数还对外返回函数的时候。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakePowerFn</span>(<span class="params">power</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">PowerFn</span>(<span class="params">base</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(base, power);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">power3 = MakePowerFn(<span class="number">3</span>); <span class="comment">// 制造一个X的3次方的函数</span></span><br><span class="line">power2 = MakePowerFn(<span class="number">2</span>); <span class="comment">// 制造一个X的2次方的函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(power3(<span class="number">10</span>));  <span class="comment">// 10的3次方 1000</span></span><br><span class="line"><span class="built_in">console</span>.log(power2(<span class="number">10</span>));  <span class="comment">// 10的2次方 100</span></span><br></pre></td></tr></table></figure><p>用箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MakePowerFn = <span class="function"><span class="params">power</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">base</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(base, power);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line">MakePowerFn = <span class="function"><span class="params">power</span> =&gt;</span> base =&gt; <span class="built_in">Math</span>.pow(base, power)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上括号</span></span><br><span class="line">MakePowerFn = <span class="function">(<span class="params">power</span>) =&gt;</span> (</span><br><span class="line">  (base) =&gt; (<span class="built_in">Math</span>.pow(base, power))</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="匿名函数的递归"><a href="#匿名函数的递归" class="headerlink" title="匿名函数的递归"></a>匿名函数的递归</h2><p>函数式编程立志于用函数表达式来消除有状态的函数，以及for/while循环，所以在函数式编程里不应该用for/while循环，而要改用递归(递归的性能很差，所以，一般用尾递归来做优化，也就是把函数的计算状态当参数一层一层往下传递，这样语言的编译器后解释器就需要用函数栈来帮你保存函数的内部变量的状态了)。</p><p>递归的代码就是函数自己调用自己，比如求阶乘</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">fact</span>(n)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">n</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="type">n</span> * fact(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于匿名函数，可以把匿名函数当成一个参数传给另外一个函数，因为函数的参数有名字，所以就可以调用自己了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function combinator(<span class="function"><span class="keyword">func</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数式的匿名函数</span></span><br><span class="line">（<span class="function"><span class="keyword">func</span>） =&gt; <span class="params">(<span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span></span></span>)</span><br></pre></td></tr></table></figure><p>阶乘代码重构<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">funtion fact(<span class="function"><span class="keyword">func</span>, <span class="title">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">1</span>: n * <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, n-<span class="number">1</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数版</span></span><br><span class="line"><span class="keyword">var</span> fact = (<span class="function"><span class="keyword">func</span>, <span class="title">n</span>) =&gt; <span class="params">(n == <span class="number">0</span> ? <span class="number">1</span> : <span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, n-<span class="number">1</span>)</span></span></span>);</span><br><span class="line">fact(fact, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数体声明时调用自己</span></span><br><span class="line">（<span class="function"><span class="keyword">func</span>, <span class="title">x</span>) =&gt; <span class="title">func</span><span class="params">(<span class="keyword">func</span>, x)</span></span>(</span><br><span class="line">    (<span class="function"><span class="keyword">func</span>, <span class="title">n</span>) =&gt; <span class="params">( n ==<span class="number">0</span> ? <span class="number">1</span> : n * <span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, n-<span class="number">1</span>)</span></span></span>),  <span class="comment">// 第一个调用参数</span></span><br><span class="line">    <span class="number">5</span> <span class="comment">// 第二个调用参数</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="动态高级函数的递归"><a href="#动态高级函数的递归" class="headerlink" title="动态高级函数的递归"></a>动态高级函数的递归</h2><p>递归版高阶函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">HighOrderFact = function(<span class="function"><span class="keyword">func</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> function(n)&#123;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">1</span> : <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span><span class="params">(n-1)</span>;</span></span><br><span class="line"><span class="function">  &#125;;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 需要一个函数做参数，然后返回这个函数的递归版本</span></span><br><span class="line"><span class="function"><span class="title">fact</span> = <span class="title">HighOrderFact</span><span class="params">(HighOrderFact)</span>;</span></span><br><span class="line"><span class="function"><span class="title">fact</span><span class="params">(5)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">HighOrderFact</span><span class="params">(HighOrderFact)</span><span class="params">(5)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fact</span> = <span class="title">function</span><span class="params">(hifunc)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> hifunc(hifunc);</span><br><span class="line">&#125;(</span><br><span class="line">   <span class="comment">// 调用参数是一个函数</span></span><br><span class="line">   function(<span class="function"><span class="keyword">func</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> function(n)&#123;</span><br><span class="line">       <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">1</span> : n * <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span><span class="params">(n-1)</span>;</span></span><br><span class="line"><span class="function">     &#125;;</span></span><br><span class="line"><span class="function">   &#125;</span></span><br><span class="line"><span class="function">);</span></span><br><span class="line"><span class="function">// 调用</span></span><br><span class="line"><span class="function"><span class="title">fact</span><span class="params">(5)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 箭头函数重构</span></span><br><span class="line"><span class="function"><span class="title">fact</span> = <span class="params">(highfunc =&gt; highfunc(highfunc)</span>) <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">func</span> =&gt; n =&gt; n == 0 ? 1 : n * <span class="keyword">func</span>(<span class="keyword">func</span>)</span><span class="params">(n-1)</span></span></span><br><span class="line"><span class="function">);</span></span><br></pre></td></tr></table></figure><h2 id="重构之前的程序"><a href="#重构之前的程序" class="headerlink" title="重构之前的程序"></a>重构之前的程序</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 查找数组正常版本</span></span><br><span class="line"> function <span class="built_in">find</span>(x, y) &#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; x.length; i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(x[i] == y) <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> null;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 干掉for，搞成递归版本</span></span><br><span class="line"> funcion  <span class="built_in">find</span>(x, y, i=<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>( i &gt;= x.length) <span class="keyword">return</span> null;</span><br><span class="line">   <span class="keyword">if</span>( x[i] == y) <span class="keyword">return</span> i;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">find</span>(x, y, i+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 继续重构 带实参的匿名函数版本</span></span><br><span class="line">((<span class="function"><span class="keyword">func</span>, <span class="title">x</span>, <span class="title">y</span>, <span class="title">i</span>) =&gt; <span class="title">func</span><span class="params">(<span class="keyword">func</span>, x,y i)</span></span>) ( <span class="comment">// 函数体</span></span><br><span class="line">    (<span class="function"><span class="keyword">func</span>, <span class="title">x</span>, <span class="title">y</span>, <span class="title">i</span>=0) =&gt; <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      i&gt;= x.length ? null :</span></span></span><br><span class="line"><span class="function"><span class="params">        x[i] == y ? i : <span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, x, y, i+<span class="number">1</span>)</span></span></span></span><br><span class="line">      ), <span class="comment">// 第一个调用参数</span></span><br><span class="line">      arr,  <span class="comment">// 第二个调用参数</span></span><br><span class="line">      <span class="number">2</span> <span class="comment">// 第三个调用参数    </span></span><br><span class="line">)</span><br><span class="line"> <span class="comment">// 引入高级函数，去除实参</span></span><br><span class="line"></span><br><span class="line">const <span class="built_in">find</span> = （highfunc =&gt; highfunc(highfunc))(</span><br><span class="line">   <span class="function"><span class="keyword">func</span> =&gt; <span class="params">(x, y, i =<span class="number">0</span> )</span></span> =&gt; (</span><br><span class="line">      i &gt;= x.length ? null :</span><br><span class="line">        x[i] == y ? i : <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span></span>(x, y, i+<span class="number">1</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"> ;</span><br></pre></td></tr></table></figure><p>可以参考以下两篇文章</p><ul><li><em><a href="http://mvanier.livejournal.com/2897.html" target="_blank" rel="noopener">《The Y Combinator (Slight Return)》</a></em></li><li><em><a href="https://en.wikipedia.org/wiki/Fixed-point_combinator" target="_blank" rel="noopener">《Wikipedia: Fixed-point combinator》</a></em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h1&gt;&lt;h2 id=&quot;Javascript的箭头函数&quot;&gt;&lt;a href=&quot;#Javascript的箭头函数&quot; class=&quot;he
      
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="函数式编程" scheme="http://jiaxf.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2018-04-19-项目基础架构</title>
    <link href="http://jiaxf.github.io/2018/04/19/2018-04-19-%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/"/>
    <id>http://jiaxf.github.io/2018/04/19/2018-04-19-项目基础架构/</id>
    <published>2018-04-19T03:32:54.000Z</published>
    <updated>2018-04-19T03:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目基础架构"><a href="#项目基础架构" class="headerlink" title="项目基础架构"></a>项目基础架构</h1><h2 id="为什么要建设基础架构？"><a href="#为什么要建设基础架构？" class="headerlink" title="为什么要建设基础架构？"></a>为什么要建设基础架构？</h2><ol><li>夯实基础，事半功倍</li><li>提高系统可用性</li><li>隔离业务代码与框架、平台</li><li>降低技术债，提高管理效率</li></ol><h2 id="如何实施推进？"><a href="#如何实施推进？" class="headerlink" title="如何实施推进？"></a>如何实施推进？</h2><ol><li>顺势而为，拨乱为治</li><li>自底向上，由点及面</li><li>抓住痛点，有备无患</li><li>亡羊补牢，犹未为晚</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;项目基础架构&quot;&gt;&lt;a href=&quot;#项目基础架构&quot; class=&quot;headerlink&quot; title=&quot;项目基础架构&quot;&gt;&lt;/a&gt;项目基础架构&lt;/h1&gt;&lt;h2 id=&quot;为什么要建设基础架构？&quot;&gt;&lt;a href=&quot;#为什么要建设基础架构？&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>2018-04-17-spring_cloud简介</title>
    <link href="http://jiaxf.github.io/2018/04/17/2018-04-17-spring-cloud%E7%AE%80%E4%BB%8B/"/>
    <id>http://jiaxf.github.io/2018/04/17/2018-04-17-spring-cloud简介/</id>
    <published>2018-04-17T07:14:10.000Z</published>
    <updated>2018-04-17T07:22:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-简介"><a href="#Spring-Cloud-简介" class="headerlink" title="Spring Cloud 简介"></a>Spring Cloud 简介</h1><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p><p>微服务是可以独立部署、水平扩展、独立访问（或者有独立的数据库）的服务单元，springcloud就是这些微服务的大管家，采用了微服务这种架构之后，项目的数量会非常多，springcloud做为大管家需要管理好这些微服务，自然需要很多小弟来帮忙。</p><p>主要的小弟有：Spring Cloud Config、Spring Cloud Netflix（Eureka、Hystrix、Zuul、Archaius…）、Spring Cloud Bus、Spring Cloud for Cloud Foundry、Spring Cloud Cluster、Spring Cloud Consul、Spring Cloud Security、Spring Cloud Sleuth、Spring Cloud Data Flow、Spring Cloud Stream、Spring Cloud Task、Spring Cloud Zookeeper、Spring Cloud Connectors、Spring Cloud Starters、Spring Cloud CLI。</p><h2 id="核心成员"><a href="#核心成员" class="headerlink" title="核心成员"></a>核心成员</h2><h3 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h3><p>这可是个大boss，地位仅次于老大，老大各项服务依赖与它，与各种Netflix OSS组件集成，组成微服务的核心，它的小弟主要有Eureka, Hystrix, Zuul, Archaius… 太多了</p><h3 id="Netflix-Eureka"><a href="#Netflix-Eureka" class="headerlink" title="Netflix Eureka"></a>Netflix Eureka</h3><p>服务中心，云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。这个可是springcloud最牛鼻的小弟，服务中心，任何小弟需要其它小弟支持什么都需要从这里来拿，同样的你有什么独门武功的都赶紧过报道，方便以后其它小弟来调用；它的好处是你不需要直接找各种什么小弟支持，只需要到服务中心来领取，也不需要知道提供支持的其它小弟在哪里，还是几个小弟来支持的，反正拿来用就行，服务中心来保证稳定性和质量。</p><h3 id="Netflix-Hystrix"><a href="#Netflix-Hystrix" class="headerlink" title="Netflix Hystrix"></a>Netflix Hystrix</h3><p>熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。比如突然某个小弟生病了，但是你还需要它的支持，然后调用之后它半天没有响应，你却不知道，一直在等等这个响应；有可能别的小弟也正在调用你的武功绝技，那么当请求多之后，就会发生严重的阻塞影响老大的整体计划。这个时候Hystrix就派上用场了，当Hystrix发现某个小弟不在状态不稳定立马马上让它下线，让其它小弟来顶上来，或者给你说不用等了这个小弟今天肯定不行，该干嘛赶紧干嘛去别在这排队了。</p><h3 id="Netflix-Zuul"><a href="#Netflix-Zuul" class="headerlink" title="Netflix Zuul"></a>Netflix Zuul</h3><p>Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架。Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门。当其它门派来找大哥办事的时候一定要先经过zuul,看下有没有带刀子什么的给拦截回去，或者是需要找那个小弟的直接给带过去。</p><h3 id="Netflix-Archaius"><a href="#Netflix-Archaius" class="headerlink" title="Netflix Archaius"></a>Netflix Archaius</h3><p>配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。可以实现动态获取配置， 原理是每隔60s（默认，可配置）从配置源读取一次内容，这样修改了配置文件后不需要重启服务就可以使修改后的内容生效，前提使用archaius的API来读取。</p><h3 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h3><p>俗称的配置中心，配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。就是以后大家武器、枪火什么的东西都集中放到一起，别随便自己带，方便以后统一管理、升级装备。</p><h3 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h3><p>事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。相当于水浒传中日行八百里的神行太保戴宗，确保各个小弟之间消息保持畅通。</p><h3 id="Spring-Cloud-for-Cloud-Foundry"><a href="#Spring-Cloud-for-Cloud-Foundry" class="headerlink" title="Spring Cloud for Cloud Foundry"></a>Spring Cloud for Cloud Foundry</h3><p>Cloud Foundry是VMware推出的业界第一个开源PaaS云平台，它支持多种框架、语言、运行时环境、云平台及应用服务，使开发人员能够在几秒钟内进行应用程序的部署和扩展，无需担心任何基础架构的问题</p><p>其实就是与CloudFoundry进行集成的一套解决方案，抱了Cloud Foundry的大腿。</p><h3 id="Spring-Cloud-Cluster"><a href="#Spring-Cloud-Cluster" class="headerlink" title="Spring Cloud Cluster"></a>Spring Cloud Cluster</h3><p>Spring Cloud Cluster将取代Spring Integration。提供在分布式系统中的集群所需要的基础功能支持，如：选举、集群的状态一致性、全局锁、tokens等常见状态模式的抽象和实现。</p><p>如果把不同的帮派组织成统一的整体，Spring Cloud Cluster已经帮你提供了很多方便组织成统一的工具。</p><h3 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h3><p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.</p><p>Spring Cloud Consul 封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。</p><h2 id="其它小弟"><a href="#其它小弟" class="headerlink" title="其它小弟"></a>其它小弟</h2><p>###　Spring Cloud Security</p><p>基于spring security的安全工具包，为你的应用程序添加安全控制。这个小弟很牛鼻专门负责整个帮派的安全问题，设置不同的门派访问特定的资源，不能把秘籍葵花宝典泄漏了。</p><h3 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h3><p>日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。</p><h3 id="Spring-Cloud-Data-Flow"><a href="#Spring-Cloud-Data-Flow" class="headerlink" title="Spring Cloud Data Flow"></a>Spring Cloud Data Flow</h3><p>Data flow 是一个用于开发和执行大范围数据处理其模式包括ETL，批量运算和持续运算的统一编程模型和托管服务。</p><p>对于在现代运行环境中可组合的微服务程序来说，Spring Cloud data flow是一个原生云可编配的服务。使用Spring Cloud data flow，开发者可以为像数据抽取，实时分析，和数据导入/导出这种常见用例创建和编配数据通道 （data pipelines）。</p><p>Spring Cloud data flow 是基于原生云对 spring XD的重新设计，该项目目标是简化大数据应用的开发。Spring XD 的流处理和批处理模块的重构分别是基于 Spring Boot的stream 和 task/batch 的微服务程序。这些程序现在都是自动部署单元而且他们原生的支持像 Cloud Foundry、Apache YARN、Apache Mesos和Kubernetes 等现代运行环境。</p><p>Spring Cloud data flow 为基于微服务的分布式流处理和批处理数据通道提供了一系列模型和最佳实践。</p><h3 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h3><p>Spring Cloud Stream是创建消息驱动微服务应用的框架。Spring Cloud Stream是基于Spring Boot创建，用来建立单独的／工业级spring应用，使用spring integration提供与消息代理之间的连接。数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。</p><p>一个业务会牵扯到多个任务，任务之间是通过事件触发的，这就是Spring Cloud stream要干的事了</p><h3 id="Spring-Cloud-Task"><a href="#Spring-Cloud-Task" class="headerlink" title="Spring Cloud Task"></a>Spring Cloud Task</h3><p>Spring Cloud Task 主要解决短命微服务的任务管理，任务调度的工作，比如说某些定时任务晚上就跑一次，或者某项数据分析临时就跑几次。</p><h3 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a>Spring Cloud Zookeeper</h3><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><p>操作Zookeeper的工具包，用于使用zookeeper方式的服务发现和配置管理，抱了Zookeeper的大腿。</p><h3 id="Spring-Cloud-Connectors"><a href="#Spring-Cloud-Connectors" class="headerlink" title="Spring Cloud Connectors"></a>Spring Cloud Connectors</h3><p>Spring Cloud Connectors 简化了连接到服务的过程和从云平台获取操作的过程，有很强的扩展性，可以利用Spring Cloud Connectors来构建你自己的云平台。</p><p>便于云端应用程序在各种PaaS平台连接到后端，如：数据库和消息代理服务。</p><h3 id="Spring-Cloud-Starters"><a href="#Spring-Cloud-Starters" class="headerlink" title="Spring Cloud Starters"></a>Spring Cloud Starters</h3><p>Spring Boot式的启动项目，为Spring Cloud提供开箱即用的依赖管理。</p><h3 id="Spring-Cloud-CLI"><a href="#Spring-Cloud-CLI" class="headerlink" title="Spring Cloud CLI"></a>Spring Cloud CLI</h3><p>基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。</p><h2 id="和Spring-Boot-是什么关系"><a href="#和Spring-Boot-是什么关系" class="headerlink" title="和Spring Boot 是什么关系"></a>和Spring Boot 是什么关系</h2><p>Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务，Spring Cloud是一个基于Spring Boot实现的云应用开发工具；Spring Boot专注于快速、方便集成的单个个体，Spring Cloud是关注全局的服务治理框架；Spring Boot使用了默认大于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置，Spring Cloud很大的一部分是基于Spring Boot来实现,可以不基于Spring Boot吗？不可以。</p><p>Spring Boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring Boot，属于依赖的关系。</p><p>spring -&gt; spring booot &gt; Spring Cloud 这样的关系。</p><h2 id="Spring-Cloud的优势"><a href="#Spring-Cloud的优势" class="headerlink" title="Spring Cloud的优势"></a>Spring Cloud的优势</h2><p>微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？</p><ul><li>产出于spring大家族，spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善。比如dubbo现在就差不多死了</li><li>有Spring Boot 这个独立干将可以省很多事，大大小小的活Spring Boot都搞的挺不错。</li><li>作为一个微服务治理的大家伙，考虑的很全面，几乎服务治理的方方面面都考虑到了，方便开发开箱即用。</li><li>Spring Cloud 活跃度很高，教程很丰富，遇到问题很容易找到解决方案</li><li>轻轻松松几行代码就完成了熔断、均衡负责、服务中心的各种平台功能</li></ul><p>Spring Cloud对于中小型互联网公司来说是一种福音，因为这类公司往往没有实力或者没有足够的资金投入去开发自己的分布式系统基础设施，使用Spring Cloud一站式解决方案能在从容应对业务发展的同时大大减少开发成本。同时，随着近几年微服务架构和Docker容器概念的火爆，也会让Spring Cloud在未来越来越“云”化的软件开发风格中立有一席之地，尤其是在目前五花八门的分布式解决方案中提供了标准化的、全站式的技术方案，意义可能会堪比当前Servlet规范的诞生，有效推进服务端软件系统技术水平的进步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Cloud-简介&quot;&gt;&lt;a href=&quot;#Spring-Cloud-简介&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud 简介&quot;&gt;&lt;/a&gt;Spring Cloud 简介&lt;/h1&gt;&lt;p&gt;Spring Cloud是一系列框架
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018/04/17/spring-boot入门.md</title>
    <link href="http://jiaxf.github.io/2018/04/17/2018-04-17-spring-boot%E5%85%A5%E9%97%A8/"/>
    <id>http://jiaxf.github.io/2018/04/17/2018-04-17-spring-boot入门/</id>
    <published>2018-04-17T06:19:50.000Z</published>
    <updated>2018-04-17T07:06:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot入门"><a href="#SpringBoot入门" class="headerlink" title="SpringBoot入门"></a>SpringBoot入门</h1><h2 id="什么是Spring-Boot？"><a href="#什么是Spring-Boot？" class="headerlink" title="什么是Spring Boot？"></a>什么是Spring Boot？</h2><p>SpringBoot简化了基于Spring的应用开发，通过少量代码就能创建一个独立的、产品级别的Spring应用。<br>SpringBoot为spring平台及第三方库提供开箱即用的设置，该框架使用特定的方式来进行配置，从而使开发人员<br>不再需要定义样板化的配置。<br>SpringBoot的核心思想是约定大于配置，一切自动完成。采用SpringBoot可以大大的简化开发模式。</p><h2 id="使用spring-boot的好处"><a href="#使用spring-boot的好处" class="headerlink" title="使用spring boot的好处"></a>使用spring boot的好处</h2><p>简单、快速、方便。</p><p>平时搭建一个spring web 项目的时候需要怎么做呢？</p><ul><li>1) 配置web.xml,加载spring和spring mvc</li><li>2) 配置数据库连接、配置spring事务</li><li>3) 配置加载配置文件的读取，开启注解</li><li>4) 配置日志文件</li><li>…</li><li>配置完成部署tomcat调试</li><li>…</li></ul><p>使用spring boot快速搭建，构建微服务。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="maven构建项目"><a href="#maven构建项目" class="headerlink" title="maven构建项目"></a>maven构建项目</h3><ol><li>访问<a href="http://start.spring.io" target="_blank" rel="noopener">http://start.spring.io</a></li><li>选择构建工具Maven Project、Spring Boot版本及一些工程信息，点击“Switch to the full version”。<br> <img src="/img/springboot1.png" alt=""></li><li>点击Generate Project下周项目压缩包</li><li>解压后，使用eclipse， Import-&gt;Existing Maven Projects-&gt; Next -&gt; 选择解压后的文件夹-&gt; Finsh, OK done!</li></ol><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>   <img src="/img/springboot2.png" alt=""></p><p>如上图所示，Spring Boot的基础结构共三个文件:</p><p>   src/main/java 程序开发以及主程序入口<br>   src/main/resources 配置文件<br>   src/test/java 测试程序<br>   另外，spingboot建议的目录结果如下：<br>   root package结构：com.example.myproject</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">com</span><br><span class="line">  +- example</span><br><span class="line">    +- myproject</span><br><span class="line">      +- Application.java</span><br><span class="line">      |</span><br><span class="line">      +- domain</span><br><span class="line">      |  +- Customer.java</span><br><span class="line">      |  +- CustomerRepository.java</span><br><span class="line">      |</span><br><span class="line">      +- service</span><br><span class="line">      |  +- CustomerService.java</span><br><span class="line">      |</span><br><span class="line">      +- controller</span><br><span class="line">      |  +- CustomerController.java</span><br><span class="line">      |</span><br></pre></td></tr></table></figure><ol><li>Application.java 建议放到根目录下面,主要用于做一些框架配置</li><li>domain目录主要用于实体（Entity）与数据访问层（Repository）</li><li>service 层主要是业务类代码</li><li>controller 负责页面访问控制</li></ol><blockquote><p>采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改。</p></blockquote><p>最后，启动Application main方法，至此一个java项目搭建好了！</p><h3 id="引入web模块"><a href="#引入web模块" class="headerlink" title="引入ｗｅｂ模块"></a>引入ｗｅｂ模块</h3><p> 1、pom.xml中添加支持web的模块：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml文件中默认有两个模块：</p><ul><li>spring-boot-starter ：核心模块，包括自动配置支持、日志和YAML；</li></ul><ul><li>spring-boot-starter-test ：测试模块，包括JUnit、Hamcrest、Mockito。</li></ul><p>2、编写controller内容：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/hello"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String index() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@RestController 的意思就是controller里面的方法都以json格式输出，不用再写什么jackjson配置的了！</p><p>3、启动主程序，打开浏览器访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>，就可以看到效果了，有木有很简单！</p><h3 id="如何做单元测试"><a href="#如何做单元测试" class="headerlink" title="如何做单元测试"></a>如何做单元测试</h3><p>打开的src/test/下的测试入口，编写简单的http请求来测试；使用mockmvc进行，利用MockMvcResultHandlers.print()打印出执行结果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloWorldController()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"Hello World"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="开发环境调试"><a href="#开发环境调试" class="headerlink" title="开发环境调试"></a>开发环境调试</h3><p>springBoot对调试支持很好，修改之后可以实时生效，需要添加以下的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>该模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用sping boot非常适合构建微服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot入门&quot;&gt;&lt;a href=&quot;#SpringBoot入门&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot入门&quot;&gt;&lt;/a&gt;SpringBoot入门&lt;/h1&gt;&lt;h2 id=&quot;什么是Spring-Boot？&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="spring" scheme="http://jiaxf.github.io/tags/spring/"/>
    
      <category term="java" scheme="http://jiaxf.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>2018-04-16-github上备份Hexo博客.md</title>
    <link href="http://jiaxf.github.io/2018/04/16/2018-04-16-github%E4%B8%8A%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://jiaxf.github.io/2018/04/16/2018-04-16-github上备份Hexo博客/</id>
    <published>2018-04-16T01:06:04.000Z</published>
    <updated>2018-04-16T02:08:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github上备份Hexo博客"><a href="#Github上备份Hexo博客" class="headerlink" title="Github上备份Hexo博客"></a>Github上备份Hexo博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>配置好Git和Github环境后，Hexo博客的markdown文件备份。Git相关操作请参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的Git教程</a>。</p><h2 id="备份博客"><a href="#备份博客" class="headerlink" title="备份博客"></a>备份博客</h2><p>假设本地Hexo博客已经初始化，如果没有配置好Hexo博客详见<a href="https://lrscy.github.io/2017/11/10/Ubuntu-Github-io-config-Hexo" target="_blank" rel="noopener">「Ubuntu16.04下从零起步搭建配置github.io博客————Hexo」</a>。</p><h2 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h2><p>git可以很方便和低代价的创建新分支，可以利用git的新分支来备份博客。</p><p>本地Git建立新分支</p><p><code>$ git checkout -b BRANCHNAME</code></p><blockquote><p><code>BRANCHNAME</code>是自定义的新分支的名字，建议起为<code>hexo</code>。</p></blockquote><h2 id="建立-gitignore"><a href="#建立-gitignore" class="headerlink" title="建立.gitignore"></a>建立.gitignore</h2><p>建立<code>.gitignore</code> 文件将不需要备份的文件屏蔽。参考<code>.gitignore</code>文件如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">*.deploy*/</span><br></pre></td></tr></table></figure><h1 id="Github上备份"><a href="#Github上备份" class="headerlink" title="Github上备份"></a>Github上备份</h1><p>假设当前在hexo博客的根目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"Backup"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin hexo</span></span><br></pre></td></tr></table></figure><p>github上有两个分支（<code>master</code>和 <code>hexo</code>）</p><h2 id="个人备份习惯"><a href="#个人备份习惯" class="headerlink" title="个人备份习惯"></a>个人备份习惯</h2><p>个人而言习惯先备份文件再生产博客。执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"Backup"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g -d</span></span><br></pre></td></tr></table></figure></p><h2 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h2><h3 id="克隆项目到本地"><a href="#克隆项目到本地" class="headerlink" title="克隆项目到本地"></a>克隆项目到本地</h3><p>输入命令克隆博客必须文件（<code>hexo</code>分支）</p><p><code>$ git clone https://github.com/jiaxf/jiaxf.github.io</code></p><h3 id="恢复博客-1"><a href="#恢复博客-1" class="headerlink" title="恢复博客"></a>恢复博客</h3><p>在克隆的文件夹下输入如下命令恢复博客：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git</span></span><br></pre></td></tr></table></figure><blockquote><p>注：不再需要执行<code>hexo init</code>命令。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github上备份Hexo博客&quot;&gt;&lt;a href=&quot;#Github上备份Hexo博客&quot; class=&quot;headerlink&quot; title=&quot;Github上备份Hexo博客&quot;&gt;&lt;/a&gt;Github上备份Hexo博客&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="git" scheme="http://jiaxf.github.io/tags/git/"/>
    
      <category term="hexo" scheme="http://jiaxf.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>2018-04-13-技术随笔.md</title>
    <link href="http://jiaxf.github.io/2018/04/13/2018-04-13-python-md-1/"/>
    <id>http://jiaxf.github.io/2018/04/13/2018-04-13-python-md-1/</id>
    <published>2018-04-13T03:31:04.000Z</published>
    <updated>2018-04-13T03:48:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac下零配置server"><a href="#Mac下零配置server" class="headerlink" title="Mac下零配置server"></a>Mac下零配置server</h1><p>Pow<a href="http://pow.cx/" target="_blank" rel="noopener">Pow</a> is a zero-config Rack Server for Mac。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p><code>curl get.pow.cx | sh</code></p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>Symlink the folder into ~/.pow</p><p><code>$ cd ~/.pow $ ln -s /path/to/myapp</code></p><p>Your website will be up and running at <a href="http://myapp.dev" target="_blank" rel="noopener">http://myapp.dev</a>. The URL is based on the name of the symlink.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac下零配置server&quot;&gt;&lt;a href=&quot;#Mac下零配置server&quot; class=&quot;headerlink&quot; title=&quot;Mac下零配置server&quot;&gt;&lt;/a&gt;Mac下零配置server&lt;/h1&gt;&lt;p&gt;Pow&lt;a href=&quot;http://pow.cx/
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="mac" scheme="http://jiaxf.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>redis配置</title>
    <link href="http://jiaxf.github.io/2018/03/29/redis%E9%85%8D%E7%BD%AE/"/>
    <id>http://jiaxf.github.io/2018/03/29/redis配置/</id>
    <published>2018-03-29T01:27:13.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis-配置"><a href="#redis-配置" class="headerlink" title="redis 配置"></a>redis 配置</h1><p>redis.conf 配置项说明如下：</p><ol><li>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程<br> daemonize no</li><li>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定<br> pidfile /var/run/redis.pid</li><li>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字<br> port 6379</li><li>绑定的主机地址<br> bind 127.0.0.1<br>5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能<br> timeout 300</li><li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose<br> loglevel verbose</li><li>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null<br> logfile stdout</li><li>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id<br> databases 16<a id="more"></a></dbid></li><li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合<br> save <seconds> <changes><br> Redis默认配置文件中提供了三个条件：<ul><li>save 900 1</li><li>save 300 10</li><li>save 60 10000<br>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</li></ul></changes></seconds></li><li>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<br>rdbcompression yes</li><li>指定本地数据库文件名，默认值为dump.rdb<br>dbfilename dump.rdb</li><li>指定本地数据库存放目录<br>dir ./</li><li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<br>slaveof <masterip> <masterport></masterport></masterip></li><li>当master服务设置了密码保护时，slav服务连接master的密码<br>masterauth <master-password></master-password></li><li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭<br>requirepass foobared</password></li><li>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息<br>maxclients 128</li><li>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<br>maxmemory <bytes></bytes></li><li>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<br>appendonly no</li><li>指定更新日志文件名，默认为appendonly.aof<br> appendfilename appendonly.aof</li><li>指定更新日志条件，共有3个可选值： <ul><li>no：表示等操作系统进行数据缓存同步到磁盘（快） </li><li>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） </li><li>everysec：表示每秒同步一次（折衷，默认值）</li><li>appendfsync everysec</li></ul></li><li>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）<br> vm-enabled no</li><li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<br> vm-swap-file /tmp/redis.swap</li><li>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<br> vm-max-memory 0</li><li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<br> vm-page-size 32</li><li>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。<br> vm-pages 134217728</li><li>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<br> vm-max-threads 4</li><li>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<br>glueoutputbuf yes</li><li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<br>hash-max-zipmap-entries 64<br>hash-max-zipmap-value 512</li><li>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<br>activerehashing yes</li><li>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<br>include /path/to/local.conf</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis-配置&quot;&gt;&lt;a href=&quot;#redis-配置&quot; class=&quot;headerlink&quot; title=&quot;redis 配置&quot;&gt;&lt;/a&gt;redis 配置&lt;/h1&gt;&lt;p&gt;redis.conf 配置项说明如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程&lt;br&gt; daemonize no&lt;/li&gt;
&lt;li&gt;当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定&lt;br&gt; pidfile /var/run/redis.pid&lt;/li&gt;
&lt;li&gt;指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字&lt;br&gt; port 6379&lt;/li&gt;
&lt;li&gt;绑定的主机地址&lt;br&gt; bind 127.0.0.1&lt;br&gt;5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能&lt;br&gt; timeout 300&lt;/li&gt;
&lt;li&gt;指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose&lt;br&gt; loglevel verbose&lt;/li&gt;
&lt;li&gt;日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null&lt;br&gt; logfile stdout&lt;/li&gt;
&lt;li&gt;设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id&lt;br&gt; databases 16
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="redis" scheme="http://jiaxf.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL双主一致性架构优化</title>
    <link href="http://jiaxf.github.io/2017/07/03/mysqlMySQL%E5%8F%8C%E4%B8%BB%E4%B8%80%E8%87%B4%E6%80%A7%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96/"/>
    <id>http://jiaxf.github.io/2017/07/03/mysqlMySQL双主一致性架构优化/</id>
    <published>2017-07-03T00:57:39.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL双主一致性架构优化"><a href="#MySQL双主一致性架构优化" class="headerlink" title="MySQL双主一致性架构优化"></a>MySQL双主一致性架构优化</h1><p>一、双主保证高可用</p><p>MySQL数据库集群常使用一主多从，主从同步，读写分离的方式来扩充数据库的读性能，保证读库的高可用，但此时写库仍然是单点。</p><p>在一个MySQL数据库集群中可以设置两个主库，并设置双向同步，以冗余写库的方式来保证写库的高可用。</p><p>二、并发引发不一致</p><p>数据冗余会引发数据的一致性问题，因为数据的同步有一个时间差，并发的写入可能导致数据同步失败，引起数据丢失：</p><p><img src="/images/640.png" alt=""></p><p>如上图所述，假设主库使用了auto increment来作为自增主键：</p><ul><li>两个MySQL-master设置双向同步可以用来保证主库的高可用</li><li>数据库中现存的记录主键是1，2，3</li><li>主库1插入了一条记录，主键为4，并向主库2同步数据</li><li>数据同步成功之前，主库2也插入了一条记录，由于数据还没有同步成功，插入记录生成的主键也为4，并向主库1也同步数据</li><li>主库1和主库2都插入了主键为4的记录，双主同步失败，数据不一致</li></ul><a id="more"></a><p>三、相同步长免冲突</p><p>能否保证两个主库生成的主键一定不冲突呢？<br>回答：</p><ul><li>设置不同的初始值</li><li>设置相同的增长步长</li></ul><p>就能够做到。</p><p><img src="/images/641.png" alt=""></p><p>如上图所示：<br>两个MySQL-master设置双向同步可以用来保证主库的高可用</p><ul><li>库1的自增初始值是1，库2的自增初始值是2，增长步长都为2</li><li>库1中插入数据主键为1/3/5/7，库2中插入数据主键为2/4/6/8，不冲突</li><li>数据双向同步后，两个主库会包含全部数据</li></ul><p><img src="/images/642.png" alt=""></p><p>如上图所示，两个主库最终都将包含1/2/3/4/5/6/7/8所有数据，即使有一个主库挂了，另一个主库也能够保证写库的高可用。</p><p>四、上游生成ID避冲突</p><p>换一个思路，为何要依赖于数据库的自增ID，来保证数据的一致性呢？<br>完全可以由业务上游，使用统一的ID生成器，来保证ID的生成不冲突：</p><p><img src="/images/643.png" alt=""></p><p>如上图所示，调用方插入数据时，带入全局唯一ID，而不依赖于数据库的auto increment，也能解决这个问题。</p><p>至于如何生成全局唯一，趋势递增的ID，参见文章《分布式ID生成算法》。</p><p>五、消除双写不治本</p><p>使用auto increment两个主库并发写可能导致数据不一致，只使用一个主库提供服务，另一个主库作为shadow-master，只用来保证高可用，能否避免一致性问题呢？</p><p><img src="/images/644.png" alt=""></p><p>如上图所示：</p><ul><li>两个MySQL-master设置双向同步可以用来保证主库的高可用</li><li>只有主库1对外提供写入服务</li><li>两个主库设置相同的虚IP，在主库1挂掉或者网络异常的时候，虚IP自动漂移，shadow master顶上，保证主库的高可用</li></ul><p>这个切换由于虚IP没有变化，所以切换过程对调用方是透明的，但在极限的情况下，也可能引发数据的不一致：</p><p><img src="/images/645.png" alt=""></p><p>如上图所示：</p><ul><li>两个MySQL-master设置双向同步可以用来保证主库的高可用，并设置了相同的虚IP</li><li>网络抖动前，主库1对上游提供写入服务，插入了一条记录，主键为4，并向shadow master主库2同步数据</li><li>突然主库1网络异常，keepalived检测出异常后，实施虚IP漂移，主库2开始提供服务</li><li>在主键4的数据同步成功之前，主库2插入了一条记录，也生成了主键为4的记录，结果导致数据不一致</li></ul><p>六、内网DNS探测</p><p>虚IP漂移，双主同步延时导致的数据不一致，本质上，需要在双主同步完数据之后，再实施虚IP偏移，使用内网DNS探测，可以实现shadow master延时高可用：<br>使用内网域名连接数据库，例如：db.58daojia.org<br>主库1和主库2设置双主同步，不使用相同虚IP，而是分别使用ip1和ip2<br>一开始db.58daojia.org指向ip1<br>用一个小脚本轮询探测ip1主库的连通性<br>当ip1主库发生异常时，小脚本delay一个x秒的延时，等待主库2同步完数据之后，再将db.58daojia.org解析到ip2<br>程序以内网域名进行重连，即可自动连接到ip2主库，并保证了数据的一致性</p><p>七、总结</p><p>主库高可用，主库一致性，一些小技巧：</p><ul><li>双主同步是一种常见的保证写库高可用的方式</li><li>设置相同步长，不同初始值，可以避免auto increment生成冲突主键</li><li>不依赖数据库，业务调用方自己生成全局唯一ID是一个好方法</li><li>shadow master保证写库高可用，只有一个写库提供服务，并不能完全保证一致性</li><li>内网DNS探测，可以实现在主库1出现问题后，延时一个时间，再进行主库切换，以保证数据一致性</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL双主一致性架构优化&quot;&gt;&lt;a href=&quot;#MySQL双主一致性架构优化&quot; class=&quot;headerlink&quot; title=&quot;MySQL双主一致性架构优化&quot;&gt;&lt;/a&gt;MySQL双主一致性架构优化&lt;/h1&gt;&lt;p&gt;一、双主保证高可用&lt;/p&gt;
&lt;p&gt;MySQL数据库集群常使用一主多从，主从同步，读写分离的方式来扩充数据库的读性能，保证读库的高可用，但此时写库仍然是单点。&lt;/p&gt;
&lt;p&gt;在一个MySQL数据库集群中可以设置两个主库，并设置双向同步，以冗余写库的方式来保证写库的高可用。&lt;/p&gt;
&lt;p&gt;二、并发引发不一致&lt;/p&gt;
&lt;p&gt;数据冗余会引发数据的一致性问题，因为数据的同步有一个时间差，并发的写入可能导致数据同步失败，引起数据丢失：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/640.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所述，假设主库使用了auto increment来作为自增主键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个MySQL-master设置双向同步可以用来保证主库的高可用&lt;/li&gt;
&lt;li&gt;数据库中现存的记录主键是1，2，3&lt;/li&gt;
&lt;li&gt;主库1插入了一条记录，主键为4，并向主库2同步数据&lt;/li&gt;
&lt;li&gt;数据同步成功之前，主库2也插入了一条记录，由于数据还没有同步成功，插入记录生成的主键也为4，并向主库1也同步数据&lt;/li&gt;
&lt;li&gt;主库1和主库2都插入了主键为4的记录，双主同步失败，数据不一致&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://jiaxf.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql调优</title>
    <link href="http://jiaxf.github.io/2017/04/07/mysql%E8%B0%83%E4%BC%98/"/>
    <id>http://jiaxf.github.io/2017/04/07/mysql调优/</id>
    <published>2017-04-07T07:20:33.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-调优"><a href="#MySQL-调优" class="headerlink" title="MySQL 调优"></a>MySQL 调优</h1><h2 id="mysql中的两个关键参数"><a href="#mysql中的两个关键参数" class="headerlink" title="mysql中的两个关键参数"></a>mysql中的两个关键参数</h2><p>(1)interactive_timeout:</p><p>参数含义：服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。<br>参数默认值：28800秒（8小时）</p><p>(2)wait_timeout:</p><p>参数含义：服务器关闭非交互连接之前等待活动的秒数。<br>在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。<br>参数默认值：28800秒（8小时）</p><p>wait_timeout过大有弊端，其体现就是MySQL里大量的SLEEP进程无法及时释放，拖累系统性能，不过也不能把这个指设置的过小，否则你可 能会遭遇到“MySQL has gone away”之类的问题，通常来说，我觉得把wait_timeout设置为10是个不错的选择，但某些情况下可能也会出问题，比如说有一个CRON脚本， 其中两次SQL查询的间隔时间大于10秒的话，那么这个设置就有问题了（当然，这也不是不能解决的问题，你可以在程序里时不时mysql_ping一下， 以便服务器知道你还活着，重新计算wait_timeout时间）</p><a id="more"></a><figure class="highlight plain"><figcaption><span>set global wait_timeout</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mysqladmin-uroot-ppassword-variables-grep-cache"><a href="#mysqladmin-uroot-ppassword-variables-grep-cache" class="headerlink" title="mysqladmin -uroot -ppassword variables|grep _cache"></a>mysqladmin -uroot -ppassword variables|grep _cache</h4><p>[mysqld]<br>#</p><h1 id="Basic-Settings"><a href="#Basic-Settings" class="headerlink" title="* Basic Settings"></a>* Basic Settings</h1><p>#<br>user            = mysql<br>socket          = /var/run/mysqld/mysqld.sock<br>port            = 3306<br>basedir         = /usr<br>datadir         = /var/lib/mysql<br>pid-file        = /var/run/mysqld/mysqld.pid<br>tmpdir          = /tmp<br>lc-messages-dir = /usr/share/mysql      </p><p>#binlog的名字最好不要为默认，这样便于数据库的移植</p><p>#造成睡眠连接过多的原因？</p><p>#1.使用了太多持久连接（个人觉得，在高并发系统中，不适合使用持久连接）</p><p>#2.程序中，没有及时关闭mysql连接</p><p>#3.数据库查询不够优化，过度耗时<br>wait_timeout=300<br>interactive_timeout=300</p><p>#MySQL允许最大连接数<br>max_connections = 5000</p><p>#可以允许多少个错误连接<br>max_connect_errors = 6000</p><p>#忽略大小写<br>lower_case_table_names = 1</p><p>#避免Mysql的外部锁定，减少出错几率增加稳定性</p><p>#当外部锁定（external-locking）起作用时，每个进程若要访问数据表，则必须等待之前的进程完成操作并解除锁定。</p><p>#由于服务器访问数据表时经常需要等待解锁，因此在单服务器环境下external locking会让MySQL性能下降。</p><p>#所以在很多Linux发行版的源中，MySQL配置文件中默认使用了skip-external-locking来避免external locking。</p><p>#当使用了skip-external-locking后，为了使用MyISAMChk检查数据库或者修复、优化表，你必须保证在此过程中MySQL服务器没有使用需要操作的表。</p><p>#如果没有停止服务器，也至少需要先运行</p><p>#mysqladmin flush-tables</p><p>#详见<a href="http://www.bootf.com/594.html" target="_blank" rel="noopener">http://www.bootf.com/594.html</a><br>skip-external-locking</p><p>#禁止mysql对外部链接进行DNS解析，使用这一选项可以消除Mysql进行DNS解析的时间,但需要注意，</p><p>#如果开启该选项，则所有远程主机连接授权都要使用IP地址的方式没,否则Mysql将无法正常处理连接请求!<br>skip-name-resolve</p><p>#指定MySQL可能的连接数量。当MySQL主线程在很短的时间内接收到非常多的连接请求，该参数生效，主线程花费很短的时间检查连接并且启动一个新线程。</p><p>#back_log 参数的值指出在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中。</p><p>#如果系统在一个短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的侦听队列的大小。</p><p>#不同的操作系统在这个队列大小上有它自己的限制。</p><p>#试图设定back_log高于你的操作系统的限制将是无效的。默认值为50。对于Linux系统推荐设置为小于512的整数</p><p>#在linux下这个参数的值不能大于系统参数tcp_max_syn_backlog的值。</p><p>#通过以下命令可以查看tcp_max_syn_backlog的当前值 cat /proc/sys/net/ipv4/tcp_max_syn_backlog。</p><p>#我将该值设为300，作为测试</p><p>#mysql&gt; show variables like ‘back_log’;<br>back_log=300</p><p>wait_timeout=181440<br>#</p><h1 id="Instead-of-skip-networking-the-default-is-now-to-listen-only-on"><a href="#Instead-of-skip-networking-the-default-is-now-to-listen-only-on" class="headerlink" title="Instead of skip-networking the default is now to listen only on"></a>Instead of skip-networking the default is now to listen only on</h1><h1 id="localhost-which-is-more-compatible-and-is-not-less-secure"><a href="#localhost-which-is-more-compatible-and-is-not-less-secure" class="headerlink" title="localhost which is more compatible and is not less secure."></a>localhost which is more compatible and is not less secure.</h1><p>#bind-address           = 129.0.0.124<br>#</p><h1 id="Fine-Tuning"><a href="#Fine-Tuning" class="headerlink" title="* Fine Tuning"></a>* Fine Tuning</h1><p>#</p><p>#索引块是缓冲的并且被所有的线程共享。key_buffer_size是用于索引块的缓冲区大小，</p><p>#增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，</p><p>#系统将开始换页并且真的变慢了。</p><p>#<a href="http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html</a></p><p>#You can increase the value to get better index handling for all reads and multiple writes;</p><p>#on a system whose primary function is to run MySQL using the MyISAM storage engine,</p><p>#25% of the machine’s total memory is an acceptable value for this variable.</p><p>#mysql&gt; show variables like ‘key_buffer%’<br>key_buffer_size         = 1G<br>max_allowed_packet      = 128M</p><p>#The stack size for each thread. Many of the limits detected by the crash-me test are dependent on this value.</p><p>#The default of 192KB (256KB for 64-bit systems) is large enough for normal operation.</p><p>#If the thread stack size is too small, it limits the complexity of the SQL statements that the server can handle,</p><p>#the recursion depth of stored procedures, and other memory-consuming actions.</p><p>#<a href="http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html</a><br>thread_stack            = 256K</p><p>#服务器线程缓存thread_cache_size没有进行设置，或者设置过小,这个值表示可以重新利用保存在缓存中线程的数量,</p><p>#当断开连接时如果缓存中还有空间,那么客户端的线程将被放到缓存中,如果线程重新被请求，那么请求将从缓存中读取,</p><p>#如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能.</p><p>#通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)根据物理内存设置规则如下：</p><p>#1G  —&gt; 8</p><p>#2G  —&gt; 16</p><p>#3G  —&gt; 32</p><p>#&gt;3G  —&gt; 64<br>thread_cache_size       = 64</p><p>#为了更快的open表，这个参数很重要；比如200个并发connection，table_open_cache=200×N（一个查询中参与join的最大表的数量，也可能是分区表），如果是myisam表的话，table_open_cache=200×(N×2),还要考虑突发的临时表的文件描述符；在os可以支持打开文件数时，如果table_open_cache设置的比较高，mysql用光所有的文件描述符，就会拒绝连</p><p>#，查询出错.table_open_cache设置多大合适呢？处理从上面的理论推理计算外，还可以根据状态变量来监控“Opened_tables”，这个状态变量表示，从server服务启动为止，open表的数量，可以根据这个状态变量来比较精准的设置table_oprn_cache</p><p>#暂时设定为1024，需要有大规模考试测试做依据</p><p>#show global status like ‘%open%table%’<br>table_open_cache = 1024</p><h1 id="Sort-Buffer-Size-是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。"><a href="#Sort-Buffer-Size-是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。" class="headerlink" title="Sort_Buffer_Size 是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。"></a>Sort_Buffer_Size 是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。</h1><p>#Sort_Buffer_Size 并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。例如：500个连接将会消耗 500*sort_buffer_size(8M)=4G内存</p><p>#Sort_Buffer_Size 超过2KB的时候，就会使用mmap() 而不是 malloc() 来进行内存分配，导致效率降低。</p><p>#技术导读 <a href="http://blog.webshuo.com/2011/02/16/mysql-sort_buffer_size/" target="_blank" rel="noopener">http://blog.webshuo.com/2011/02/16/mysql-sort_buffer_size/</a></p><p>#dev-doc: <a href="http://dev.mysql.com/doc/refman/5.5/en/server-parameters.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.5/en/server-parameters.html</a></p><p>#explain select*from table where order limit；出现filesort</p><p>#属重点优化参数<br>sort_buffer_size = 16M</p><p>#用于表间关联缓存的大小<br>join_buffer_size = 16M</p><h1 id="MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read-buffer-size变量控制这一缓冲区的大小。如果对表的顺序扫-gt-描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。"><a href="#MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read-buffer-size变量控制这一缓冲区的大小。如果对表的顺序扫-gt-描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。" class="headerlink" title="MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。如果对表的顺序扫&gt;描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。"></a>MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。如果对表的顺序扫&gt;描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。</h1><p>read_buffer_size = 32M</p><h1 id="MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时-例如，按照排序顺序-，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁-gt-盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过-gt-大。"><a href="#MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时-例如，按照排序顺序-，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁-gt-盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过-gt-大。" class="headerlink" title="MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁&gt;盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过&gt;大。"></a>MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁&gt;盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过&gt;大。</h1><p>read_rnd_buffer_size = 32M</p><h1 id="MyISAM表发生变化时重新排序所需的缓冲"><a href="#MyISAM表发生变化时重新排序所需的缓冲" class="headerlink" title="MyISAM表发生变化时重新排序所需的缓冲"></a>MyISAM表发生变化时重新排序所需的缓冲</h1><p>myisam_sort_buffer_size = 128M</p><h1 id="This-replaces-the-startup-script-and-checks-MyISAM-tables-if-needed"><a href="#This-replaces-the-startup-script-and-checks-MyISAM-tables-if-needed" class="headerlink" title="This replaces the startup script and checks MyISAM tables if needed"></a>This replaces the startup script and checks MyISAM tables if needed</h1><h1 id="the-first-time-they-are-touch"><a href="#the-first-time-they-are-touch" class="headerlink" title="the first time they are touch"></a>the first time they are touch</h1><p>myisam-recover         = BACKUP</p><p>#max_connections        = 100</p><p>#table_cache            = 64</p><p>#thread_concurrency     = 10<br>#</p><h1 id="Query-Cache-Configuration"><a href="#Query-Cache-Configuration" class="headerlink" title="* Query Cache Configuration"></a>* Query Cache Configuration</h1><p>#允许cache 的单条 Query 结果集的最大容量，默认是1MB，超过此参数设置的 Query 结果集将不会被 Cache<br>query_cache_limit       = 4M</p><p>#设置Query Cache所使用的内存大小，默认值为0，大小必须是1024的整数倍，如果不是整数倍，MySQL 会自动调整降低最小量以达到1024的倍数。</p><p>#当我们打开了 Query Cache功能，MySQL在接受到一条select语句的请求后，如果该语句满足Query Cache的要求</p><p>#(未显式说明不允许使用Query Cache，或者已经显式申明需要使用Query Cache)，</p><p>#MySQL会直接根据预先设定好的HASH算法将接受到的select语句以字符串方式进行hash，然后到Query Cache中直接查找是否已经缓存。</p><p>#也就是说，如果已经在缓存中，该select请求就会直接将数据返回，</p><p>#从而省略了后面所有的步骤(如SQL语句的解析，优化器优化以及向存储引擎请求数据等)，极大的提高性能。</p><p>#当然，Query Cache也有一个致命的缺陷，那就是当某个表的数据有任何任何变化，都会导致所有引用了该表的select语句在Query Cache中的缓存数据失效。</p><p>#所以，当我们的数据变化非常频繁的情况下，使用Query Cache可能会得不偿失。</p><p>#以往的经验来看，如果不是用来缓存基本不变的数据的MySQL数据库，query_cache_size一般256MB是一个比较合适的大小。</p><p>#当然，这可以通过计算Query Cache的命中率(Qcache_hits/(Qcache_hits+Qcache_inserts)*100))来进行调整。</p><p>#这里我设置为512Ｍ需要具体测试结果来查看最后Querycache的命中率</p><p>#<a href="http://www.csdn.net/article/2011-10-28/306555" target="_blank" rel="noopener">http://www.csdn.net/article/2011-10-28/306555</a><br>query_cache_size        = 512M</p><p>#</p><h1 id="Logging-and-Replication"><a href="#Logging-and-Replication" class="headerlink" title="* Logging and Replication"></a>* Logging and Replication</h1><p>#</p><h1 id="Both-location-gets-rotated-by-the-cronjob"><a href="#Both-location-gets-rotated-by-the-cronjob" class="headerlink" title="Both location gets rotated by the cronjob."></a>Both location gets rotated by the cronjob.</h1><h1 id="Be-aware-that-this-log-type-is-a-performance-killer"><a href="#Be-aware-that-this-log-type-is-a-performance-killer" class="headerlink" title="Be aware that this log type is a performance killer."></a>Be aware that this log type is a performance killer.</h1><h1 id="As-of-5-1-you-can-enable-the-log-at-runtime"><a href="#As-of-5-1-you-can-enable-the-log-at-runtime" class="headerlink" title="As of 5.1 you can enable the log at runtime!"></a>As of 5.1 you can enable the log at runtime!</h1><p>#general_log_file        = /var/log/mysql/mysql.log</p><p>#general_log             = 1<br>#</p><h1 id="Error-logging-goes-to-syslog-due-to-etc-mysql-conf-d-mysqld-safe-syslog-cnf"><a href="#Error-logging-goes-to-syslog-due-to-etc-mysql-conf-d-mysqld-safe-syslog-cnf" class="headerlink" title="Error logging goes to syslog due to /etc/mysql/conf.d/mysqld_safe_syslog.cnf."></a>Error logging goes to syslog due to /etc/mysql/conf.d/mysqld_safe_syslog.cnf.</h1><h1 id="Here-you-can-see-queries-with-especially-long-duration"><a href="#Here-you-can-see-queries-with-especially-long-duration" class="headerlink" title="Here you can see queries with especially long duration"></a>Here you can see queries with especially long duration</h1><p>#log_slow_queries        = /usr/local/mysql5/log/mysql-slow.log</p><p>#默认设置为2表示执行时间超过2秒的都算慢查询(itest中是否有过多的慢查询，开启log文件后可看到具体的详细信息<br>long_query_time = 4<br>log_error               = /var/log/mysql/error.log  </p><p>#log-queries-not-using-indexes<br>#</p><h1 id="The-following-can-be-used-as-easy-to-replay-backup-logs-or-for-replication"><a href="#The-following-can-be-used-as-easy-to-replay-backup-logs-or-for-replication" class="headerlink" title="The following can be used as easy to replay backup logs or for replication."></a>The following can be used as easy to replay backup logs or for replication.</h1><h1 id="note-if-you-are-setting-up-a-replication-slave-see-README-Debian-about"><a href="#note-if-you-are-setting-up-a-replication-slave-see-README-Debian-about" class="headerlink" title="note: if you are setting up a replication slave, see README.Debian about"></a>note: if you are setting up a replication slave, see README.Debian about</h1><h1 id="other-settings-you-may-need-to-change"><a href="#other-settings-you-may-need-to-change" class="headerlink" title="other settings you may need to change."></a>other settings you may need to change.</h1><p>#For mysql Master and Slave<br>server-id              = 56</p><p>#binlog的名字最好不要为默认，这样便于数据库的移植</p><p>#log-bin                = /usr/local/mysql5/log/mysql-bin.log</p><p>#relay_log              = /usr/local/mysql5/log/relay-bin</p><p>#skip_slave_start</p><p>#read_only<br>expire_logs_days       = 10<br>max_binlog_size        = 100M</p><p>#############I##nnoDB部分##################</p><p>#完整的InnoDB优化方案:<a href="http://www.mysqlperformanceblog.com/2007/11/01/innodb-performance-optimization-basics/" target="_blank" rel="noopener">http://www.mysqlperformanceblog.com/2007/11/01/innodb-performance-optimization-basics/</a></p><p>#<a href="http://swachian.iteye.com/blog/193788" target="_blank" rel="noopener">http://swachian.iteye.com/blog/193788</a></p><p>#抱怨Innodb比MyISAM慢100倍？那么你大概是忘了调整这个值。</p><p>#默认值1的意思是每一次事务提交或事务外的指令都需要把日志写入（flush）硬盘，这是很费时的。</p><p>#特别是使用电池供电缓存（Battery backed up cache）时。设成2对于很多运用，特别是从MyISAM表转过来的是可以的，</p><p>#它的意思是不写入硬盘而是写入系统缓存。日志仍然会每秒flush到硬 盘，所以你一般不会丢失超过1-2秒的更新。</p><p>#设成0会更快一点，但安全方面比较差，即使MySQL挂了也可能会丢失事务的数据。而值2只会在整个操作系统挂了时才可能丢数据。<br>innodb_flush_log_at_trx_commit=0</p><h1 id="Set-buffer-pool-size-to-50-80-of-your-computer’s-memory"><a href="#Set-buffer-pool-size-to-50-80-of-your-computer’s-memory" class="headerlink" title="Set buffer pool size to 50-80% of your computer’s memory"></a>Set buffer pool size to 50-80% of your computer’s memory</h1><p>#针对服务器学校服务器比较烂的原因，我选择4Ｇ内存作为基准</p><p>#高过1Ｇ启动不了<br>innodb_buffer_pool_size=8G</p><p>#<a href="http://www.cnblogs.com/zuoxingyu/archive/2012/10/25/2738864.html" target="_blank" rel="noopener">http://www.cnblogs.com/zuoxingyu/archive/2012/10/25/2738864.html</a><br>innodb_log_file_size= 64M<br>innodb_log_buffer_size = 16M</p><h1 id="附加的内存池被InnoDB用来保存-metadata-信息"><a href="#附加的内存池被InnoDB用来保存-metadata-信息" class="headerlink" title="附加的内存池被InnoDB用来保存 metadata 信息"></a>附加的内存池被InnoDB用来保存 metadata 信息</h1><h1 id="如果InnoDB为此目的需要更多的内存-它会开始从OS这里申请内存"><a href="#如果InnoDB为此目的需要更多的内存-它会开始从OS这里申请内存" class="headerlink" title="如果InnoDB为此目的需要更多的内存,它会开始从OS这里申请内存."></a>如果InnoDB为此目的需要更多的内存,它会开始从OS这里申请内存.</h1><h1 id="由于这个操作在大多数现代操作系统上已经足够快-你一般不需要修改此值"><a href="#由于这个操作在大多数现代操作系统上已经足够快-你一般不需要修改此值" class="headerlink" title="由于这个操作在大多数现代操作系统上已经足够快, 你一般不需要修改此值."></a>由于这个操作在大多数现代操作系统上已经足够快, 你一般不需要修改此值.</h1><h1 id="SHOW-INNODB-STATUS-命令会显示当先使用的数量"><a href="#SHOW-INNODB-STATUS-命令会显示当先使用的数量" class="headerlink" title="SHOW INNODB STATUS 命令会显示当先使用的数量."></a>SHOW INNODB STATUS 命令会显示当先使用的数量.</h1><h1 id="根据表的多少来确定大小，一般16M己能适用于几百个表"><a href="#根据表的多少来确定大小，一般16M己能适用于几百个表" class="headerlink" title="根据表的多少来确定大小，一般16M己能适用于几百个表"></a>根据表的多少来确定大小，一般16M己能适用于几百个表</h1><p>#innodb_additional_mem_pool_size=16M</p><h1 id="在InnoDb核心内的允许线程数量"><a href="#在InnoDb核心内的允许线程数量" class="headerlink" title="在InnoDb核心内的允许线程数量."></a>在InnoDb核心内的允许线程数量.</h1><h1 id="最优值依赖于应用程序-硬件以及操作系统的调度方式"><a href="#最优值依赖于应用程序-硬件以及操作系统的调度方式" class="headerlink" title="最优值依赖于应用程序,硬件以及操作系统的调度方式."></a>最优值依赖于应用程序,硬件以及操作系统的调度方式.</h1><h1 id="过高的值可能导致线程的互斥颠簸"><a href="#过高的值可能导致线程的互斥颠簸" class="headerlink" title="过高的值可能导致线程的互斥颠簸."></a>过高的值可能导致线程的互斥颠簸.</h1><p>#innodb_thread_concurrency=8</p><p>#Avoid double buffering and reduce swap pressure, in most cases this setting improves performance.</p><p>#Though be careful if you do not have battery backed up RAID cache as when write IO may suffer.</p><p>#在Linux上使用Direct IO。可以显著提高速度，特别是在RAID系统上。避免额外的数据复制和double buffering（mysql buffering 和OS buffering）。<br>innodb_flush_method=O_DIRECT</p><h1 id="Buffer-Pool中Dirty-Page所占的数量，直接影响InnoDB的关闭时间。参数innodb-max-dirty-pages-pct可以直接控制了Dirty-Page在Buffer-Pool中所占的比率，而且幸运的是innodb-max-dirty-pages-pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb-max-dirty-pages-pct调小，强制数据块Flush一段时间，则能够大大缩-gt-短MySQL关闭的时间-gt-。"><a href="#Buffer-Pool中Dirty-Page所占的数量，直接影响InnoDB的关闭时间。参数innodb-max-dirty-pages-pct可以直接控制了Dirty-Page在Buffer-Pool中所占的比率，而且幸运的是innodb-max-dirty-pages-pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb-max-dirty-pages-pct调小，强制数据块Flush一段时间，则能够大大缩-gt-短MySQL关闭的时间-gt-。" class="headerlink" title="Buffer_Pool中Dirty_Page所占的数量，直接影响InnoDB的关闭时间。参数innodb_max_dirty_pages_pct可以直接控制了Dirty_Page在Buffer_Pool中所占的比率，而且幸运的是innodb_max_dirty_pages_pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb_max_dirty_pages_pct调小，强制数据块Flush一段时间，则能够大大缩&gt;短MySQL关闭的时间&gt;。"></a>Buffer_Pool中Dirty_Page所占的数量，直接影响InnoDB的关闭时间。参数innodb_max_dirty_pages_pct可以直接控制了Dirty_Page在Buffer_Pool中所占的比率，而且幸运的是innodb_max_dirty_pages_pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb_max_dirty_pages_pct调小，强制数据块Flush一段时间，则能够大大缩&gt;短MySQL关闭的时间&gt;。</h1><p>innodb_max_dirty_pages_pct = 90</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>back_log = 600   </p><p>#在MYSQL暂时停止响应新请求之前，短时间内的多少个请求可以被存在堆栈中。如果系统在短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的监听队列的大小。默认值50。</p><p>max_connections = 3000   </p><p>#MySQL允许最大的进程连接数，如果经常出现Too Many Connections的错误提示，则需要增大此值。</p><p>max_connect_errors = 6000   </p><p>#设置每个主机的连接请求异常中断的最大次数，当超过该次数，MYSQL服务器将禁止host的连接请求，直到mysql服务器重启或通过flush hosts命令清空此host的相关信息。</p><p>table_cache = 614  </p><p>#指示表调整缓冲区大小。# table_cache 参数设置表高速缓存的数目。每个连接进来，都会至少打开一个表缓存。#因此， table_cache 的大小应与 max_connections 的设置有关。例如，对于 200 个#并行运行的连接，应该让表的缓存至少有 200 × N ，这里 N 是应用可以执行的查询#的一个联接中表的最大数量。此外，还需要为临时表和文件保留一些额外的文件描述符。</p><h1 id="当-Mysql-访问一个表时，如果该表在缓存中已经被打开，则可以直接访问缓存；如果-还没有被缓存，但是在-Mysql-表缓冲区中还有空间，那么这个表就被打开并放入表缓-冲区；如果表缓存满了，则会按照一定的规则将当前未用的表释放，或者临时扩大表缓存来存放，使用表缓存的好处是可以更快速地访问表中的内容。执行-flush-tables-会-清空缓存的内容。一般来说，可以通过查看数据库运行峰值时间的状态值-Open-tables-和-Opened-tables-，判断是否需要增加-table-cache-的值（其中-open-tables-是当-前打开的表的数量，-Opened-tables-则是已经打开的表的数量）。即如果open-tables接近table-cache的时候，并且Opened-tables这个值在逐步增加，那就要考虑增加这个-值的大小了。还有就是Table-locks-waited比较高的时候，也需要增加table-cache。"><a href="#当-Mysql-访问一个表时，如果该表在缓存中已经被打开，则可以直接访问缓存；如果-还没有被缓存，但是在-Mysql-表缓冲区中还有空间，那么这个表就被打开并放入表缓-冲区；如果表缓存满了，则会按照一定的规则将当前未用的表释放，或者临时扩大表缓存来存放，使用表缓存的好处是可以更快速地访问表中的内容。执行-flush-tables-会-清空缓存的内容。一般来说，可以通过查看数据库运行峰值时间的状态值-Open-tables-和-Opened-tables-，判断是否需要增加-table-cache-的值（其中-open-tables-是当-前打开的表的数量，-Opened-tables-则是已经打开的表的数量）。即如果open-tables接近table-cache的时候，并且Opened-tables这个值在逐步增加，那就要考虑增加这个-值的大小了。还有就是Table-locks-waited比较高的时候，也需要增加table-cache。" class="headerlink" title="当 Mysql 访问一个表时，如果该表在缓存中已经被打开，则可以直接访问缓存；如果#还没有被缓存，但是在 Mysql 表缓冲区中还有空间，那么这个表就被打开并放入表缓#冲区；如果表缓存满了，则会按照一定的规则将当前未用的表释放，或者临时扩大表缓存来存放，使用表缓存的好处是可以更快速地访问表中的内容。执行 flush tables 会#清空缓存的内容。一般来说，可以通过查看数据库运行峰值时间的状态值 Open_tables #和 Opened_tables ，判断是否需要增加 table_cache 的值（其中 open_tables 是当#前打开的表的数量， Opened_tables 则是已经打开的表的数量）。即如果open_tables接近table_cache的时候，并且Opened_tables这个值在逐步增加，那就要考虑增加这个#值的大小了。还有就是Table_locks_waited比较高的时候，也需要增加table_cache。"></a>当 Mysql 访问一个表时，如果该表在缓存中已经被打开，则可以直接访问缓存；如果#还没有被缓存，但是在 Mysql 表缓冲区中还有空间，那么这个表就被打开并放入表缓#冲区；如果表缓存满了，则会按照一定的规则将当前未用的表释放，或者临时扩大表缓存来存放，使用表缓存的好处是可以更快速地访问表中的内容。执行 flush tables 会#清空缓存的内容。一般来说，可以通过查看数据库运行峰值时间的状态值 Open_tables #和 Opened_tables ，判断是否需要增加 table_cache 的值（其中 open_tables 是当#前打开的表的数量， Opened_tables 则是已经打开的表的数量）。即如果open_tables接近table_cache的时候，并且Opened_tables这个值在逐步增加，那就要考虑增加这个#值的大小了。还有就是Table_locks_waited比较高的时候，也需要增加table_cache。</h1><p>external-locking = FALSE  </p><p>#使用–skip-external-locking MySQL选项以避免外部锁定。该选项默认开启</p><p>max_allowed_packet = 32M  </p><p>#设置在网络传输中一次消息传输量的最大值。系统默认值 为1MB，最大值是1GB，必须设置1024的倍数。</p><p>sort_buffer_size = 2M  </p><h1 id="Sort-Buffer-Size-是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。-1"><a href="#Sort-Buffer-Size-是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。-1" class="headerlink" title="Sort_Buffer_Size 是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。"></a>Sort_Buffer_Size 是一个connection级参数，在每个connection（session）第一次需要使用这个buffer的时候，一次性分配设置的内存。</h1><p>#Sort_Buffer_Size 并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。例如：500个连接将会消耗 500*sort_buffer_size(8M)=4G内存</p><p>#Sort_Buffer_Size 超过2KB的时候，就会使用mmap() 而不是 malloc() 来进行内存分配，导致效率降低。</p><p>#技术导读 <a href="http://blog.webshuo.com/2011/02/16/mysql-sort_buffer_size/" target="_blank" rel="noopener">http://blog.webshuo.com/2011/02/16/mysql-sort_buffer_size/</a></p><p>#dev-doc: <a href="http://dev.mysql.com/doc/refman/5.5/en/server-parameters.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.5/en/server-parameters.html</a></p><p>#explain select*from table where order limit；出现filesort</p><p>#属重点优化参数</p><p>join_buffer_size = 2M   </p><p>#用于表间关联缓存的大小，和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。</p><p>thread_cache_size = 300   </p><h1 id="服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量-当断开连接时如果缓存中还有空间-那么客户端的线程将被放到缓存中-如果线程重新被请求，那么请求将从缓存中读取-如果缓存中是空的或者是新的请求，那么这个线程将被重新创建-如果有很多新的线程，增加这个值可以改善系统性能-通过比较-Connections-和-Threads-created-状态的变量，可以看到这个变量的作用。设置规则如下：1GB-内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。"><a href="#服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量-当断开连接时如果缓存中还有空间-那么客户端的线程将被放到缓存中-如果线程重新被请求，那么请求将从缓存中读取-如果缓存中是空的或者是新的请求，那么这个线程将被重新创建-如果有很多新的线程，增加这个值可以改善系统性能-通过比较-Connections-和-Threads-created-状态的变量，可以看到这个变量的作用。设置规则如下：1GB-内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。" class="headerlink" title="服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时如果缓存中还有空间,那么客户端的线程将被放到缓存中,如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能.通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。设置规则如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。"></a>服务器线程缓存这个值表示可以重新利用保存在缓存中线程的数量,当断开连接时如果缓存中还有空间,那么客户端的线程将被放到缓存中,如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，增加这个值可以改善系统性能.通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用。设置规则如下：1GB 内存配置为8，2GB配置为16，3GB配置为32，4GB或更高内存，可配置更大。</h1><p>thread_concurrency = 8   </p><h1 id="设置thread-concurrency的值的正确与否-对mysql的性能影响很大-在多个cpu-或多核-的情况下，错误设置了thread-concurrency的值-会导致mysql不能充分利用多cpu-或多核-出现同一时刻只能一个cpu-或核-在工作的情况。thread-concurrency应设为CPU核数的2倍-比如有一个双核的CPU-那么thread-concurrency的应该为4-2个双核的cpu-thread-concurrency的值应为8"><a href="#设置thread-concurrency的值的正确与否-对mysql的性能影响很大-在多个cpu-或多核-的情况下，错误设置了thread-concurrency的值-会导致mysql不能充分利用多cpu-或多核-出现同一时刻只能一个cpu-或核-在工作的情况。thread-concurrency应设为CPU核数的2倍-比如有一个双核的CPU-那么thread-concurrency的应该为4-2个双核的cpu-thread-concurrency的值应为8" class="headerlink" title="设置thread_concurrency的值的正确与否, 对mysql的性能影响很大, 在多个cpu(或多核)的情况下，错误设置了thread_concurrency的值, 会导致mysql不能充分利用多cpu(或多核), 出现同一时刻只能一个cpu(或核)在工作的情况。thread_concurrency应设为CPU核数的2倍. 比如有一个双核的CPU, 那么thread_concurrency的应该为4; 2个双核的cpu, thread_concurrency的值应为8"></a>设置thread_concurrency的值的正确与否, 对mysql的性能影响很大, 在多个cpu(或多核)的情况下，错误设置了thread_concurrency的值, 会导致mysql不能充分利用多cpu(或多核), 出现同一时刻只能一个cpu(或核)在工作的情况。thread_concurrency应设为CPU核数的2倍. 比如有一个双核的CPU, 那么thread_concurrency的应该为4; 2个双核的cpu, thread_concurrency的值应为8</h1><p>#属重点优化参数</p><p>query_cache_size = 64M   </p><h2 id="对于使用MySQL的用户，对于这个变量大家一定不会陌生。前几年的MyISAM引擎优化中，这个参数也是一个重要的优化参数。但随着发展，这个参数也爆露出来一些问题。机器的内存越来越大，人们也都习惯性的把以前有用的参数分配的值越来越大。这个参数加大后也引发了一系列问题。我们首先分析一下-query-cache-size的工作原理：一个SELECT查询在DB中工作后，DB会把该语句缓存下来，当同样的一个SQL再次来到DB里调用时，DB在该表没发生变化的情况下把结果从缓存中返回给Client。这里有一个关建点，就是DB在利用Query-cache工作时，要求该语句涉及的表在这段时间内没有发生变更。那如果该表在发生变更时，Query-cache里的数据又怎么处理呢？首先要把Query-cache和该表相关的语句全部置为失效，然后在写入更新。那么如果Query-cache非常大，该表的查询结构又比较多，查询语句失效也慢，一个更新或是Insert就会很慢，这样看到的就是Update或是Insert怎么这么慢了。所以在数据库写入量或是更新量也比较大的系统，该参数不适合分配过大。而且在高并发，写入量大的系统，建议把该功能禁掉。"><a href="#对于使用MySQL的用户，对于这个变量大家一定不会陌生。前几年的MyISAM引擎优化中，这个参数也是一个重要的优化参数。但随着发展，这个参数也爆露出来一些问题。机器的内存越来越大，人们也都习惯性的把以前有用的参数分配的值越来越大。这个参数加大后也引发了一系列问题。我们首先分析一下-query-cache-size的工作原理：一个SELECT查询在DB中工作后，DB会把该语句缓存下来，当同样的一个SQL再次来到DB里调用时，DB在该表没发生变化的情况下把结果从缓存中返回给Client。这里有一个关建点，就是DB在利用Query-cache工作时，要求该语句涉及的表在这段时间内没有发生变更。那如果该表在发生变更时，Query-cache里的数据又怎么处理呢？首先要把Query-cache和该表相关的语句全部置为失效，然后在写入更新。那么如果Query-cache非常大，该表的查询结构又比较多，查询语句失效也慢，一个更新或是Insert就会很慢，这样看到的就是Update或是Insert怎么这么慢了。所以在数据库写入量或是更新量也比较大的系统，该参数不适合分配过大。而且在高并发，写入量大的系统，建议把该功能禁掉。" class="headerlink" title="对于使用MySQL的用户，对于这个变量大家一定不会陌生。前几年的MyISAM引擎优化中，这个参数也是一个重要的优化参数。但随着发展，这个参数也爆露出来一些问题。机器的内存越来越大，人们也都习惯性的把以前有用的参数分配的值越来越大。这个参数加大后也引发了一系列问题。我们首先分析一下 query_cache_size的工作原理：一个SELECT查询在DB中工作后，DB会把该语句缓存下来，当同样的一个SQL再次来到DB里调用时，DB在该表没发生变化的情况下把结果从缓存中返回给Client。这里有一个关建点，就是DB在利用Query_cache工作时，要求该语句涉及的表在这段时间内没有发生变更。那如果该表在发生变更时，Query_cache里的数据又怎么处理呢？首先要把Query_cache和该表相关的语句全部置为失效，然后在写入更新。那么如果Query_cache非常大，该表的查询结构又比较多，查询语句失效也慢，一个更新或是Insert就会很慢，这样看到的就是Update或是Insert怎么这么慢了。所以在数据库写入量或是更新量也比较大的系统，该参数不适合分配过大。而且在高并发，写入量大的系统，建议把该功能禁掉。"></a>对于使用MySQL的用户，对于这个变量大家一定不会陌生。前几年的MyISAM引擎优化中，这个参数也是一个重要的优化参数。但随着发展，这个参数也爆露出来一些问题。机器的内存越来越大，人们也都习惯性的把以前有用的参数分配的值越来越大。这个参数加大后也引发了一系列问题。我们首先分析一下 query_cache_size的工作原理：一个SELECT查询在DB中工作后，DB会把该语句缓存下来，当同样的一个SQL再次来到DB里调用时，DB在该表没发生变化的情况下把结果从缓存中返回给Client。这里有一个关建点，就是DB在利用Query_cache工作时，要求该语句涉及的表在这段时间内没有发生变更。那如果该表在发生变更时，Query_cache里的数据又怎么处理呢？首先要把Query_cache和该表相关的语句全部置为失效，然后在写入更新。那么如果Query_cache非常大，该表的查询结构又比较多，查询语句失效也慢，一个更新或是Insert就会很慢，这样看到的就是Update或是Insert怎么这么慢了。所以在数据库写入量或是更新量也比较大的系统，该参数不适合分配过大。而且在高并发，写入量大的系统，建议把该功能禁掉。</h2><p>#重点优化参数（主库 增删改-MyISAM）</p><p>query_cache_limit = 4M    </p><p>#指定单个查询能够使用的缓冲区大小，缺省为1M</p><p>query_cache_min_res_unit = 2k    </p><p>#默认是4KB，设置值大对大数据查询有好处，但如果你的查询都是小数据查询，就容易造成内存碎片和浪费</p><p>#查询缓存碎片率 = Qcache_free_blocks / Qcache_total_blocks * 100%</p><p>#如果查询缓存碎片率超过20%，可以用FLUSH QUERY CACHE整理缓存碎片，或者试试减小query_cache_min_res_unit，如果你的查询都是小数据量的话。</p><p>#查询缓存利用率 = (query_cache_size – Qcache_free_memory) / query_cache_size * 100%</p><p>#查询缓存利用率在25%以下的话说明query_cache_size设置的过大，可适当减小;查询缓存利用率在80%以上而且Qcache_lowmem_prunes &gt; 50的话说明query_cache_size可能有点小，要不就是碎片太多。</p><p>#查询缓存命中率 = (Qcache_hits – Qcache_inserts) / Qcache_hits * 100%</p><p>default-storage-engine = MyISAM</p><p>#default_table_type = InnoDB</p><p>thread_stack = 192K  </p><p>#设置MYSQL每个线程的堆栈大小，默认值足够大，可满足普通操作。可设置范围为128K至4GB，默认为192KB。</p><p>transaction_isolation = READ-COMMITTED   </p><h1 id="设定默认的事务隔离级别-可用的级别如下"><a href="#设定默认的事务隔离级别-可用的级别如下" class="headerlink" title="设定默认的事务隔离级别.可用的级别如下:"></a>设定默认的事务隔离级别.可用的级别如下:</h1><h1 id="READ-UNCOMMITTED-READ-COMMITTED-REPEATABLE-READ-SERIALIZABLE"><a href="#READ-UNCOMMITTED-READ-COMMITTED-REPEATABLE-READ-SERIALIZABLE" class="headerlink" title="READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE"></a>READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE</h1><h1 id="1-READ-UNCOMMITTED-读未提交2-READ-COMMITTE-读已提交3-REPEATABLE-READ-可重复读4-SERIALIZABLE-串行"><a href="#1-READ-UNCOMMITTED-读未提交2-READ-COMMITTE-读已提交3-REPEATABLE-READ-可重复读4-SERIALIZABLE-串行" class="headerlink" title="1.READ UNCOMMITTED-读未提交2.READ COMMITTE-读已提交3.REPEATABLE READ -可重复读4.SERIALIZABLE -串行"></a>1.READ UNCOMMITTED-读未提交2.READ COMMITTE-读已提交3.REPEATABLE READ -可重复读4.SERIALIZABLE -串行</h1><p>tmp_table_size = 256M   </p><h1 id="tmp-table-size-的默认大小是-32M。如果一张临时表超出该大小，MySQL产生一个-The-table-tbl-name-is-full-形式的错误，如果你做很多高级-GROUP-BY-查询，增加-tmp-table-size-值。如果超过该值，则会将临时表写入磁盘。"><a href="#tmp-table-size-的默认大小是-32M。如果一张临时表超出该大小，MySQL产生一个-The-table-tbl-name-is-full-形式的错误，如果你做很多高级-GROUP-BY-查询，增加-tmp-table-size-值。如果超过该值，则会将临时表写入磁盘。" class="headerlink" title="tmp_table_size 的默认大小是 32M。如果一张临时表超出该大小，MySQL产生一个 The table tbl_name is full 形式的错误，如果你做很多高级 GROUP BY 查询，增加 tmp_table_size 值。如果超过该值，则会将临时表写入磁盘。"></a>tmp_table_size 的默认大小是 32M。如果一张临时表超出该大小，MySQL产生一个 The table tbl_name is full 形式的错误，如果你做很多高级 GROUP BY 查询，增加 tmp_table_size 值。如果超过该值，则会将临时表写入磁盘。</h1><p>max_heap_table_size = 256M<br>long_query_time = 2<br>log_long_format<br>log-slow-queries=/data/3306/slow-log.log</p><p>#log-bin = /data/3306/mysql-bin<br>log-bin<br>binlog_cache_size = 4M<br>max_binlog_cache_size = 8M<br>max_binlog_size = 512M</p><p>expire_logs_days = 7<br>key_buffer_size = 2048M</p><p>#批定用于索引的缓冲区大小，增加它可以得到更好的索引处理性能，对于内存在4GB左右的服务器来说，该参数可设置为256MB或384MB。</p><p>read_buffer_size = 1M  </p><h1 id="MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read-buffer-size变量控制这一缓冲区的大小。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和sort-buffer-size一样，该参数对应的分配内存也是每个连接独享。"><a href="#MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read-buffer-size变量控制这一缓冲区的大小。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和sort-buffer-size一样，该参数对应的分配内存也是每个连接独享。" class="headerlink" title="MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。"></a>MySql读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。和sort_buffer_size一样，该参数对应的分配内存也是每个连接独享。</h1><p>read_rnd_buffer_size = 16M   </p><h1 id="MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时-例如，按照排序顺序-，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。"><a href="#MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时-例如，按照排序顺序-，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。" class="headerlink" title="MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。"></a>MySql的随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。</h1><p>bulk_insert_buffer_size = 64M   </p><p>#批量插入数据缓存大小，可以有效提高插入效率，默认为8M</p><p>myisam_sort_buffer_size = 128M   </p><h1 id="MyISAM表发生变化时重新排序所需的缓冲-1"><a href="#MyISAM表发生变化时重新排序所需的缓冲-1" class="headerlink" title="MyISAM表发生变化时重新排序所需的缓冲"></a>MyISAM表发生变化时重新排序所需的缓冲</h1><p>myisam_max_sort_file_size = 10G   </p><h1 id="MySQL重建索引时所允许的最大临时文件的大小-当-REPAIR-ALTER-TABLE-或者-LOAD-DATA-INFILE"><a href="#MySQL重建索引时所允许的最大临时文件的大小-当-REPAIR-ALTER-TABLE-或者-LOAD-DATA-INFILE" class="headerlink" title="MySQL重建索引时所允许的最大临时文件的大小 (当 REPAIR, ALTER TABLE 或者 LOAD DATA INFILE)."></a>MySQL重建索引时所允许的最大临时文件的大小 (当 REPAIR, ALTER TABLE 或者 LOAD DATA INFILE).</h1><h1 id="如果文件大小比此值更大-索引会通过键值缓冲创建-更慢"><a href="#如果文件大小比此值更大-索引会通过键值缓冲创建-更慢" class="headerlink" title="如果文件大小比此值更大,索引会通过键值缓冲创建(更慢)"></a>如果文件大小比此值更大,索引会通过键值缓冲创建(更慢)</h1><p>myisam_max_extra_sort_file_size = 10G<br>myisam_repair_threads = 1   </p><h1 id="如果一个表拥有超过一个索引-MyISAM-可以通过并行排序使用超过一个线程去修复他们"><a href="#如果一个表拥有超过一个索引-MyISAM-可以通过并行排序使用超过一个线程去修复他们" class="headerlink" title="如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们."></a>如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.</h1><h1 id="这对于拥有多个CPU以及大量内存情况的用户-是一个很好的选择"><a href="#这对于拥有多个CPU以及大量内存情况的用户-是一个很好的选择" class="headerlink" title="这对于拥有多个CPU以及大量内存情况的用户,是一个很好的选择."></a>这对于拥有多个CPU以及大量内存情况的用户,是一个很好的选择.</h1><p>myisam_recover   </p><p>#自动检查和修复没有适当关闭的 MyISAM 表<br>skip-name-resolve<br>lower_case_table_names = 1</p><p>server-id = 1</p><p>innodb_additional_mem_pool_size = 16M   </p><p>#这个参数用来设置 InnoDB 存储的数据目录信息和其它内部数据结构的内存池大小，类似于Oracle的library cache。这不是一个强制参数，可以被突破。</p><p>innodb_buffer_pool_size = 2048M   </p><h1 id="这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。MyISAM可以在默认的-key-buffer-size-设置下运行的可以，然而Innodb在默认的-innodb-buffer-pool-size-设置下却跟蜗牛似的。由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达-70-80-的可用内存。一些应用于-key-buffer-的规则有-—-如果你的数据量不大，并且不会暴增，那么无需把-innodb-buffer-pool-size-设置的太大了"><a href="#这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。MyISAM可以在默认的-key-buffer-size-设置下运行的可以，然而Innodb在默认的-innodb-buffer-pool-size-设置下却跟蜗牛似的。由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达-70-80-的可用内存。一些应用于-key-buffer-的规则有-—-如果你的数据量不大，并且不会暴增，那么无需把-innodb-buffer-pool-size-设置的太大了" class="headerlink" title="这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。MyISAM可以在默认的 key_buffer_size 设置下运行的可以，然而Innodb在默认的 innodb_buffer_pool_size 设置下却跟蜗牛似的。由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达 70-80% 的可用内存。一些应用于 key_buffer 的规则有 — 如果你的数据量不大，并且不会暴增，那么无需把 innodb_buffer_pool_size 设置的太大了"></a>这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。MyISAM可以在默认的 key_buffer_size 设置下运行的可以，然而Innodb在默认的 innodb_buffer_pool_size 设置下却跟蜗牛似的。由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达 70-80% 的可用内存。一些应用于 key_buffer 的规则有 — 如果你的数据量不大，并且不会暴增，那么无需把 innodb_buffer_pool_size 设置的太大了</h1><p>innodb_data_file_path = ibdata1:1024M:autoextend   </p><p>#表空间文件 重要数据</p><p>innodb_file_io_threads = 4   </p><p>#文件IO的线程数，一般为 4，但是在 Windows 下，可以设置得较大。</p><p>innodb_thread_concurrency = 8   </p><p>#服务器有几个CPU就设置为几，建议用默认设置，一般为8.</p><p>innodb_flush_log_at_trx_commit = 2   </p><h1 id="如果将此参数设置为1，将在每次提交事务后将日志写入磁盘。为提供性能，可以设置为0或2，但要承担在发生故障时丢失数据的风险。设置为0表示事务日志写入日志文件，而日志文件每秒刷新到磁盘一次。设置为2表示事务日志将在提交时写入日志，但日志文件每次刷新到磁盘一次。"><a href="#如果将此参数设置为1，将在每次提交事务后将日志写入磁盘。为提供性能，可以设置为0或2，但要承担在发生故障时丢失数据的风险。设置为0表示事务日志写入日志文件，而日志文件每秒刷新到磁盘一次。设置为2表示事务日志将在提交时写入日志，但日志文件每次刷新到磁盘一次。" class="headerlink" title="如果将此参数设置为1，将在每次提交事务后将日志写入磁盘。为提供性能，可以设置为0或2，但要承担在发生故障时丢失数据的风险。设置为0表示事务日志写入日志文件，而日志文件每秒刷新到磁盘一次。设置为2表示事务日志将在提交时写入日志，但日志文件每次刷新到磁盘一次。"></a>如果将此参数设置为1，将在每次提交事务后将日志写入磁盘。为提供性能，可以设置为0或2，但要承担在发生故障时丢失数据的风险。设置为0表示事务日志写入日志文件，而日志文件每秒刷新到磁盘一次。设置为2表示事务日志将在提交时写入日志，但日志文件每次刷新到磁盘一次。</h1><p>innodb_log_buffer_size = 16M  </p><p>#此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据.MySQL开发人员建议设置为1－8M之间</p><p>innodb_log_file_size = 128M   </p><p>#此参数确定数据日志文件的大小，以M为单位，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</p><p>innodb_log_files_in_group = 3   </p><p>#为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3M</p><p>innodb_max_dirty_pages_pct = 90   </p><p>#推荐阅读 <a href="http://www.taobaodba.com/html/221_innodb_max_dirty_pages_pct_checkpoint.html" target="_blank" rel="noopener">http://www.taobaodba.com/html/221_innodb_max_dirty_pages_pct_checkpoint.html</a></p><h1 id="Buffer-Pool中Dirty-Page所占的数量，直接影响InnoDB的关闭时间。参数innodb-max-dirty-pages-pct-可以直接控制了Dirty-Page在Buffer-Pool中所占的比率，而且幸运的是innodb-max-dirty-pages-pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb-max-dirty-pages-pct调小，强制数据块Flush一段时间，则能够大大缩短-MySQL关闭的时间。"><a href="#Buffer-Pool中Dirty-Page所占的数量，直接影响InnoDB的关闭时间。参数innodb-max-dirty-pages-pct-可以直接控制了Dirty-Page在Buffer-Pool中所占的比率，而且幸运的是innodb-max-dirty-pages-pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb-max-dirty-pages-pct调小，强制数据块Flush一段时间，则能够大大缩短-MySQL关闭的时间。" class="headerlink" title="Buffer_Pool中Dirty_Page所占的数量，直接影响InnoDB的关闭时间。参数innodb_max_dirty_pages_pct 可以直接控制了Dirty_Page在Buffer_Pool中所占的比率，而且幸运的是innodb_max_dirty_pages_pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb_max_dirty_pages_pct调小，强制数据块Flush一段时间，则能够大大缩短 MySQL关闭的时间。"></a>Buffer_Pool中Dirty_Page所占的数量，直接影响InnoDB的关闭时间。参数innodb_max_dirty_pages_pct 可以直接控制了Dirty_Page在Buffer_Pool中所占的比率，而且幸运的是innodb_max_dirty_pages_pct是可以动态改变的。所以，在关闭InnoDB之前先将innodb_max_dirty_pages_pct调小，强制数据块Flush一段时间，则能够大大缩短 MySQL关闭的时间。</h1><p>innodb_lock_wait_timeout = 120   </p><h1 id="InnoDB-有其内置的死锁检测机制，能导致未完成的事务回滚。但是，如果结合InnoDB使用MyISAM的lock-tables-语句或第三方事务引擎-则InnoDB无法识别死锁。为消除这种可能性，可以将innodb-lock-wait-timeout设置为一个整数值，指示-MySQL在允许其他事务修改那些最终受事务回滚的数据之前要等待多长时间-秒数"><a href="#InnoDB-有其内置的死锁检测机制，能导致未完成的事务回滚。但是，如果结合InnoDB使用MyISAM的lock-tables-语句或第三方事务引擎-则InnoDB无法识别死锁。为消除这种可能性，可以将innodb-lock-wait-timeout设置为一个整数值，指示-MySQL在允许其他事务修改那些最终受事务回滚的数据之前要等待多长时间-秒数" class="headerlink" title="InnoDB 有其内置的死锁检测机制，能导致未完成的事务回滚。但是，如果结合InnoDB使用MyISAM的lock tables 语句或第三方事务引擎,则InnoDB无法识别死锁。为消除这种可能性，可以将innodb_lock_wait_timeout设置为一个整数值，指示 MySQL在允许其他事务修改那些最终受事务回滚的数据之前要等待多长时间(秒数)"></a>InnoDB 有其内置的死锁检测机制，能导致未完成的事务回滚。但是，如果结合InnoDB使用MyISAM的lock tables 语句或第三方事务引擎,则InnoDB无法识别死锁。为消除这种可能性，可以将innodb_lock_wait_timeout设置为一个整数值，指示 MySQL在允许其他事务修改那些最终受事务回滚的数据之前要等待多长时间(秒数)</h1><p>innodb_file_per_table = 0   </p><p>#独享表空间（关闭）</p><p>[mysqldump]<br>quick<br>max_allowed_packet = 32M</p><p>[mysqld_safe]<br>log-error=/data/3306/mysql_oldboy.err<br>pid-file=/data/3306/mysqld.pid</p><p>#补充</p><p>#wait_timeout = 10   </p><p>#指定一个请求的最大连接时间，对于4GB左右的内存服务器来说，可以将其设置为5-10。</p><p>#skip_networking   </p><p>#开启该选可以彻底关闭MYSQL的TCP/IP连接方式，如果WEB服务器是以远程连接的方式访问MYSQL数据库服务器的，则不要开启该选项，否则将无法正常连接。</p><p>#log-queries-not-using-indexes<br>将没有使用索引的查询也记录下来</p><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL-调优&quot;&gt;&lt;a href=&quot;#MySQL-调优&quot; class=&quot;headerlink&quot; title=&quot;MySQL 调优&quot;&gt;&lt;/a&gt;MySQL 调优&lt;/h1&gt;&lt;h2 id=&quot;mysql中的两个关键参数&quot;&gt;&lt;a href=&quot;#mysql中的两个关键参数&quot; class=&quot;headerlink&quot; title=&quot;mysql中的两个关键参数&quot;&gt;&lt;/a&gt;mysql中的两个关键参数&lt;/h2&gt;&lt;p&gt;(1)interactive_timeout:&lt;/p&gt;
&lt;p&gt;参数含义：服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。&lt;br&gt;参数默认值：28800秒（8小时）&lt;/p&gt;
&lt;p&gt;(2)wait_timeout:&lt;/p&gt;
&lt;p&gt;参数含义：服务器关闭非交互连接之前等待活动的秒数。&lt;br&gt;在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。&lt;br&gt;参数默认值：28800秒（8小时）&lt;/p&gt;
&lt;p&gt;wait_timeout过大有弊端，其体现就是MySQL里大量的SLEEP进程无法及时释放，拖累系统性能，不过也不能把这个指设置的过小，否则你可 能会遭遇到“MySQL has gone away”之类的问题，通常来说，我觉得把wait_timeout设置为10是个不错的选择，但某些情况下可能也会出问题，比如说有一个CRON脚本， 其中两次SQL查询的间隔时间大于10秒的话，那么这个设置就有问题了（当然，这也不是不能解决的问题，你可以在程序里时不时mysql_ping一下， 以便服务器知道你还活着，重新计算wait_timeout时间）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mysql" scheme="http://jiaxf.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>前端自适应css3相对单位rem</title>
    <link href="http://jiaxf.github.io/2017/01/12/%E5%89%8D%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94CSS3%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8Drem/"/>
    <id>http://jiaxf.github.io/2017/01/12/前端自适应CSS3相对单位rem/</id>
    <published>2017-01-12T02:14:40.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相对单位rem"><a href="#相对单位rem" class="headerlink" title="相对单位rem"></a>相对单位rem</h1><p>rem(font size of the root element)是指相对于根元素的字体大小的单位。</p><blockquote><p>rem是相对长度单位，相对于根元素（即html元素） font-size计算值的倍数。<br>使用： 根据根标签html设置文字大小后（大部分浏览器默认为16px），其他标签设置rem都是html大小的倍数。</p></blockquote><p><strong>移动端开发使用em作为单位</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;  <span class="comment">// 16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.625rem</span> // <span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web-app的几种屏幕适配："><a href="#web-app的几种屏幕适配：" class="headerlink" title="web app的几种屏幕适配："></a>web app的几种屏幕适配：</h1><h2 id="1-固定高度（流式布局）"><a href="#1-固定高度（流式布局）" class="headerlink" title="1. 固定高度（流式布局）"></a>1. 固定高度（流式布局）</h2><p>流式布局通过百分比来定义宽度，但是高度大都是用px固定住。 高度不变，宽度拉伸。</p><h2 id="2-固定宽度"><a href="#2-固定宽度" class="headerlink" title="2. 固定宽度"></a>2. 固定宽度</h2><p>固定宽度，超出部分留白。</p><a id="more"></a><h2 id="3-响应式"><a href="#3-响应式" class="headerlink" title="3. 响应式"></a>3. 响应式</h2><h2 id="4-设置viewport进行缩放"><a href="#4-设置viewport进行缩放" class="headerlink" title="4. 设置viewport进行缩放"></a>4. 设置viewport进行缩放</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">"viewprt"</span> <span class="attribute">content</span>=<span class="string">"width=320,maximun-scale=1.3,user-scalable=no"</span>&gt;</span><br></pre></td></tr></table></figure><p>例如：可以以320宽度为基准，进行缩放</p><h2 id="5-rem能等比例适配所有屏幕"><a href="#5-rem能等比例适配所有屏幕" class="headerlink" title="5. rem能等比例适配所有屏幕"></a>5. rem能等比例适配所有屏幕</h2><p>通过设置html的字体大小可以控制rem的大小，改变html的font-size可以等比改变所有用了rem单位的元素，任何分辨率下，页面的排版都是按照等比例进行切换。可以通过js根据浏览器当前的分辨率改变font-size的值来实现缩放。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span>(<span class="name">doc</span>, win)&#123;</span><br><span class="line">  var docEle = doc.documentElement,</span><br><span class="line">      resizeEvt = <span class="symbol">'orientationchange</span>' in window ? <span class="symbol">'orientationchange</span><span class="symbol">':</span> <span class="symbol">'resize</span>',</span><br><span class="line">      recalc = function() &#123;</span><br><span class="line">        var clientWidth = docEl.clientWidth<span class="comment">;</span></span><br><span class="line">        if(<span class="name">!clientWidth</span>) return<span class="comment">;;</span></span><br><span class="line">        docEl.style.fontSize = <span class="number">20</span> * (<span class="name">clientWidth</span> / <span class="number">320</span>) + <span class="symbol">'px</span>'<span class="comment">;</span></span><br><span class="line">      &#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      if(<span class="name">!doc.addEventListener</span>) return<span class="comment">;</span></span><br><span class="line">      win.addEventListener(<span class="name">resizeEvt</span>, recalc, false)<span class="comment">;</span></span><br><span class="line">      doc.addEventListener(<span class="symbol">'DOMContentLoaded</span>', recalc, false)<span class="comment">;</span></span><br><span class="line">&#125;)(<span class="name">doucment</span>, window)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>rem使用的浏览器兼容性</p><p><img src="/images/1418894538.png" alt=""></p><p>常用的rem 单位换算</p><p><img src="/images/2013628105651693.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;相对单位rem&quot;&gt;&lt;a href=&quot;#相对单位rem&quot; class=&quot;headerlink&quot; title=&quot;相对单位rem&quot;&gt;&lt;/a&gt;相对单位rem&lt;/h1&gt;&lt;p&gt;rem(font size of the root element)是指相对于根元素的字体大小的单位。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rem是相对长度单位，相对于根元素（即html元素） font-size计算值的倍数。&lt;br&gt;使用： 根据根标签html设置文字大小后（大部分浏览器默认为16px），其他标签设置rem都是html大小的倍数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;移动端开发使用em作为单位&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1rem&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 16px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.625rem&lt;/span&gt; // &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;web-app的几种屏幕适配：&quot;&gt;&lt;a href=&quot;#web-app的几种屏幕适配：&quot; class=&quot;headerlink&quot; title=&quot;web app的几种屏幕适配：&quot;&gt;&lt;/a&gt;web app的几种屏幕适配：&lt;/h1&gt;&lt;h2 id=&quot;1-固定高度（流式布局）&quot;&gt;&lt;a href=&quot;#1-固定高度（流式布局）&quot; class=&quot;headerlink&quot; title=&quot;1. 固定高度（流式布局）&quot;&gt;&lt;/a&gt;1. 固定高度（流式布局）&lt;/h2&gt;&lt;p&gt;流式布局通过百分比来定义宽度，但是高度大都是用px固定住。 高度不变，宽度拉伸。&lt;/p&gt;
&lt;h2 id=&quot;2-固定宽度&quot;&gt;&lt;a href=&quot;#2-固定宽度&quot; class=&quot;headerlink&quot; title=&quot;2. 固定宽度&quot;&gt;&lt;/a&gt;2. 固定宽度&lt;/h2&gt;&lt;p&gt;固定宽度，超出部分留白。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="http://jiaxf.github.io/tags/web/"/>
    
      <category term="前端" scheme="http://jiaxf.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css3" scheme="http://jiaxf.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>Web Worker study</title>
    <link href="http://jiaxf.github.io/2017/01/03/webWorkers/"/>
    <id>http://jiaxf.github.io/2017/01/03/webWorkers/</id>
    <published>2017-01-03T01:27:47.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h1><p>javaScript属于单线程环境，无法同时运行多个脚本。HTML5提供了WebWorker，为JavaScript引入线程技术。</p><h2 id="Web-Worker简介"><a href="#Web-Worker简介" class="headerlink" title="Web Worker简介"></a>Web Worker简介</h2><p>WebWorker规范定义了在网络应用中生成背景脚本的API。可以通过Web Worker执行线程。例如触发长时间运行的脚本<br>以处理计算密集型任务，同时却不会阻碍UI或其他脚本处理用户互动。</p><p>Woker利用类似线程的消息传递实现并行。</p><h2 id="Web-Worker的类型"><a href="#Web-Worker的类型" class="headerlink" title="Web Worker的类型"></a>Web Worker的类型</h2><ul><li>专用Woker</li><li>共有Woker</li></ul><h3 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h3><p>Web Worker在独立线程中运行，因此，它们执行的代码需要保存在一个单独的文件中。</p><ol><li>创建新的Worker对象</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="type">Woker</span>(<span class="string">'task.js'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Worker后通过调用postMessage() 方法启动</li></ol><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker.postMessage<span class="comment">()</span>; <span class="comment">// start the worker</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="通过消息传递与Worker通信"><a href="#通过消息传递与Worker通信" class="headerlink" title="通过消息传递与Worker通信"></a>通过消息传递与Worker通信</h3><p>Worker与其父网页之间的通信是通过事件模型和postMessage()方法实现。</p><p>postMessage()可以接受字符串或JSON对象作为单个参数，新式浏览器的最新版支持传递JSON对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'doWork.js'</span>);</span><br><span class="line">worker.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Worker said: '</span>, e.data);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">worker.postMessage(<span class="string">'Hello World'</span>); <span class="comment">// send data to our worker</span></span><br></pre></td></tr></table></figure><p>doWork.js(Worker):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">self</span>.postMessage(e.data);</span><br><span class="line">&#125;, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>在主网页中调用postMessage()时，Worker通过定义message事件的onmessage处理程序来实现处理消息。可以在<br>Event.data中访问消息（“Hello World”），postMessage()也是将数据传回主线程的一种方法。</p><p>在主网页和Worker之间传递的消息是复制而不是共享的。系统将对象传递给worker后，会将其序列化，随后在另一端取消<br>序列化。由于网页和Worker并不共享同一实例，因此每次传递时都要进行复制。大部分浏览器通过在任一端上对值进行自动JSON<br>编码/解码来实施此功能。</p><p>一个使用JSON对象传递消息的更复杂的示例。</p><p>主脚本：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"sayHI()"</span>&gt;</span>Say HI<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"unknownCmd()"</span>&gt;</span>Send unknown command<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"stop()"</span>&gt;</span>Stop worker<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">sayHI</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    worker.postMessage(&#123;<span class="string">'cmd'</span>: <span class="string">'start'</span>, <span class="string">'msg'</span>: <span class="string">'Hi'</span>&#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Calling worker.terminate() from this script would also stop the worker.</span></span></span><br><span class="line"><span class="actionscript">    worker.postMessage(&#123;<span class="string">'cmd'</span>: <span class="string">'stop'</span>, <span class="string">'msg'</span>: <span class="string">'Bye'</span>&#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">unknownCmd</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    worker.postMessage(&#123;<span class="string">'cmd'</span>: <span class="string">'foobard'</span>, <span class="string">'msg'</span>: <span class="string">'???'</span>&#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'doWork2.js'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  worker.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).textContent = e.data;</span></span><br><span class="line"><span class="actionscript">  &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>doWork2.js：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = e.data;</span><br><span class="line">  <span class="keyword">switch</span>(data.cmd)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'start'</span>:</span><br><span class="line">      <span class="keyword">self</span>.postMessage(<span class="string">'Worker started: '</span> + data.msg);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'stop'</span>:</span><br><span class="line">      <span class="keyword">self</span>.postMessage(<span class="string">'Worker stopped: '</span> + data.msg + <span class="string">' .(buttons will no longer work)'</span>);</span><br><span class="line">      <span class="keyword">self</span>.close(); <span class="comment">// Terminates the worker.</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">self</span>.postMessage(<span class="string">'Unknown command: '</span> + data.msg);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p><em>停止Worker的方法有两种：在主网页中调用worker terminate()或在Worker本身内部调用self.close().</em></p><h2 id="Worker环境"><a href="#Worker环境" class="headerlink" title="Worker环境"></a>Worker环境</h2><h3 id="Worker作用域"><a href="#Worker作用域" class="headerlink" title="Worker作用域"></a>Worker作用域</h3><p>就Worker来说，self和this指的都是Worker的全局作用域。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = e.data;</span><br><span class="line">  <span class="keyword">switch</span>(data.cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'start'</span>:</span><br><span class="line">      postMessage(<span class="string">'Worker started:'</span> + data.msg);  <span class="comment">// 直接方法</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="适用于Worker的功能"><a href="#适用于Worker的功能" class="headerlink" title="适用于Worker的功能"></a>适用于Worker的功能</h3><p>由于Web Worker的多线程行为，所以它们只能使用JavaScript功能的子集：</p><ul><li>navigator对象</li><li>location对象（只读）</li><li>XMLHttpRequest</li><li>setTimeout()/clearTimeout()和setInterval()/clearInterval()</li><li>应用缓存</li><li>使用importScript()方法导入外部脚本</li><li>生成其他Web Worker</li></ul><p>Worker无法使用：</p><ul><li>DOM(非线程安全)</li><li>window对象</li><li>document对象</li><li>parent对象</li></ul><h3 id="加载外部脚本"><a href="#加载外部脚本" class="headerlink" title="加载外部脚本"></a>加载外部脚本</h3><p>可以通过importScripts()函数将外部脚本文件或库加载到worker中。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">importScripts</span>(<span class="string">'script1.js'</span>);</span><br><span class="line"><span class="selector-tag">importScripts</span>(<span class="string">'script2.js'</span>);</span><br></pre></td></tr></table></figure><p>也可以写成单个导入语句：<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="symbol">'script1</span>.js', <span class="symbol">'script2</span>.js');</span><br></pre></td></tr></table></figure></p><h2 id="子Worker"><a href="#子Worker" class="headerlink" title="子Worker"></a>子Worker</h2><p>Worker可以生成子Worker。子Worker注意事项：</p><ul><li>子Worker必须托管在与父网页相同的来源中</li><li>子Woker中的URI应相对于父Worker的位置进行解析。</li></ul><p>主网页和Worker之间传递的消息是复制而不是共享。</p><h2 id="内嵌Worker"><a href="#内嵌Worker" class="headerlink" title="内嵌Worker"></a>内嵌Worker</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prefixed in Webkit， chrome12，and FF6： window.WebKitBlobBuilder, window.MozBlobBuilder</span></span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> <span class="type">BlobBuilder</span>();</span><br><span class="line">bb.append(<span class="string">"onmessage = function(e) &#123; postMessage('msg from worker')&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain a blob URL reference to our worker 'file'.</span></span><br><span class="line"><span class="comment">// Note: window.webkitURL.createObjectURL() in Chrome 10 +.</span></span><br><span class="line"><span class="keyword">var</span> blobURL = window.URL.createObjectURL(bb.getBlob());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="type">Worker</span>(blobURL);</span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span></span>(e) &#123;</span><br><span class="line">  <span class="comment">// e.data == 'msg from worker'</span></span><br><span class="line">&#125;;</span><br><span class="line">worker.postMessage(); <span class="comment">// start the worker.</span></span><br></pre></td></tr></table></figure><h2 id="Blob网址"><a href="#Blob网址" class="headerlink" title="Blob网址"></a>Blob网址</h2><p>对window.URL.createObjectURL()的调用十分奇妙，此方法创建一个简单的网址字符串，该字符串可用于DOM File 或 Blob对象中存储的参考数据。例如：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">blob:</span><span class="string">http:</span><span class="comment">//localhost/c745ef73-ece9-46da-8f66-ebes574789b1</span></span><br></pre></td></tr></table></figure></p><p>Blob网址是唯一的，且只要应用存在，该网址就会一直有效。可以通过将Blob网址传递给window.URL.revokeObjectURL()来明确发布该网址：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.URL.revokeObjectURL(blobURL); <span class="regexp">//</span> <span class="built_in">window</span>.webkitURL.createObjectURL() <span class="keyword">in</span> Chrome <span class="number">10</span>+.</span><br></pre></td></tr></table></figure><p>在Chrome浏览器中，用<code>chrome://blob-internals/</code>可以查看创建的所有Blob网址。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!DOCTYEP</span> <span class="attr">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"log"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"worker1"</span> <span class="attr">type</span>=<span class="string">"javascript/worker"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// This script won't be parsed by JS engines because its type is javascript/worker.</span></span></span><br><span class="line"><span class="actionscript">    self.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      self.postMessage(<span class="string">'msg from worker'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Rest of your worker code goes here.</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(msg)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">      fragment.appendChild(<span class="built_in">document</span>.createTextNode(msg));</span></span><br><span class="line"><span class="javascript">      fragment.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'br'</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(<span class="string">'#log'</span>).appendChild(fragment);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> bb = <span class="keyword">new</span> BlobBuilder();</span></span><br><span class="line"><span class="javascript">    bb.append(<span class="built_in">document</span>.querySelector(<span class="string">'#worker1'</span>).textContent);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="built_in">window</span>.URL.createObjectURL(bb.getBlob()));</span></span><br><span class="line"><span class="actionscript">    worker.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      log(<span class="string">"Received:"</span> + e.data);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    worker.postMessage(); <span class="comment">// Start the worker</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加载外部脚本-1"><a href="#加载外部脚本-1" class="headerlink" title="加载外部脚本"></a>加载外部脚本</h2><p>在内嵌Worker中利用importScripts()的一种方法是通过将相关网址传递给内嵌Worker并手动构建绝对网址来”导入”运行您主脚本的当前网址。这可以确保外部脚本是从同一来源导入的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"worker2"</span> <span class="attr">type</span>=<span class="string">"javascript/worker"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">self.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> data = e.data;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span>(data.url)&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> url = data.url.href;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> index = url.indexOf(<span class="string">'index.html'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(index != <span class="number">-1</span>)&#123;</span></span><br><span class="line"><span class="undefined">      url = url.substring(0, index);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    importScipts(url + <span class="string">'engine.js'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="built_in">window</span>.URL.createObjectURL(bb.getBlob()));</span></span><br><span class="line"><span class="javascript">  worker.postMessage(&#123;<span class="attr">url</span>: <span class="built_in">document</span>.loacation&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><p>处理Web Worker中出现的错误，如果在执行Worker时出现错误，就会触发ErrorEvent.</p><ul><li>filename 导致错误的Worker脚本的名称</li><li>lineno 出现错误的行号</li><li>message 有关错误的实用说明</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"error"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">onError</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'error'</span>).textContent = [</span></span><br><span class="line"><span class="actionscript">      <span class="string">'ERROR: Line '</span>, e.lineno, <span class="string">' in '</span>, e.filename, <span class="string">': '</span>, e.message].join(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">onMsg</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).textContent = e.data;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'workerWithError.js'</span>);</span></span><br><span class="line"><span class="actionscript">  worker.addEventListener(<span class="string">'message'</span>, onMsg, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">  worker.addEventListener(<span class="string">'error'</span>, onError, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">  worker.postMessage(); <span class="comment">// Start worker without a message.</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="安全说明"><a href="#安全说明" class="headerlink" title="安全说明"></a>安全说明</h2><h3 id="本地访问限制"><a href="#本地访问限制" class="headerlink" title="本地访问限制"></a>本地访问限制</h3><p>由于google Chrome浏览器的安全限制，Worker无法在本地运行（如通过file://),且会在不显示任何提示的情况下失败。<br>要通过file:// 方案运行，需使用–allow-file-access-files标记设置来运行Chrome浏览器。</p><h3 id="同源注意事项"><a href="#同源注意事项" class="headerlink" title="同源注意事项"></a>同源注意事项</h3><p>Worker 脚本必须是将相同方案作为调用网页的外部文件。因此，您无法通过 data: 网址或 javascript: 网址加载脚本，且 https: 网页无法启动以 http: 网址开头的 Worker 脚本。</p><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><ul><li>预先抓取和/或缓存数据以便稍后使用</li><li>突出显示代码语法或其他实时文本格式</li><li>拼写检查程序</li><li>分析视频或音频数据</li><li>背景 I/O 或网络服务轮询</li><li>处理较大数组或超大 JSON 响应</li><li>&lt;canvas &gt;中的图片过滤</li><li>更新本地网络数据库中的多行内容</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web-Workers&quot;&gt;&lt;a href=&quot;#Web-Workers&quot; class=&quot;headerlink&quot; title=&quot;Web Workers&quot;&gt;&lt;/a&gt;Web Workers&lt;/h1&gt;&lt;p&gt;javaScript属于单线程环境，无法同时运行多个脚本。HTML5提供了WebWorker，为JavaScript引入线程技术。&lt;/p&gt;
&lt;h2 id=&quot;Web-Worker简介&quot;&gt;&lt;a href=&quot;#Web-Worker简介&quot; class=&quot;headerlink&quot; title=&quot;Web Worker简介&quot;&gt;&lt;/a&gt;Web Worker简介&lt;/h2&gt;&lt;p&gt;WebWorker规范定义了在网络应用中生成背景脚本的API。可以通过Web Worker执行线程。例如触发长时间运行的脚本&lt;br&gt;以处理计算密集型任务，同时却不会阻碍UI或其他脚本处理用户互动。&lt;/p&gt;
&lt;p&gt;Woker利用类似线程的消息传递实现并行。&lt;/p&gt;
&lt;h2 id=&quot;Web-Worker的类型&quot;&gt;&lt;a href=&quot;#Web-Worker的类型&quot; class=&quot;headerlink&quot; title=&quot;Web Worker的类型&quot;&gt;&lt;/a&gt;Web Worker的类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;专用Woker&lt;/li&gt;
&lt;li&gt;共有Woker&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用入门&quot;&gt;&lt;a href=&quot;#使用入门&quot; class=&quot;headerlink&quot; title=&quot;使用入门&quot;&gt;&lt;/a&gt;使用入门&lt;/h3&gt;&lt;p&gt;Web Worker在独立线程中运行，因此，它们执行的代码需要保存在一个单独的文件中。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建新的Worker对象&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; worker = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Woker&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;task.js&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;创建Worker后通过调用postMessage() 方法启动&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;worker.postMessage&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// start the worker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="web" scheme="http://jiaxf.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 9</title>
    <link href="http://jiaxf.github.io/2016/12/26/9-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2016/12/26/9-Thinking in Ramda/</id>
    <published>2016-12-26T01:14:31.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Wrap-Up"><a href="#Thinking-in-Ramda-Wrap-Up" class="headerlink" title="Thinking in Ramda: Wrap-Up"></a>Thinking in Ramda: Wrap-Up</h1><p>Ramda has some underlying principles that drive its API:</p><ul><li><p>Data last: Almost all of the functions take the data parameter as the last parameter.</p></li><li><p>Currying: Almost every function in Ramda is “curried”. That is, you can call a function with only a subset of its required arguments, and it will return a new function that takes the remaining arguments. Once all of the arguments are provided, the original function is invoked.</p><a id="more"></a><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1></li><li><p>Getting started introduces us to the idea of functions, pure functions, and immutablilty. If the gets us started by looking at the collection iteration functions like <code>map</code>, <code>filter</code>, and <code>reduce</code>.</p></li><li>Combinging Functions shows us that we can combine functions in various ways using tools such as <code>both</code>, <code>either</code>, <code>pipe</code> and <code>compose</code>.</li><li>Partial Application help us that it can be useful to only supply some of the arguments to a function, allowing a later function to supply the rest.We use <code>partial</code> and <code>curry</code> to help us with this and learn about <code>flip</code> and the placeholder(<code>__</code>).</li><li>Declarative Programming teaches us about the difference between imperative and declarative programming.We learn how to use Ramda’s declarative replacements for arithmetic, comparisons,logic and conditionals.</li><li>Pointfree Style introduces us the idea of pointfree style,also known as tacit programming.In pointfree style,we don’t actually see the data parameter that we’ar operating on;it’s implicit. Our programs are made up of small, simple building blocks that are combined together to do what we need. Only at the end do we apply out compound functions to the actual data.</li><li>Immutability and Objects returns us to the idea of working declaratively, this time giving us the tools we need to read, update, delete, and transform properties of objects.</li><li>Immutability and Arrays continues the theme and shows us how to do the same for arrays.</li><li>Lenses concludes by introducing the concept of a lens, a construct that allows us to focus on a small part of a larger data structure. Using the view, set, and over functions, we can read, update, and transform the focused value in the context of its larger data structure.</li></ul><hr><p><em>Cite from <a href="http://randycoulman.com/blog/2016/07/19/thinking-in-ramda-wrap-up/" target="_blank" rel="noopener">« Thinking in Ramda: Wrap-Up »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Wrap-Up&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Wrap-Up&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Wrap-Up&quot;&gt;&lt;/a&gt;Thinking in Ramda: Wrap-Up&lt;/h1&gt;&lt;p&gt;Ramda has some underlying principles that drive its API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data last: Almost all of the functions take the data parameter as the last parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Currying: Almost every function in Ramda is “curried”. That is, you can call a function with only a subset of its required arguments, and it will return a new function that takes the remaining arguments. Once all of the arguments are provided, the original function is invoked.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 8</title>
    <link href="http://jiaxf.github.io/2016/12/26/8-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2016/12/26/8-Thinking in Ramda/</id>
    <published>2016-12-26T00:38:35.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Lenses"><a href="#Thinking-in-Ramda-Lenses" class="headerlink" title="Thinking in Ramda: Lenses"></a>Thinking in Ramda: Lenses</h1><p>Ramda provides a more general tool for performing the operations such as read, update, and transform object properties and array elements in a declarative, immutable way, the lens.</p><h2 id="What-is-a-Lens"><a href="#What-is-a-Lens" class="headerlink" title="What is a Lens?"></a>What is a Lens?</h2><p>A lens combines a “getter” function and a “setter” function into a single unit. Ramda provides a set of functions for working with lenses.</p><p>We can think of a lens as something that focuses on a specific part of a larger data structure.</p><h2 id="How-Do-I-Create-a-Lens"><a href="#How-Do-I-Create-a-Lens" class="headerlink" title="How Do I Create a Lens?"></a>How Do I Create a Lens?</h2><p>The most generic way to create a lens in Ramda is with the lens function. lens takes a getter function and a setter function and returns the new lens.</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Randy'</span>,</span><br><span class="line">  socialMedia:&#123;</span><br><span class="line">    github: <span class="string">'randycoulamn'</span>,</span><br><span class="line">    twitter: <span class="string">'@randycoulman'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameLens = lens(prop(<span class="string">'name'</span>), assoc(<span class="string">'name'</span>))</span><br><span class="line"><span class="keyword">const</span> twitterLens = lens(</span><br><span class="line">    path([<span class="string">'socialMedia'</span>, <span class="string">'twitter'</span>]),</span><br><span class="line">    assocPath([<span class="string">'socialMedia'</span>, <span class="string">'twitter'</span>])</span><br><span class="line">)</span><br></pre></td></tr></table></figure><a id="more"></a><p>Here we’re using prop and path as our getter functions and <code>assoc</code> and <code>assocPath</code> as our setter functions.</p><p>Note that we had to duplicate the property and path arguments to these functions. Fortunately， Ramda provides nice shortcuts for the most common uses of lenses：<br><code>lensProp</code>，<code>lensPath</code>, and <code>lensIndex</code>.</p><ul><li><code>lensProp</code> creates a lens that focuses on a property of an object.</li><li><code>lensPath</code> creates a lens that focuses on a nested property of an object.</li><li><code>lensIndex</code> creates a lens that focuses on an element of an array.</li></ul><p>We could rewrite our lenses above with <code>lensProp</code> and <code>lensPath</code>:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameLens = lensProp(<span class="string">'name'</span>)</span><br><span class="line"><span class="keyword">const</span> twitterLens = lensPath([<span class="string">'socialMedia'</span>, <span class="string">'twitter'</span>])</span><br></pre></td></tr></table></figure><h2 id="What-Can-I-Do-With-It"><a href="#What-Can-I-Do-With-It" class="headerlink" title="What Can I Do With It?"></a>What Can I Do With It?</h2><p>Ramda provides three functions for working with lenses.</p><ul><li><code>view</code> reads the value of the lens.</li><li><code>set</code> updates the value of the lens.</li><li><code>over</code> applies a transformation funtion to the lens.</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">view</span><span class="params">(nameLens, person)</span></span>  <span class="comment">// =&gt;'Randy'</span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(twitterLens, <span class="string">'@randy'</span>, person)</span></span></span><br><span class="line"><span class="comment">//=&gt;&#123;</span></span><br><span class="line"><span class="comment">//  name: 'Randy',</span></span><br><span class="line"><span class="comment">//  socialMedia: &#123;</span></span><br><span class="line"><span class="comment">//    github: 'randycoulman',</span></span><br><span class="line"><span class="comment">//    twitter: '@randy'</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">over</span><span class="params">(nameLens, toUpper, person)</span></span></span><br><span class="line"><span class="comment">// =&gt; &#123;</span></span><br><span class="line"><span class="comment">//  name: 'RANDY',</span></span><br><span class="line"><span class="comment">//  socialMedia: &#123;</span></span><br><span class="line"><span class="comment">//    github: 'randycoulman',</span></span><br><span class="line"><span class="comment">//    twitter: '@randycoulman'</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Lenses can be handy if we have a somewhat complex data structure that we want to abstract away from calling code.Rather than exposing the structure or providing a getter, setter, and transformer for every accessible property,we can instead expose lenses.</p><p>Client code can the work with our data structure using <code>view</code>, <code>set</code>, and <code>over</code> without being coupled to the exact shape of the structrue.</p><hr><p><em>Cite From <a href="http://randycoulman.com/blog/2016/07/12/thinking-in-ramda-lenses/" target="_blank" rel="noopener">« Thinking in Ramda: Lenses »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Lenses&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Lenses&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Lenses&quot;&gt;&lt;/a&gt;Thinking in Ramda: Lenses&lt;/h1&gt;&lt;p&gt;Ramda provides a more general tool for performing the operations such as read, update, and transform object properties and array elements in a declarative, immutable way, the lens.&lt;/p&gt;
&lt;h2 id=&quot;What-is-a-Lens&quot;&gt;&lt;a href=&quot;#What-is-a-Lens&quot; class=&quot;headerlink&quot; title=&quot;What is a Lens?&quot;&gt;&lt;/a&gt;What is a Lens?&lt;/h2&gt;&lt;p&gt;A lens combines a “getter” function and a “setter” function into a single unit. Ramda provides a set of functions for working with lenses.&lt;/p&gt;
&lt;p&gt;We can think of a lens as something that focuses on a specific part of a larger data structure.&lt;/p&gt;
&lt;h2 id=&quot;How-Do-I-Create-a-Lens&quot;&gt;&lt;a href=&quot;#How-Do-I-Create-a-Lens&quot; class=&quot;headerlink&quot; title=&quot;How Do I Create a Lens?&quot;&gt;&lt;/a&gt;How Do I Create a Lens?&lt;/h2&gt;&lt;p&gt;The most generic way to create a lens in Ramda is with the lens function. lens takes a getter function and a setter function and returns the new lens.&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;Randy&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  socialMedia:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    github: &lt;span class=&quot;string&quot;&gt;&#39;randycoulamn&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    twitter: &lt;span class=&quot;string&quot;&gt;&#39;@randycoulman&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nameLens = lens(prop(&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;), assoc(&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; twitterLens = lens(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path([&lt;span class=&quot;string&quot;&gt;&#39;socialMedia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;twitter&#39;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assocPath([&lt;span class=&quot;string&quot;&gt;&#39;socialMedia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;twitter&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 7</title>
    <link href="http://jiaxf.github.io/2016/12/23/7-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2016/12/23/7-Thinking in Ramda/</id>
    <published>2016-12-23T08:54:34.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Immutability-and-Arrays"><a href="#Thinking-in-Ramda-Immutability-and-Arrays" class="headerlink" title="Thinking in Ramda: Immutability and Arrays"></a>Thinking in Ramda: Immutability and Arrays</h1><h2 id="Reading-Array-Elements"><a href="#Reading-Array-Elements" class="headerlink" title="Reading Array Elements"></a>Reading Array Elements</h2><p>Ramda functions for reading array elements <code>nth</code> and  <code>slice</code> and <code>contains</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>]</span><br><span class="line"><span class="function"><span class="title">nth</span><span class="params">(<span class="number">3</span>, numbers)</span></span>  <span class="comment">// =&gt; 40 (0-based indexing)</span></span><br><span class="line"><span class="function"><span class="title">nth</span><span class="params">(-<span class="number">2</span>, numbers)</span></span> <span class="comment">// =&gt;50 (negative numbers start from the right)</span></span><br><span class="line"><span class="function"><span class="title">slice</span><span class="params">(<span class="number">2</span>, <span class="number">5</span>, numbers)</span></span> <span class="comment">// =&gt; [30,40, 50] (see below)</span></span><br><span class="line"><span class="function"><span class="title">contains</span><span class="params">(<span class="number">20</span>, numbers)</span></span> <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p> <code>nth(0)</code>  equals <code>head</code>, <code>nth(-1)</code> equals <code>last</code>.</p><p> It also provides functions for accesing all-but-the-first element <code>tail</code>,all-but-the-last element <code>init</code>,the first N elements <code>take(N)</code>, and the last N elments <code>takeLast(N)</code>.<br><a id="more"></a></p><h2 id="Adding-Updating-and-Removing-Array-Elements"><a href="#Adding-Updating-and-Removing-Array-Elements" class="headerlink" title="Adding, Updating, and Removing Array Elements"></a>Adding, Updating, and Removing Array Elements</h2><ul><li><code>insert</code></li><li><code>update</code></li><li><code>append</code></li><li><code>prepend</code></li><li><code>update</code></li><li><code>concat</code></li><li><code>concatAfter = flip(concat)</code></li></ul><h2 id="Transforming-Elements"><a href="#Transforming-Elements" class="headerlink" title="Transforming Elements"></a>Transforming Elements</h2><ul><li><code>update</code></li><li><code>adjust</code></li><li><code>evolve</code></li></ul><hr><p><strong>Cite From <a href="http://randycoulman.com/blog/2016/07/05/thinking-in-ramda-immutability-and-arrays/" target="_blank" rel="noopener">« Thinking in Ramda: Immutability and Arrays »</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Immutability-and-Arrays&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Immutability-and-Arrays&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Immutability and Arrays&quot;&gt;&lt;/a&gt;Thinking in Ramda: Immutability and Arrays&lt;/h1&gt;&lt;h2 id=&quot;Reading-Array-Elements&quot;&gt;&lt;a href=&quot;#Reading-Array-Elements&quot; class=&quot;headerlink&quot; title=&quot;Reading Array Elements&quot;&gt;&lt;/a&gt;Reading Array Elements&lt;/h2&gt;&lt;p&gt;Ramda functions for reading array elements &lt;code&gt;nth&lt;/code&gt; and  &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;contains&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const numbers = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, numbers)&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 40 (0-based indexing)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, numbers)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// =&amp;gt;50 (negative numbers start from the right)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, numbers)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; [30,40, 50] (see below)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, numbers)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;code&gt;nth(0)&lt;/code&gt;  equals &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;nth(-1)&lt;/code&gt; equals &lt;code&gt;last&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; It also provides functions for accesing all-but-the-first element &lt;code&gt;tail&lt;/code&gt;,all-but-the-last element &lt;code&gt;init&lt;/code&gt;,the first N elements &lt;code&gt;take(N)&lt;/code&gt;, and the last N elments &lt;code&gt;takeLast(N)&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 6</title>
    <link href="http://jiaxf.github.io/2016/12/23/6-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2016/12/23/6-Thinking in Ramda/</id>
    <published>2016-12-23T00:56:37.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Immutability-and-Objects"><a href="#Thinking-in-Ramda-Immutability-and-Objects" class="headerlink" title="Thinking in Ramda: Immutability and Objects"></a>Thinking in Ramda: Immutability and Objects</h1><h2 id="Reading-Object-Properties"><a href="#Reading-Object-Properties" class="headerlink" title="Reading Object Properties"></a>Reading Object Properties</h2><p>We can make the functions more declarative using <code>equals</code> and <code>gte</code>.</p><h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><p>Fortunately, Ramda can help us out.It provides the <code>prop</code> function for accesing properties of an object.</p><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><p>Where <code>prop</code> reads a single property from an object and returns the value, <code>p ick</code> reads multiple properties from an object and returns a new object with just those properties.<br><a id="more"></a></p><h1 id="HAS"><a href="#HAS" class="headerlink" title="HAS"></a>HAS</h1><p>If we just want to know if an object has a property without reading the value,we can use <code>has</code> for checking own properties,and <code>hasIn</code> for checking up the prototype chain: <code>has(&#39;name&#39;, person)</code>.</p><h1 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h1><p>Where prop reads a property from an object, path dives into nested objects. For example, we could access the zip code from a deeper structure as path([‘address’, ‘zipCode’], person).</p><p>Note that path is more forgiving than prop. path will return undefined if anything along the path (including the original argument) is null or undefined whereas prop will raise an error.</p><h2 id="propOr-pathOr"><a href="#propOr-pathOr" class="headerlink" title="propOr / pathOr"></a>propOr / pathOr</h2><p><code>propOr</code> and <code>pathOr</code> are similar to <code>prop</code> and <code>path</code> combined with <code>defaultTo</code>. They let you provide a default value to use if the property or path cannot be found in the target object.</p><p>For example, we can provide a placeholder when we don’t know a person’s name: <code>propOr(&#39;&lt;Unnamed&gt;&#39;, &#39;name&#39;, person)</code>. Note that unlike <code>prop</code>, <code>propOr</code> will not raise an error if <code>person</code> is <code>null</code> or <code>undefined</code>; it will instead return the default value.</p><h2 id="keys-values"><a href="#keys-values" class="headerlink" title="keys / values"></a>keys / values</h2><p><code>keys</code> returns an array containing the names of all of the own properties in an object. <code>values</code> returns the values of those properties. These functions can be useful when combined with the collection iteration functions we learned about in Part 1.</p><h1 id="merging-Object"><a href="#merging-Object" class="headerlink" title="merging Object"></a>merging Object</h1><p>Sometimes, you’ll want to merge two objects together. A common case is when you have a function that takes named options and you want to combine those options with a set of default options. Ramda provides <code>merge</code> for this purpose.</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(a,b,options = &#123;&#125;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> defaultOptions = &#123;value:<span class="number">42</span>, local:<span class="literal">true</span>&#125;</span><br><span class="line">  <span class="keyword">const</span> finalOptions = merge(defaultOptions, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>merge</code> returns a new object containing all of the properties and values from both objects. If both objects have the same property, the value from the second argument is used.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This has given us a nice set  of tools for working with objects in a declarative and immutable way.We can now read, add, update, delete, and transform properties in objects without changing the original objects. And we can do these things in a way that works when combining functions.</p><hr><p><strong>Cite From <a href="http://randycoulman.com/blog/2016/06/28/thinking-in-ramda-immutability-and-objects/" target="_blank" rel="noopener">« Thinking in Ramda: Immutability and Objects »</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Immutability-and-Objects&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Immutability-and-Objects&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Immutability and Objects&quot;&gt;&lt;/a&gt;Thinking in Ramda: Immutability and Objects&lt;/h1&gt;&lt;h2 id=&quot;Reading-Object-Properties&quot;&gt;&lt;a href=&quot;#Reading-Object-Properties&quot; class=&quot;headerlink&quot; title=&quot;Reading Object Properties&quot;&gt;&lt;/a&gt;Reading Object Properties&lt;/h2&gt;&lt;p&gt;We can make the functions more declarative using &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;gte&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Prop&quot;&gt;&lt;a href=&quot;#Prop&quot; class=&quot;headerlink&quot; title=&quot;Prop&quot;&gt;&lt;/a&gt;Prop&lt;/h2&gt;&lt;p&gt;Fortunately, Ramda can help us out.It provides the &lt;code&gt;prop&lt;/code&gt; function for accesing properties of an object.&lt;/p&gt;
&lt;h2 id=&quot;Pick&quot;&gt;&lt;a href=&quot;#Pick&quot; class=&quot;headerlink&quot; title=&quot;Pick&quot;&gt;&lt;/a&gt;Pick&lt;/h2&gt;&lt;p&gt;Where &lt;code&gt;prop&lt;/code&gt; reads a single property from an object and returns the value, &lt;code&gt;p ick&lt;/code&gt; reads multiple properties from an object and returns a new object with just those properties.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 5</title>
    <link href="http://jiaxf.github.io/2016/12/22/5-Thinking%20in%20Radam/"/>
    <id>http://jiaxf.github.io/2016/12/22/5-Thinking in Radam/</id>
    <published>2016-12-22T07:59:13.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Pointfree-Style"><a href="#Thinking-in-Ramda-Pointfree-Style" class="headerlink" title="Thinking in Ramda: Pointfree Style"></a>Thinking in Ramda: Pointfree Style</h1><h2 id="Pointfree-Style"><a href="#Pointfree-Style" class="headerlink" title="Pointfree Style"></a>Pointfree Style</h2><ul><li>Put the data last</li><li>Curry all the things</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const water = cond([</span><br><span class="line">    [equals(<span class="number">0</span>), always('water freezes at <span class="number">0</span>°C')],</span><br><span class="line">    [equals(<span class="number">100</span>), alwyas('water boils at <span class="number">100</span>°C')],</span><br><span class="line">    [T,           temp =&gt; `nothing sepcial happends at $&#123;temp&#125;°C`]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="Multi-argument-Functions"><a href="#Multi-argument-Functions" class="headerlink" title="Multi-argument Functions"></a>Multi-argument Functions</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const titlesForYear = curry((<span class="name">year</span>, books) =&gt;</span><br><span class="line">  pipe(</span><br><span class="line">      filter(<span class="name">publishedInYear</span>(<span class="name">year</span>)),</span><br><span class="line">      map(<span class="name">book</span> =&gt; book.title)</span><br><span class="line">  )(<span class="name">books</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const titlesForYear = year =&gt;</span><br><span class="line">  pipe(</span><br><span class="line">      filter(<span class="name">publishedInYear</span>(<span class="name">year</span>)),</span><br><span class="line">      map(<span class="name">book</span> =&gt; book.title)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Refactoring-To-Pointfree"><a href="#Refactoring-To-Pointfree" class="headerlink" title="Refactoring To Pointfree"></a>Refactoring To Pointfree</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isCitizen = <span class="function"><span class="params">person</span> =&gt;</span> wasBornInCountry(person) || wasNaturalized(person)</span><br><span class="line"><span class="keyword">const</span> isEligibleToVote = <span class="function"><span class="params">person</span> =&gt;</span> isOver18(person) &amp;&amp; isCitizen(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写</span></span><br><span class="line"><span class="keyword">const</span> isCitizen = <span class="function"><span class="params">person</span> =&gt;</span> either(wasBornInCountry, wasNaturalized)(person)</span><br><span class="line"><span class="keyword">const</span> isEligibleToVote = <span class="function"><span class="params">pserson</span> =&gt;</span> both(isOver18, isCitizen)(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">// with pointfree style</span></span><br><span class="line"><span class="keyword">const</span> isCitizen= either（wasBornInCountry, wasNaturalized)</span><br><span class="line"><span class="keyword">const</span> isEligibleToVote= both(isOver18, isCitizen)</span><br></pre></td></tr></table></figure><p>##　Conclusion</p><p>Pointfree style, also known as tacit programming, can make our code clearer and easier to reason about. By refactoring our code to combine all of our transformations into a single function, we end up with smaller building blocks that can be used in more places.</p><hr><p><em>Cite from <a href="http://randycoulman.com/blog/2016/06/21/thinking-in-ramda-pointfree-style/" target="_blank" rel="noopener">« Thinking in Ramda: Pointfree Style »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Pointfree-Style&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Pointfree-Style&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Pointfree Style&quot;&gt;&lt;/a&gt;Thinking in Ramda: Pointfree Style&lt;/h1&gt;&lt;h2 id=&quot;Pointfree-Style&quot;&gt;&lt;a href=&quot;#Pointfree-Style&quot; class=&quot;headerlink&quot; title=&quot;Pointfree Style&quot;&gt;&lt;/a&gt;Pointfree Style&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Put the data last&lt;/li&gt;
&lt;li&gt;Curry all the things&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const water = cond([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [equals(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), always(&#39;water freezes at &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;°C&#39;)],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [equals(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;), alwyas(&#39;water boils at &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;°C&#39;)],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [T,           temp =&amp;gt; `nothing sepcial happends at $&amp;#123;temp&amp;#125;°C`]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Multi-argument-Functions&quot;&gt;&lt;a href=&quot;#Multi-argument-Functions&quot; class=&quot;headerlink&quot; title=&quot;Multi-argument Functions&quot;&gt;&lt;/a&gt;Multi-argument Functions&lt;/h2&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const titlesForYear = curry((&lt;span class=&quot;name&quot;&gt;year&lt;/span&gt;, books) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pipe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      filter(&lt;span class=&quot;name&quot;&gt;publishedInYear&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;year&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map(&lt;span class=&quot;name&quot;&gt;book&lt;/span&gt; =&amp;gt; book.title)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )(&lt;span class=&quot;name&quot;&gt;books&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const titlesForYear = year =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pipe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      filter(&lt;span class=&quot;name&quot;&gt;publishedInYear&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;year&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map(&lt;span class=&quot;name&quot;&gt;book&lt;/span&gt; =&amp;gt; book.title)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 4</title>
    <link href="http://jiaxf.github.io/2016/12/22/4-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2016/12/22/4-Thinking in Ramda/</id>
    <published>2016-12-22T07:08:01.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Declarative-Programming"><a href="#Thinking-in-Ramda-Declarative-Programming" class="headerlink" title="Thinking in Ramda: Declarative Programming"></a>Thinking in Ramda: Declarative Programming</h1><p>As we start writing small functional building blocks and combining them, we find that we have to write a lot of functions that wrap JavaScript’s operators such as arithmetic, comparison, logic, and control flow. This can feel tedious, but Ramda has our back.</p><p>There are many different ways to divide up the programming language/style landscape. There’s static typing vs dynamic typing, interpreted languages vs compiled languages, low-level vs high-level, etc.</p><p>Another such division is imperative programming vs declarative programming.<br><a id="more"></a><br>Functional programming is considered a subset of declarative programming. In a functional program, we define functions and then tell the computer what to do by combining these functions.</p><p>Even in declarative programs, it is necessary to do similar tasks to those we do in imperative programs. Control flow, arithmetic, comparison, and logic are still the basic building blocks we have to work with. But we need to find a way to express these constructs in a declarative way.</p><h2 id="Declarative-Replacements"><a href="#Declarative-Replacements" class="headerlink" title="Declarative Replacements"></a>Declarative Replacements</h2><p>Since we’re programming in JavaScript, an imperative language, it’s fine to use the standard imperative constructs when writing “normal” JavaScript code.</p><p>But when we’re writing functional transformations using pipelines and similar constructs, the imperative constructs don’t play well.</p><p>Ramda provides add, subtract, multiply, and divide functions to use in place of the standard arithmetic operators.</p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>Notice that some of our functions are using standard comparison operators (<code>===</code> and `&gt;= in this case). As you might suspect by now, Ramda also provides replacements for these.</p><p>Let’s modify our code to use <code>equals</code> in place of <code>===</code> and <code>gte</code> in place of <code>&gt;=</code>.</p><p>Ramda also provides <code>gt</code> for <code>&gt;</code>, <code>lt</code> for <code>&lt;</code>, and <code>lte</code> for <code>&lt;=</code>.</p><p>In addition to <code>equals</code>, there is <code>identical</code> for determining if two values reference the same memory.</p><p>There are a couple of common uses of <code>===</code>: checking if a string or array is empty (<code>str === &#39;&#39;</code> or <code>arr.length === 0</code>), and checking if a variable is <code>null</code> or <code>undefined</code>. Ramda provides handy functions for both cases: <code>isEmpty</code> and <code>isNil</code>.</p><h2 id="Logic"><a href="#Logic" class="headerlink" title="Logic"></a>Logic</h2><p>we used the <code>both</code> and <code>either</code> functions in place of <code>&amp;&amp;</code> and <code>||</code> operations. We also talked about <code>complement</code> in place of <code>!</code>.</p><p>But sometimes we need to apply <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code> to disparate values. For those cases, Ramda gives us <code>and</code>, <code>or</code>, and <code>not</code> functions. I think of it this way: <code>and</code>, <code>or</code>, and <code>not</code> work with values, while <code>both</code>, <code>either</code>, and <code>complement</code> work with functions.</p><p><code>defaultTo</code> checks if the second argument <code>isNil</code>. If it isn’t, it returns that as the value, otherwise it returns the first value.</p><h2 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h2><ul><li>IfElse</li></ul><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><p>Constant functions are quite useful in situations like this. As you might imagine, Ramda provides us a shortcut. In this case, the shortcut is named <code>always</code>.</p><p>Ramda also provides <code>T</code> and <code>F</code> as further shortcuts for <code>always(true)</code> and <code>always(false)</code>.</p><h2 id="Identity"><a href="#Identity" class="headerlink" title="Identity"></a>Identity</h2><p><code>identity</code> can take more than one argument, but it always returns its first argument. If we want to return something other than the first argument, there’s the more general <code>nthArg</code> function. It’s much less common than <code>identity</code>.</p><h2 id="When-And-Unless"><a href="#When-And-Unless" class="headerlink" title="When And Unless"></a>When And Unless</h2><h2 id="Cond"><a href="#Cond" class="headerlink" title="Cond"></a>Cond</h2><hr><p><em>Cite From <a href="http://randycoulman.com/blog/2016/06/14/thinking-in-ramda-declarative-programming/" target="_blank" rel="noopener">« Thinking in Ramda: Declarative Programming »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Declarative-Programming&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Declarative-Programming&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Declarative Programming&quot;&gt;&lt;/a&gt;Thinking in Ramda: Declarative Programming&lt;/h1&gt;&lt;p&gt;As we start writing small functional building blocks and combining them, we find that we have to write a lot of functions that wrap JavaScript’s operators such as arithmetic, comparison, logic, and control flow. This can feel tedious, but Ramda has our back.&lt;/p&gt;
&lt;p&gt;There are many different ways to divide up the programming language/style landscape. There’s static typing vs dynamic typing, interpreted languages vs compiled languages, low-level vs high-level, etc.&lt;/p&gt;
&lt;p&gt;Another such division is imperative programming vs declarative programming.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 3</title>
    <link href="http://jiaxf.github.io/2016/12/22/3-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2016/12/22/3-Thinking in Ramda/</id>
    <published>2016-12-22T03:26:14.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Partial-Application"><a href="#Thinking-in-Ramda-Partial-Application" class="headerlink" title="Thinking in Ramda: Partial Application"></a>Thinking in Ramda: Partial Application</h1><h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher-Order Functions"></a>Higher-Order Functions</h2><p>Functions that take or return other functions are known as “higher-order functions”.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Full function version:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">publishedInYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> book.year === year</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrow function version:</span></span><br><span class="line"><span class="keyword">const</span> publishedInYear = <span class="function"><span class="params">year</span> =&gt;</span> book =&gt; book.year === year</span><br><span class="line"><span class="keyword">const</span> titlesForYear = <span class="function">(<span class="params">books, year</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = filter(publishedInYear(year), books)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> map(<span class="function"><span class="params">book</span> =&gt;</span> book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Partially-Applying-functions"><a href="#Partially-Applying-functions" class="headerlink" title="Partially-Applying functions"></a>Partially-Applying functions</h2><p>We could rewrite any multi-argument function this way if we wanted to, but we don’t own all of the functions we might want to use. Also, we might want to use some multi-argument functions in the usual way.</p><p>Ramda provides two functions to help us out: <code>partial</code>, and <code>partialRight</code>.</p><p>These two functions let us call any function with fewer arguments than it needs. They both return a new function that takes the missing arguments and then calls the original function once all of the arguments have been supplied.</p><p>The difference between <code>partial</code> and <code>partialRight</code> is whether the arguments we supply are the left-most or right-most arguments needed by the original function.</p><p>Note that the arguments we supply to <code>partial</code> and <code>partialRight</code> must always be in an array, even if there’s only one of them.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = (book, <span class="built_in">year</span>) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(partialRight(publishedInYear, [<span class="built_in">year</span>]), books)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Curry"><a href="#Curry" class="headerlink" title="Curry"></a>Curry</h2><p>Currying is another core concept in functional programming. Technically, a curried function is always a series of single-argument functions, which is what I was just complaining about. In pure functional languages, the syntax generally makes that look no different than calling a function with multiple arguments.</p><blockquote><p>柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。“如果固定某些参数，将会得到余下参数的一个函数”。</p></blockquote><blockquote><p>函数柯里化的对偶是Uncurrying,一种是使用匿名单参数函数来实现多参数函数的方法。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span><span class="params">(a)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*a + b*b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(foo(<span class="number">3</span>))(<span class="number">4</span>) <span class="keyword">or</span> foo(<span class="number">3</span>)(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>惰性求值（Lazy Evaluation），又称惰性计算、懒惰求值，也称为传需求调用（call-by-need）。它的目的是要最小化计算机要做的工作。除可以得到性能的提升外，惰性计算的最重要的好处是它可以构造一个无限的数据类型或可计算的无限列表而没有妨碍计算的无限循环或大小问题。<br>惰性求值的相反是及早求值，这是一个大多少编程语言所拥有的普通计算方式。</p></blockquote><blockquote><p>λ演算是一套用于研究函数定义、函数应用和递归的形式系统。这种演算可以用来清晰地定义什么是一个可计算函数。Lambda演算可以被称为最小的通用程序设计语言，它包括一条变换规则（变量替换）和一条函数定义方式，Lambda演算置通用在于，任何一个可计算函数都能用这种形式来表达和求值。因此，它是等价于图灵机的。<br>在lambda表达式的集合定义一个等价关系（== 标注），“两个表达式其实表示的是同一个函数”这样的直觉性判断即由此表述，这种等级关系是通过所谓的“alpha-变换规则”和”beta-归约规则”。</p></blockquote><p>In Ramda, a curried function can be called with only a subset of its arguments, and it will return a new function that accepts the remaining arguments. If you call a curried function with all of its arguments, it will call just call the function.</p><p>You can think of a curried function as the best of both worlds: you can call it normally with all of its arguments and it will just work. Or you can call it with a subset of its arguments, and it will act as if you’d used <code>partial</code>.</p><p>Note that this flexibility introduces a small performance hit, because <code>curry</code> needs to figure out how the function was called and then determine what to do. In general, I only curry functions when I find I need to use <code>partial</code> in more than one place.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = curry((<span class="built_in">year</span>, book) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(publishedInYear(<span class="built_in">year</span>), books)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Argument-Order"><a href="#Argument-Order" class="headerlink" title="Argument Order"></a>Argument Order</h2><p>Notice that to make curry work for us, we had to reverse the argument order. This is extremely common with functional programming, so almost every Ramda function is written so that the data to be operated on comes last.</p><h1 id="Arguments-In-The-Wrong-order"><a href="#Arguments-In-The-Wrong-order" class="headerlink" title="Arguments In The Wrong order"></a>Arguments In The Wrong order</h1><p>###　Filp</p><p>The first option is <code>flip</code>. flip takes a function of 2 or more arguments and returns a new function that takes the same arguments, but switches the order of the first two arguments. It is mostly used with two argument functions, but is more general than that.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = curry((book, <span class="built_in">year</span>) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(flip(publishedInYear)(<span class="built_in">year</span>), books)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In most cases, I’d prefer to use the more convenient argument order, but if you need to use a function you don’t control, <code>flip</code> is a helpful option.</p><h3 id="Placeholder"><a href="#Placeholder" class="headerlink" title="Placeholder"></a>Placeholder</h3><p>The more general option is the “placeholder” argument (__).</p><p>What if we have a curried function of three arguments, and we want to supply the first and last arguments, leaving the middle one for later? We can use the placeholder for the middle argument:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> threeArgs = curry(<span class="function">(<span class="params">a,b,c</span>) =&gt;</span> &#123; <span class="comment">/* ... */</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleArgumentLater = threeArgs(<span class="string">'value for a'</span>, __, <span class="string">'value fro c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleAargumentOnly = threeArgs(__, <span class="string">'value for b'</span>, __)</span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = curry ((book, <span class="built_in">year</span>) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(publishedInYear(__, <span class="built_in">year</span>), books)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that <strong> only works for curried functions, while partial, partialRight, and flip all work on any function. If you need to use </strong> with a normal function, you can always wrap it with a call to curry first.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const publishedInYear = curry((<span class="name">year</span>, book) =&gt; book.year === year)</span><br><span class="line"></span><br><span class="line">const titlesForYear = curry((<span class="name">year</span>, books) =&gt;</span><br><span class="line">  pipe(</span><br><span class="line">      filter(<span class="name">publishedInYear</span>(<span class="name">year</span>)),</span><br><span class="line">      map(<span class="name">book</span> =&gt; book.title)</span><br><span class="line">  )(<span class="name">books</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><p>  <em>Cite From <a href="http://randycoulman.com/blog/2016/06/07/thinking-in-ramda-partial-application/" target="_blank" rel="noopener">« Thinking in Ramda: Partial Application »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Partial-Application&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Partial-Application&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Partial Application&quot;&gt;&lt;/a&gt;Thinking in Ramda: Partial Application&lt;/h1&gt;&lt;h2 id=&quot;Higher-Order-Functions&quot;&gt;&lt;a href=&quot;#Higher-Order-Functions&quot; class=&quot;headerlink&quot; title=&quot;Higher-Order Functions&quot;&gt;&lt;/a&gt;Higher-Order Functions&lt;/h2&gt;&lt;p&gt;Functions that take or return other functions are known as “higher-order functions”.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Full function version:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;publishedInYear&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;year&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;book&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; book.year === year&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Arrow function version:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; publishedInYear = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;year&lt;/span&gt; =&amp;gt;&lt;/span&gt; book =&amp;gt; book.year === year&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; titlesForYear = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;books, year&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; selected = filter(publishedInYear(year), books)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;book&lt;/span&gt; =&amp;gt;&lt;/span&gt; book.title, selected)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 2</title>
    <link href="http://jiaxf.github.io/2016/12/22/2-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2016/12/22/2-Thinking in Ramda/</id>
    <published>2016-12-22T01:52:11.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Combining-funtions"><a href="#Thinking-in-Ramda-Combining-funtions" class="headerlink" title="Thinking in Ramda: Combining funtions"></a>Thinking in Ramda: Combining funtions</h1><h2 id="Simple-Combinations"><a href="#Simple-Combinations" class="headerlink" title="Simple Combinations"></a>Simple Combinations</h2><p>Once you’ve gotten used to the idea of passing functions to other functions, you might start to find situations where you want to combine sereral functions together.</p><p>Ramda provides several functions for doing simple combinations.</p><h2 id="Complement"><a href="#Complement" class="headerlink" title="Complement"></a>Complement</h2><p>Ramda provides a higher-order-function,<code>complement</code>, that takes another function and return a new function that returns <code>true</code> when the original function returns a falsy value, and <code>false</code> when the original function returns a truthy value.<br><a id="more"></a></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const isEven = x =&gt; x % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">find(complement(isEven), [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">//--&gt; 1</span></span><br></pre></td></tr></table></figure><p>Even better is to give the <code>complement</code>ed function its own name so it can be reused:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const isEven = x =&gt; x % <span class="number">2</span> ===<span class="number">0</span></span><br><span class="line">const isOdd = complement(isEven)</span><br><span class="line"></span><br><span class="line">find(isOdd, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])    <span class="comment">// --&gt; 1</span></span><br></pre></td></tr></table></figure><p>Note that  <code>complement</code> implements the same idea for functions as the <code>!</code>(not) operator does for values.</p><h2 id="BOTH-EITHER"><a href="#BOTH-EITHER" class="headerlink" title="BOTH/EITHER"></a>BOTH/EITHER</h2><p><code>both</code> takes two other functions and returns a new funtion that returns <code>true</code> if both functions return a truthy value when applied to the arguments and  <code>false</code> otherwise.</p><p><code>either</code> takes two other functions and returns a new function that returns <code>true</code> if either function returns a truthy value when applied to the arguments and  <code>false</code> otherwise.</p><p>Note that <code>both</code> implements the same idea for  functions as the <code>&amp;&amp;</code>(and) operator does for values, and <code>either</code> implements that same idea for functions as the <code>||</code>(or) operator does for values.</p><p>Ramda also provides  <code>allPass</code> and <code>anyPass</code> that take an array of any number of functions. As their names suggest, <code>allPass</code> works like <code>both</code>, and  <code>anyPass</code> works like <code>either</code>.</p><h2 id="Pipelines"><a href="#Pipelines" class="headerlink" title="Pipelines"></a>Pipelines</h2><p>Sometimes we want to apply several functions to some data in a pipeline fashion.For example, we might want to take tow numbers,multiply them together,and one, and square the result.We could write it like this.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multiply = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a*b   </span><br><span class="line"><span class="keyword">const</span> addOne = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">x</span> =&gt;</span> x * x</span><br><span class="line"><span class="keyword">const</span> operate = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> product = multiply(x,y)</span><br><span class="line">  <span class="keyword">const</span> incremented = addOne(product)</span><br><span class="line">  <span class="keyword">const</span> square = square(incremented)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> squared</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">operate(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// =&gt; ((3*4)+1)^2 ==&gt; (12 +1)^2 ==&gt; 169</span></span><br></pre></td></tr></table></figure><h3 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe"></a>Pipe</h3><p>Ramda provides the <code>pipe</code> functions,which takes a list of one or more functions and returns a new function.</p><p>The new function takes the same number of arguments as the first function it is given.It then ‘pipes’ those arguments through each function in the list.It applies<br>the first function to the arguments, passes its result to the second function and so on. The result of the last function is the result of the <code>pipe</code> call.</p><p>Note that all of the functions after the first must only take a single argument.</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">const</span> operate = pipe(</span><br><span class="line">  <span class="keyword">multiply,</span></span><br><span class="line"><span class="keyword"> </span> <span class="keyword">addOne,</span></span><br><span class="line"><span class="keyword"> </span> square</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h2><p><code>compose</code> works exactly the same way as <code>pipe</code>, except that it applies the functions in right-to-left order instead of left-to-right.</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">const</span> operate = compose(</span><br><span class="line">    square,</span><br><span class="line">    <span class="keyword">addOne,</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">multiply</span></span><br><span class="line"><span class="keyword">)</span></span><br></pre></td></tr></table></figure><p>I always think of <code>compose</code> this way: <code>compose(f,g)(value)</code> is equivalent to <code>f(g(value))</code>.</p><p>As with <code>pipe</code>, note that all of the functions except the last must only take a single argument.</p><hr><p><em>Cited From <a href="http://randycoulman.com/blog/2016/05/31/thinking-in-ramda-combining-functions/" target="_blank" rel="noopener">« Thinking in Ramda: Combining Functions »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Combining-funtions&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Combining-funtions&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Combining funtions&quot;&gt;&lt;/a&gt;Thinking in Ramda: Combining funtions&lt;/h1&gt;&lt;h2 id=&quot;Simple-Combinations&quot;&gt;&lt;a href=&quot;#Simple-Combinations&quot; class=&quot;headerlink&quot; title=&quot;Simple Combinations&quot;&gt;&lt;/a&gt;Simple Combinations&lt;/h2&gt;&lt;p&gt;Once you’ve gotten used to the idea of passing functions to other functions, you might start to find situations where you want to combine sereral functions together.&lt;/p&gt;
&lt;p&gt;Ramda provides several functions for doing simple combinations.&lt;/p&gt;
&lt;h2 id=&quot;Complement&quot;&gt;&lt;a href=&quot;#Complement&quot; class=&quot;headerlink&quot; title=&quot;Complement&quot;&gt;&lt;/a&gt;Complement&lt;/h2&gt;&lt;p&gt;Ramda provides a higher-order-function,&lt;code&gt;complement&lt;/code&gt;, that takes another function and return a new function that returns &lt;code&gt;true&lt;/code&gt; when the original function returns a falsy value, and &lt;code&gt;false&lt;/code&gt; when the original function returns a truthy value.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 1</title>
    <link href="http://jiaxf.github.io/2016/12/22/1-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2016/12/22/1-Thinking in Ramda/</id>
    <published>2016-12-22T00:36:33.000Z</published>
    <updated>2018-04-13T07:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-getting-started"><a href="#Thinking-in-Ramda-getting-started" class="headerlink" title="Thinking in Ramda: getting started"></a>Thinking in Ramda: getting started</h1><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>I’ll be using the Ramda JavaScript library fro this series,though many of the ideas apply to other JavaScript libraries such as  Underscore and Lodash as well as to other languages.</p><p>I’m going to stick to the lighter,less-academic end of functional programing.</p><h2 id="Ramda"><a href="#Ramda" class="headerlink" title="Ramda"></a>Ramda</h2><p>I find Ramda to be a nicely designed library that provides a lot of tools for doing functional programming in JavaScript in a clean, elegant way.<br><a id="more"></a></p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>Some languages go further and provide support for functions as first-class constructs. By “first-class”, I mean that functions can be used in the same way as other kinds of values.You can:</p><ul><li>refer to them from constants and variables</li><li>pass them as parameters to other Functions</li><li>return them as results from other Functions</li></ul><p>JavaScript is one such language, and we’ll be taking advantage of that.</p><h2 id="Pure-Functions"><a href="#Pure-Functions" class="headerlink" title="Pure Functions"></a>Pure Functions</h2><p>Pure functions are functions that have no side-effects.They don’t assign to any outside variables,they don’t consume input, they don’t produce output,they don’t read from or write to a database,they don’t modify the parameters they’re passed,etc.</p><p>The basic idea is that,if you call a function with the same inputs over and over again,you always get the same result.</p><p>You can certainly do things with impure functions(and you must, if you program is going to do anything interesting), but for the most part you’ll want to keep most of you functions pure.</p><h2 id="Immutability"><a href="#Immutability" class="headerlink" title="Immutability"></a>Immutability</h2><p>What dose that mean? “Immutable” means “unchangeable”.</p><p>When I’m working in an immutable fashion, once I initialize a value or an object I never change it again.That means no changing elements of an array or properties of an object.</p><p>If I need to change something in an array or object,I instead return a new copy of it with the changed value. Later posts will talk about this in great detail.</p><p>Immutability goes hand-in-hand with pure functions.Since pure functions aren’t allowed to have side-effects, they aren’t allowed to change outside data structures.They are forced to work with data in an immutable way.</p><h2 id="FOREACH"><a href="#FOREACH" class="headerlink" title="FOREACH"></a>FOREACH</h2><p>Rather than writing an explicit loop,try using the <code>forEach</code> function instead.That is:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Replace this</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">const</span> value <span class="keyword">of</span> myArray)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//With</span></span><br><span class="line">forEach(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value), myArray)</span><br></pre></td></tr></table></figure><p><code>forEach</code> takes a function an d an array, and calls the function on each element of the array.</p><h2 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h2><p>Unlike <code>forEach</code>, map collects the results of applying the function into a new array and returns it.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map(x =&gt; x *<span class="number">2</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// =&gt;[2,4,6]</span></span><br><span class="line"></span><br><span class="line">const double = x =&gt; x * <span class="number">2</span></span><br><span class="line">map(double, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// =&gt;[2,4,6]</span></span><br></pre></td></tr></table></figure><h2 id="FILTER-REJECT"><a href="#FILTER-REJECT" class="headerlink" title="FILTER/REJECT"></a>FILTER/REJECT</h2><p>As its name might suggest, <code>filter</code> selects elements from an array based on some function.<code>reject</code> does exactly the same thing, but in reverse. It keeps the elements for which the function returns a false value and excludes the values for which it returns a truthy value.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const isEven = x =&gt; x%<span class="number">2</span> === <span class="number">0</span></span><br><span class="line">filter(isEven, [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>]) <span class="comment">// ==&gt; [2, 4]</span></span><br><span class="line"></span><br><span class="line">reject(isEven, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">// ==&gt; [1,3]</span></span><br></pre></td></tr></table></figure><h2 id="FIND"><a href="#FIND" class="headerlink" title="FIND"></a>FIND</h2><p><code>find</code> applies a function to each element of an array and returns the first element for which the function returns a truthy value.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find(isEven, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])  <span class="comment">// --&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="REDUCE"><a href="#REDUCE" class="headerlink" title="REDUCE"></a>REDUCE</h2><p><code>reduce</code> takes a two-argument function, and initial value,and the array to operate on.</p><p>The first argument to the function we pass in is called the “accumulator” and the second argument is the value from the array.The function needs to return a new accumulator value.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">add</span> = (accum, <span class="keyword">value</span>) =&gt; accum + <span class="keyword">value</span></span><br><span class="line">reduce(<span class="keyword">add</span>, <span class="number">5</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])  <span class="comment">// --&gt; 15</span></span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>By starting with these collection-iteration functions, you can get used to the idea of passing functions to other functions. You might have used these in other languages without realizing you were doing some functional programming.</p><hr><p><em>Cited From <a href="http://randycoulman.com/blog/2016/05/24/thinking-in-ramda-getting-started/" target="_blank" rel="noopener">« Thinking in Ramda: Getting Started »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-getting-started&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-getting-started&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: getting started&quot;&gt;&lt;/a&gt;Thinking in Ramda: getting started&lt;/h1&gt;&lt;h2 id=&quot;Getting-Started&quot;&gt;&lt;a href=&quot;#Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;Getting Started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;p&gt;I’ll be using the Ramda JavaScript library fro this series,though many of the ideas apply to other JavaScript libraries such as  Underscore and Lodash as well as to other languages.&lt;/p&gt;
&lt;p&gt;I’m going to stick to the lighter,less-academic end of functional programing.&lt;/p&gt;
&lt;h2 id=&quot;Ramda&quot;&gt;&lt;a href=&quot;#Ramda&quot; class=&quot;headerlink&quot; title=&quot;Ramda&quot;&gt;&lt;/a&gt;Ramda&lt;/h2&gt;&lt;p&gt;I find Ramda to be a nicely designed library that provides a lot of tools for doing functional programming in JavaScript in a clean, elegant way.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
</feed>

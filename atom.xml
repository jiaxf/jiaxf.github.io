<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞天雪的技术博客</title>
  <icon>https://www.gravatar.com/avatar/221bd4f690152d292d31dbe2f498412f</icon>
  <subtitle>技术无止境</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jiaxf.github.io/"/>
  <updated>2018-05-03T02:16:54.000Z</updated>
  <id>http://jiaxf.github.io/</id>
  
  <author>
    <name>Jiaxf</name>
    <email>jiaxuefeng0@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对称加密&amp;非对称加密</title>
    <link href="http://jiaxf.github.io/2018/05/03/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86&amp;%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>http://jiaxf.github.io/2018/05/03/对称加密&amp;非对称加密/</id>
    <published>2018-05-03T01:27:09.000Z</published>
    <updated>2018-05-03T02:16:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对称加密-DES"><a href="#对称加密-DES" class="headerlink" title="对称加密 - DES"></a>对称加密 - DES</h1><ol><li>真正的加密算法，带密钥，加密和解密使用相同的密钥</li><li>对称加密优点是算法公开、计算量小、加密速度快、加密效率高</li><li>双方都保存秘钥，其次如果一方的秘钥被泄露，那么加密信息也就不安全了。另外，每对用户每次使用对称加密算法时，都需要使用其他人不知道的唯一秘钥，这会使得收、发双方所拥有的钥匙数量巨大，密钥管理成为双方的负担</li><li>DES使用56位密钥，以现代计算能力，24小时内即可被破解。虽然如此，在某些简单应用中，我们还是可以使用DES加密算法</li></ol><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DES</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datasource byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password   String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> byte[]</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] datasource, String password) &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">              SecureRandom random = <span class="keyword">new</span> SecureRandom();  </span><br><span class="line">              DESKeySpec desKey = <span class="keyword">new</span> DESKeySpec(password.getBytes());  </span><br><span class="line">              <span class="comment">//创建一个密匙工厂，然后用它把DESKeySpec转换成  </span></span><br><span class="line">              SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);  </span><br><span class="line">              SecretKey securekey = keyFactory.generateSecret(desKey);  </span><br><span class="line">              <span class="comment">//Cipher对象实际完成加密操作  </span></span><br><span class="line">              Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);  </span><br><span class="line">              <span class="comment">//用密匙初始化Cipher对象,Cipher.ENCRYPT_MODE代表编码模式  </span></span><br><span class="line">              cipher.init(Cipher.ENCRYPT_MODE, securekey, random);  </span><br><span class="line">              <span class="comment">//现在，获取数据并加密  </span></span><br><span class="line">              <span class="comment">//正式执行加密操作  </span></span><br><span class="line">              <span class="function"><span class="keyword">return</span> cipher.<span class="title">doFinal</span><span class="params">(datasource)</span></span>;  </span><br><span class="line">          &#125; <span class="keyword">catch</span> (Throwable e) &#123;  </span><br><span class="line">              e.printStackTrace();  </span><br><span class="line">          &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src      byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] src, String password) <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">      <span class="comment">// DES算法要求有一个可信任的随机数源  </span></span><br><span class="line">      SecureRandom random = <span class="keyword">new</span> SecureRandom();  </span><br><span class="line">      <span class="comment">// 创建一个DESKeySpec对象  </span></span><br><span class="line">      DESKeySpec desKey = <span class="keyword">new</span> DESKeySpec(password.getBytes());  </span><br><span class="line">      <span class="comment">// 创建一个密匙工厂  </span></span><br><span class="line">      SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(<span class="string">"DES"</span>);  </span><br><span class="line">      <span class="comment">// 将DESKeySpec对象转换成SecretKey对象  </span></span><br><span class="line">      SecretKey securekey = keyFactory.generateSecret(desKey);  </span><br><span class="line">      <span class="comment">// Cipher对象实际完成解密操作  </span></span><br><span class="line">      Cipher cipher = Cipher.getInstance(<span class="string">"DES"</span>);  </span><br><span class="line">      <span class="comment">// 用密匙初始化Cipher对象  </span></span><br><span class="line">      cipher.init(Cipher.DECRYPT_MODE, securekey, random);  </span><br><span class="line">      <span class="comment">// 真正开始解密操作  </span></span><br><span class="line">      <span class="function"><span class="keyword">return</span> cipher.<span class="title">doFinal</span><span class="params">(src)</span></span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="非对称加密-RSA"><a href="#非对称加密-RSA" class="headerlink" title="非对称加密 - RSA"></a>非对称加密 - RSA</h1><p>1、用RSA算法生成一对密钥，公钥发放给外部客户，私钥自己保管；有以下应用场景：<br>     【公钥加密、私钥解密】或者【私钥签名、公钥验证】<br>2、非对称加解密的理解：</p><ul><li>小明想秘密给小英发送消息</li><li>小英手里有一个盒子（public key），这个盒子只有小英手里的钥匙（private key）才打得开</li><li>小英把盒子送给小明（分发公钥）</li><li>小明写好消息放进盒子里，锁上盒子（公钥加密）</li><li>小明把盒子寄给小英（密文传输）</li><li>小英用手里的钥匙打开盒子，得到小明的消息（私钥解密）</li><li>假设小刚劫持了盒子，因为没有小英的钥匙，他也打不开</li></ul><p>与DES不同，RSA算法中，每个通信主体都有两个钥匙，一个公钥一个私钥。<br>就是有2把钥匙</p><ol><li>使用publicKey可以对数据进行加密</li><li>使用Key才能对数据进行解密</li></ol><p>单方向传输<br>用公钥加密的数据，只有私钥能解开（可用于加密）；<br>同时，使用私钥加密的数据，只有公钥能解开（签名）。但是速度很慢（比私钥加密慢100到1000倍），<br>公钥的主要算法有RSA，还包括Blowfish,Diffie-Helman等。</p><p>公钥与私钥</p><ol><li>权威数字认证机构（CA）给所有通信主体（个人或组织）颁发公钥和私钥，彼此配对，分别唯一。</li><li>私钥好比数字指纹，同时具有解密和加密功能。个人保管，不公开。</li><li>公钥好比安全性极高的挂号信箱地址，公开。</li></ol><p><em>公私钥加解密举例</em></p><p><img src="/images/20160122203001725.jpeg" alt=""></p><p>设若甲有一份需保密的数字商业合同发给乙签署。经过如下步骤：</p><ol><li>甲用乙的公钥对合同加密。</li><li>密文从甲发送到乙。</li><li>乙收到密文，并用自己的私钥对其解密。</li><li>解密正确，经阅读，乙用自己的私钥对合同进行签署。</li><li>乙用甲的公钥对已经签署的合同进行加密。</li><li>乙将密文发给甲。</li><li>甲用自己的私钥将已签署合同解密。</li><li>解密正确，确认签署。</li></ol><p>公私钥加解密说明<br>从以上步骤，我们知道：</p><ol><li>用公钥加密的密文能且只能用与其唯一配对的私钥才能解开。</li><li>如果某份密文被解开，那么肯定是密文的目标信息主体解开的。</li><li>私钥因其唯一标识所有者的属性，被用于数字签名，具有法律效力。</li></ol><p>一。 公私钥生成</p><ol><li>随机选定两个大素数p, q.</li><li>计算公钥和私钥的公共模数 n = pq .</li><li>计算模数n的欧拉函数 φ(n) .</li><li>选定一个正整数e, 使1 &lt; e &lt; φ(n) , 且e与φ(n)互质.</li><li>计算d, 满足 de ≡ 1  (mod φ(n) ), (k为某个正整数).<br>6.n与e决定公钥, n与d决定私钥.</li></ol><p>二。加解密<br>该过程为小张给小李发消息，公钥为小李的公钥(n &amp; e), 私钥为小李的私钥(n &amp; d).</p><ol><li>小张欲给小李发一个消息M, 他先把M转换为一个大数m &lt; n, 然后用小李的公钥(n &amp; e)把m加密为另一个大数:<br>c = me    mod n</li><li>小李收到小张发来的大数c, 着手解密. 通过自己的私钥(n &amp; d), 得到原来的大数m:<br>m = cd    mod n<br>3.再把m转换为M, 小李即得到小张的原始消息.</li></ol><p>这个过程之所以能通过, 是因为有如下等式:<br>  cd ≡(me)d ≡med    (mod n)</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/program008/article/details/50563944" target="_blank" rel="noopener">编码和加密算法的使用（MD5、Base64、DES、RSA）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对称加密-DES&quot;&gt;&lt;a href=&quot;#对称加密-DES&quot; class=&quot;headerlink&quot; title=&quot;对称加密 - DES&quot;&gt;&lt;/a&gt;对称加密 - DES&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;真正的加密算法，带密钥，加密和解密使用相同的密钥&lt;/li&gt;
&lt;li&gt;对称
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="加密" scheme="http://jiaxf.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="解密" scheme="http://jiaxf.github.io/tags/%E8%A7%A3%E5%AF%86/"/>
    
      <category term="算法" scheme="http://jiaxf.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MD5、SHA1、HMAC、HMAC_SHA1区别</title>
    <link href="http://jiaxf.github.io/2018/05/02/MD5%E3%80%81SHA1%E3%80%81HMAC%E3%80%81HMAC_SHA1/"/>
    <id>http://jiaxf.github.io/2018/05/02/MD5、SHA1、HMAC、HMAC_SHA1/</id>
    <published>2018-05-02T07:43:02.000Z</published>
    <updated>2018-05-03T01:16:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MD5、SHA1、HMAC、HMAC-SHA1区别"><a href="#MD5、SHA1、HMAC、HMAC-SHA1区别" class="headerlink" title="MD5、SHA1、HMAC、HMAC_SHA1区别"></a>MD5、SHA1、HMAC、HMAC_SHA1区别</h1><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>MD5 – message-digest algorithm 5(信息-摘要算法)缩写，是一种不可逆的加密算法，对任何字符串都可以加密成一段唯一的固定长度的代码。可以是128位。<br>MD5码可以唯一地代码原信息的特征，通常用于密码的加密存储，数字签名，文件完整性验证等。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * MD5加密  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptMD5(<span class="keyword">byte</span> [] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  MessageDigest md5 = MessageDigest.getInstance(KEY_MD5);</span><br><span class="line">  md5.update(data);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">return</span> md5.<span class="title">digest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h2><p>SHA(Secure Hash Algorithm,安全散列算法)，较MD5更安全。<br>SHA1是由NISTNSA设计，对长度小于264的输入，产生长度为160bit的散列值，可穷举性(brute-force<br>  )更好。SHA-1是由美国标准技术局（NIST）颁布的国家标准，是一种应用最为广泛的Hash函数算法，也是<br>  目前最先进的加密技术，被政府部门和私营业主用来处理敏感信息。也常用于验证文件有没有被篡改。</p>  <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptSHA(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  MessageDigest sha = MessageDigest.getInstance(KEY_SHA);</span><br><span class="line">  sha.update(data);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">return</span> sha.<span class="title">digest</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HMAC-SHA1"><a href="#HMAC-SHA1" class="headerlink" title="HMAC_SHA1"></a>HMAC_SHA1</h2><p>HMAC是密钥相关的哈希运算消息认证码(Hash-based Message Authentication Code, 散列消息鉴别码),HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生产一个消息摘要作为输出。消息鉴别码实现鉴别的原理是，<br>用公开函数和密钥产生一个固定长度的值作为认证标识，用这个标识鉴别消息的完整性。使用一个密钥生成一个<br>固定大小的小数据块，即MAC,并将其加入到消息中，然后传输。接收方利用与发送方共享的密钥进行鉴别认证等。</p><p>HMAC_SHA1需要一个密钥，而SHA1不需要。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 初始化HMAC密钥  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">initMacKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  Keygenerator keyGenerator = KeyGenerator.getInstance(KEY_MAC);</span><br><span class="line"></span><br><span class="line">  SecretKey secretKey = keyGenerator.geterateKey();</span><br><span class="line">  <span class="keyword">return</span> encryptBASE64(secretKey.getEncoded());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * HMAC加密  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptHMAC(<span class="keyword">byte</span>[] data, String key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(decryptBASE64(key), KEY_MAC);</span><br><span class="line">  Mac mac = Mac.getInstance(secretKey.getAlgorithm());</span><br><span class="line">  mac.init(secretKey);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">return</span> mac.<span class="title">doFinal</span><span class="params">(data)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CRC"><a href="#CRC" class="headerlink" title="CRC"></a>CRC</h2><p>CRC的全称为CyclicRedundancyCheck，中文名称为循环冗余校验。它是一类重要的线性分组码，编码和解码方法<br>简单，检错和纠错能力强，在通信领域广泛地用于实现差错控制。</p><h2 id="BASE64"><a href="#BASE64" class="headerlink" title="BASE64"></a>BASE64</h2><p>按照RFC2045的定义，Base64被定义为：Base64内容传送编码被设计用来把任意序列的8位字节描述为一种<br>不易被人直接识别的形式。（The Base64 Content-Transfer-Encoding is designed to represent<br> brbitrary sequences of octets in a form that need not be humamly readable.）</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>BASE64解密  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*   </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@param key  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@return  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@throws Exception  </span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span></span><br><span class="line">public <span class="keyword">static</span> byte[] decryptBASE64(<span class="built_in">String</span> key) throws Exception &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Decoder()).decodeBuffer(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/**  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>BASE64加密  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">*   </span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@param key  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@return  </span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">* </span>@throws Exception  </span></span></span><br><span class="line"><span class="comment"><span class="markdown">*/</span></span>    </span><br><span class="line">public <span class="keyword">static</span> <span class="built_in">String</span> encryptBASE64(byte[] key) throws Exception &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Encoder()).encodeBuffer(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##　hash算法的作用</p><ul><li><ol><li>文件校验</li></ol></li></ul><p>MD5Hash算法的“数字指纹”，使它成为目前应用最广泛的一种文件完整性校验和（Checksum）算法，不少Unix<br>系统有提供计算md5checksum的命令。</p><ul><li><ol start="2"><li>数字签名</li></ol></li></ul><p>Hash算法也是现代密码体系中的一个重要组成部分，由于非对称算法的运算速度较慢，所以在数字签名协议中，<br>单项散列函数扮演了一个重要的角色。对Hash值，又称”数字摘要”进行数字签名，在统计上可以任务与对文件<br>本身进行数字签名是等效的。</p><ul><li><ol start="3"><li>鉴权协议</li></ol></li></ul><p><em>完整代码</em></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;    </span><br><span class="line"><span class="keyword">import</span> javax.crypto.Mac;    </span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;    </span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 基础加密组件  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jiaxf  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0  </span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coder</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_SHA = <span class="string">"SHA"</span>;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MD5 = <span class="string">"MD5"</span>;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * MAC算法可选以下多种算法  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;  </span></span><br><span class="line"><span class="comment">     * HmacMD5   </span></span><br><span class="line"><span class="comment">     * HmacSHA1   </span></span><br><span class="line"><span class="comment">     * HmacSHA256   </span></span><br><span class="line"><span class="comment">     * HmacSHA384   </span></span><br><span class="line"><span class="comment">     * HmacSHA512  </span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MAC = <span class="string">"HmacMD5"</span>;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * BASE64解密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptBASE64(String key) <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Decoder()).decodeBuffer(key);    </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * BASE64加密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">encryptBASE64</span><span class="params">(<span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Encoder()).encodeBuffer(key);    </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * MD5加密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptMD5(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line"></span><br><span class="line">        MessageDigest md5 = MessageDigest.getInstance(KEY_MD5);    </span><br><span class="line">        md5.update(data);    </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> md5.<span class="title">digest</span><span class="params">()</span></span>;    </span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * SHA加密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptSHA(<span class="keyword">byte</span>[] data) <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line"></span><br><span class="line">        MessageDigest sha = MessageDigest.getInstance(KEY_SHA);    </span><br><span class="line">        sha.update(data);    </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> sha.<span class="title">digest</span><span class="params">()</span></span>;    </span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 初始化HMAC密钥  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">initMacKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;    </span><br><span class="line">        KeyGenerator keyGenerator = KeyGenerator.getInstance(KEY_MAC);    </span><br><span class="line"></span><br><span class="line">        SecretKey secretKey = keyGenerator.generateKey();    </span><br><span class="line">        <span class="keyword">return</span> encryptBASE64(secretKey.getEncoded());    </span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * HMAC加密  </span></span><br><span class="line"><span class="comment">     *   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encryptHMAC(<span class="keyword">byte</span>[] data, String key) <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line"></span><br><span class="line">        SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(decryptBASE64(key), KEY_MAC);    </span><br><span class="line">        Mac mac = Mac.getInstance(secretKey.getAlgorithm());    </span><br><span class="line">        mac.init(secretKey);    </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">return</span> mac.<span class="title">doFinal</span><span class="params">(data)</span></span>;    </span><br><span class="line"></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>测试类</em></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> *   </span></span><br><span class="line"><span class="comment"> * @author jiaxf</span></span><br><span class="line"><span class="comment"> * @version 1.0  </span></span><br><span class="line"><span class="comment"> * @since 1.0  </span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line"><span class="keyword">public</span> class CoderTest &#123;    </span><br><span class="line"></span><br><span class="line">    @Test    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> test() <span class="keyword">throws</span> Exception &#123;    </span><br><span class="line">        <span class="keyword">String</span> inputStr = <span class="string">"简单加密"</span>;    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"原文:/n"</span> + inputStr);    </span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] inputData = inputStr.getBytes();    </span><br><span class="line">        <span class="keyword">String</span> code = Coder.encryptBASE64(inputData);    </span><br><span class="line"></span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"BASE64加密后:/n"</span> + code);    </span><br><span class="line"></span><br><span class="line">        <span class="built_in">byte</span>[] output = Coder.decryptBASE64(code);    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> outputStr = <span class="keyword">new</span> <span class="keyword">String</span>(output);    </span><br><span class="line"></span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"BASE64解密后:/n"</span> + outputStr);    </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证BASE64加密解密一致性    </span></span><br><span class="line">        assertEquals(inputStr, outputStr);    </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证MD5对于同一内容加密是否一致    </span></span><br><span class="line">        assertArrayEquals(Coder.encryptMD5(inputData), Coder    </span><br><span class="line">                .encryptMD5(inputData));    </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证SHA对于同一内容加密是否一致    </span></span><br><span class="line">        assertArrayEquals(Coder.encryptSHA(inputData), Coder    </span><br><span class="line">                .encryptSHA(inputData));    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">key</span> = Coder.initMacKey();    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"Mac密钥:/n"</span> + <span class="built_in">key</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证HMAC对于同一内容，同一密钥加密是否一致    </span></span><br><span class="line">        assertArrayEquals(Coder.encryptHMAC(inputData, <span class="built_in">key</span>), Coder.encryptHMAC(    </span><br><span class="line">                inputData, <span class="built_in">key</span>));    </span><br><span class="line"></span><br><span class="line">        BigInteger md5 = <span class="keyword">new</span> BigInteger(Coder.encryptMD5(inputData));    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"MD5:/n"</span> + md5.toString(<span class="number">16</span>));    </span><br><span class="line"></span><br><span class="line">        BigInteger sha = <span class="keyword">new</span> BigInteger(Coder.encryptSHA(inputData));    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"SHA:/n"</span> + sha.toString(<span class="number">32</span>));    </span><br><span class="line"></span><br><span class="line">        BigInteger mac = <span class="keyword">new</span> BigInteger(Coder.encryptHMAC(inputData, inputStr));    </span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"HMAC:/n"</span> + mac.toString(<span class="number">16</span>));    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/lplj717/article/details/51828692" target="_blank" rel="noopener">加密算法中BASE64、MD5、SHA、HMAC等之间的区别</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MD5、SHA1、HMAC、HMAC-SHA1区别&quot;&gt;&lt;a href=&quot;#MD5、SHA1、HMAC、HMAC-SHA1区别&quot; class=&quot;headerlink&quot; title=&quot;MD5、SHA1、HMAC、HMAC_SHA1区别&quot;&gt;&lt;/a&gt;MD5、SHA1、HM
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="加密" scheme="http://jiaxf.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="解密" scheme="http://jiaxf.github.io/tags/%E8%A7%A3%E5%AF%86/"/>
    
      <category term="Base64" scheme="http://jiaxf.github.io/tags/Base64/"/>
    
      <category term="md5" scheme="http://jiaxf.github.io/tags/md5/"/>
    
      <category term="算法" scheme="http://jiaxf.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>2018-05-02-Node.js10和npm6发布</title>
    <link href="http://jiaxf.github.io/2018/05/02/2018-05-02-Node.js10%E5%92%8Cnpm6%E5%8F%91%E5%B8%83/"/>
    <id>http://jiaxf.github.io/2018/05/02/2018-05-02-Node.js10和npm6发布/</id>
    <published>2018-05-02T00:54:19.000Z</published>
    <updated>2018-05-02T02:05:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Node-js10及npm6发布"><a href="#Node-js10及npm6发布" class="headerlink" title="Node.js10及npm6发布"></a>Node.js10及npm6发布</h1><p>Node.js 发布最新版本 Node.js 10.0.0，同时，npm 6 也随之发布。据了解，今年 10 月，Node.js 10.x 将成为长期支持版本，该版本专注于稳定性、扩展支持以及为各类应用提供一个可靠稳定的平台。</p><p>Node.js 10.x 将是第一个支持 OpenSSL 1.1.0 的版本。该版本配备了 Google V8 6.6 JavaScript 引擎，性能会增强，错误处理和跟踪诊断能力也将会提升。<br>此版本还将推出 Node.js API（N-API），N-API 是一个稳定的 API 模块，它独立于 V8，这样就不会阻碍模块在不重新编译的情况下运行新版本的 Node.js。</p><h2 id="关于-N-API"><a href="#关于-N-API" class="headerlink" title="关于 N-API"></a>关于 N-API</h2><p>N-API 提高了 Node.js 的 ABI 稳定性，有助于模块的部署和维护。<br>Node.js 10 将 ABI 的稳定模块 API（N-API）作为官方支持的 API 层。N-API 旨在解决当今生态系统中的两个问题，一是降低本地模块的维护成本，二是在升级 Node.js 版本时，降低模块使用者之间的摩擦。</p><p>升级到最新的 Node.js 版本后，Node.js 版本之间的模块损坏将不再成为 N-API 模块的问题，这对于开发者和消费者来说都是双赢的。为了提高此功能的实用性，N-API 也将被移植到 Node.js 8.x 和 6.x 中，还包括下一版本。</p><h2 id="现代化的加密"><a href="#现代化的加密" class="headerlink" title="现代化的加密"></a>现代化的加密</h2><p>Node.js 10.x 是第一代支持 OpenSSL 1.1.0 的版本，Node.js 现在能够充分利用由 OpenSSL 团队在代码质量、清理和现代化上提供的服务。</p><p>Node.js 现在可以将其加密支持扩展到对称加密算法 ChaCha20 和身份认证算法 Poly1305 上，它们共同构成了现代加密系统，增加了 Node.js 使用“ AEAD ”密码套件的可能性。<br>伴随着最近 TLS 1.3 规范的完成，网络安全迈出了一大步，OpenSSL 团队正准备发布 1.1.1 版本，其主要特性是支持 TLS 1.3，而支持 OpenSSL 1.1.1 的 Node.js 10 将可以轻松实现 API 和 ABI 的稳定升级。</p><h2 id="错误处理能力提升"><a href="#错误处理能力提升" class="headerlink" title="错误处理能力提升"></a>错误处理能力提升</h2><p>Node.js 10.x 在利用错误代码以缓解持续性的错误检验上取得了很好的进展。过去，更改文本里的错误都需要等到 semver 主版本更新后，这也意味着只有等到下一个主版本的 Node.js 才能对错误进行更改，而 Node.js 主版本每六个月发布一次。使用错误代码将可以在不中断应用程序的情况下更新文本。</p><h2 id="性能改进"><a href="#性能改进" class="headerlink" title="性能改进"></a>性能改进</h2><p>最新的 V8 在 Promise、异步生成器和阵列性能（array performance）有了很大的改进，Promise 和异步函数的改进消除了异步函数和 desugarded promise 链之间的隔阂，这有利于提高使用 Node.js 构建的应用程序性能。</p><h2 id="诊断跟踪和Post-mortem"><a href="#诊断跟踪和Post-mortem" class="headerlink" title="诊断跟踪和Post mortem"></a>诊断跟踪和Post mortem</h2><p>在 Node.js 10 中，新的跟踪事件由 performance API 发布，提高了代码的透明性。此外，它还将引入了新的 API，允许用户在代码运行时按需启用和禁用跟踪事件，从而提高了运行时诊断 Node.js 应用程序问题的灵活性。</p><h2 id="Node-js-10-x引入npm6"><a href="#Node-js-10-x引入npm6" class="headerlink" title="Node.js 10.x引入npm6"></a>Node.js 10.x引入npm6</h2><p>Node.js 10.0.0 附带 npm 5.7.x， 但是，预计在 Node.js 10.x 生命周期的早期会更新为 npm 6。第 6 版将侧重于性能、稳定性和安全性，与先前版本的 npm 相比，性能提高 1700％。<br>以后，如果使用具有已知安全问题的代码，npm Registry 的用户会收到警告通知。npm 将自动检查针对 NSP 数据库的安装请求，并在代码包含漏洞时发出警告通知。</p><p>有关npm6的更多信息，可访问<a href="https://go.npm.me/npm6" target="_blank" rel="noopener">https://go.npm.me/npm6</a></p><blockquote><p>注意： Node.js 10 版本可能还会发生其他变动，可参考<a href="https://medium.com/the-node-js-collection/the-node-js-project-introduces-latest-release-line-node-js-10-x-bf07abfa9076" target="_blank" rel="noopener">https://medium.com/the-node-js-collection/the-node-js-project-introduces-latest-release-line-node-js-10-x-bf07abfa9076</a></p></blockquote><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ol><li><a href="https://nodejs.org/en/blog/release/v10.0.0/" target="_blank" rel="noopener">Node.js 10文档</a></li><li><a href="http://nodejs.cn/api/" target="_blank" rel="noopener">Node.js API 中文文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Node-js10及npm6发布&quot;&gt;&lt;a href=&quot;#Node-js10及npm6发布&quot; class=&quot;headerlink&quot; title=&quot;Node.js10及npm6发布&quot;&gt;&lt;/a&gt;Node.js10及npm6发布&lt;/h1&gt;&lt;p&gt;Node.js 发布最新版本
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="node" scheme="http://jiaxf.github.io/tags/node/"/>
    
      <category term="npm" scheme="http://jiaxf.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>PWA简介</title>
    <link href="http://jiaxf.github.io/2018/04/25/PWA%E7%AE%80%E4%BB%8B/"/>
    <id>http://jiaxf.github.io/2018/04/25/PWA简介/</id>
    <published>2018-04-25T01:06:57.000Z</published>
    <updated>2018-04-25T03:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWA简介"><a href="#PWA简介" class="headerlink" title="PWA简介"></a>PWA简介</h1><p>Progressive Web Apps，简称PWA.<br>渐进式提升Web App原生体验的技术方案，能给用户原生应用的体验。</p><p>PWA能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA本质上是WebApp，借助一些新技术也具备NativeApp的一些特性，兼具WebApp和NativeApp的优点。</p><h2 id="PWA具有的一些特点及特性"><a href="#PWA具有的一些特点及特性" class="headerlink" title="PWA具有的一些特点及特性"></a>PWA具有的一些特点及特性</h2><p>PWA特点：</p><ul><li>可靠 即使在不稳定的网络环境下，也能瞬间加载并展现</li><li>体验 快速响应，并且有平滑的动画响应用户的操作</li><li>粘性 像设备上的原生应用，具有沉浸式饿得用户体验，用户可以添加到桌面</li></ul><p>PWA具有特性</p><ul><li>渐进式 - Progressive 适用于所有浏览器，因为它以渐进式增强作为宗旨开发</li><li>连接无关性 - 能够借助Service Worker在离线或这网络较差情况下正常访问</li><li>类似应用 - 由于在App Shell模型基础上开发，因为应具有NativeApp的交互和导航，给用户NativeApp的体验</li><li>持续更新 - 始终是最新的，无版本和更新问题</li><li>安全 - 通过HTTPS协议提供服务，防止窥探和确保内容不被篡改</li><li>可索引 - 应用清单文件和ServiceWorker可以让搜索引擎引到，从而将其识别为应用</li><li>粘性 - 通过推送离线通知等，可以让用户回流</li><li>免安装 - 用户可以添加常用的webapp到桌面，免去应用商店下载的麻烦</li><li><p>可链接 - 通过链接即可分享内容，无需下载安装</p></li><li><p>Web App Manifest(主屏图标)</p></li><li>ServiceWorker(离线可用)</li><li>Notification API &amp; Push API(离线通知)</li><li>App Shell &amp; App Skeleton设计模型</li><li>PRPL Pattern(Push, Render, Pre-cache, Lazy-load)</li><li>安全HTTPS</li><li>交互 &amp; 动画</li><li>PWA通常是SPA 通常采用AppShell设计模型</li></ul><h2 id="ServiceWorker"><a href="#ServiceWorker" class="headerlink" title="ServiceWorker"></a>ServiceWorker</h2><h2 id="什么是Service-Worker"><a href="#什么是Service-Worker" class="headerlink" title="什么是Service Worker"></a>什么是Service Worker</h2><p>W3C 组织早在 2014 年 5 月就提出过 Service Worker 这样的一个 HTML5 API ，主要用来做持久的离线缓存。<br>浏览器中的 javaScript 都是运行在一个单一主线程上的，在同一时间内只能做一件事情。随着 Web 业务不断复杂，我们逐渐在 js 中加了很多耗资源、耗时间的复杂运算过程，这些过程导致的性能问题在 WebApp 的复杂化过程中更加凸显出来。</p><p>W3C 组织早早的洞察到了这些问题可能会造成的影响，这个时候有个叫 Web Worker 的 API 被造出来了，这个 API 的唯一目的就是解放主线程，Web Worker 是脱离在主线程之外的，将一些复杂的耗时的活交给它干，完成后通过 postMessage 方法告诉主线程，而主线程通过 onMessage 方法得到 Web Worker 的结果反馈。</p><p>Service Worker 在 Web Worker 的基础上加上了持久离线缓存能力。<br>Service Worker 有以下功能和特性：</p><ul><li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li><li>一旦被 install，就永远存在，除非被 uninstall</li><li>需要的时候可以直接唤醒，不需要的时候自动睡眠（有效利用资源，此处有坑）</li><li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li><li>离线内容开发者可控</li><li>能向客户端推送消息</li><li>不能直接操作 DOM</li><li>出于安全的考虑，必须在 HTTPS 环境下才能工作</li><li>异步实现，内部大都是通过 Promise 实现</li></ul><h2 id="Service-Worker生命周期"><a href="#Service-Worker生命周期" class="headerlink" title="Service Worker生命周期"></a>Service Worker生命周期</h2><p>MDN 给出了详细的 Service Worker 生命周期图：<br><img src="/images/sw-lifecycle.png" alt=""></p><p>生命周期状态：</p><ul><li><p>安装( installing )：这个状态发生在 Service Worker 注册之后，表示开始安装，触发 install 事件回调指定一些静态资源进行离线缓存。</p><blockquote><p>install 事件回调中有两个方法：</p><ul><li>event.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。</li><li>self.skipWaiting()：self 是当前 context 的 global 变量，执行该方法表示强制当前处在 waiting 状态的 Service Worker 进入 activate 状态。</li><li>安装后( installed )：Service Worker 已经完成了安装，并且等待其他的 Service Worker 线程被关闭。</li><li>激活( activating )：在这个状态下没有被其他的 Service Worker 控制的客户端，允许当前的 worker 完成安装，并且清除了其他的 worker 以及关联缓存的旧缓存资源，等待新的 Service Worker 线程被激活。<br>activate 回调中有两个方法：</li><li>event.waitUntil()：传入一个 Promise 为参数，等到该 Promise 为 resolve 状态为止。</li><li>self.clients.claim()：在 activate 事件回调中执行该方法表示取得页面的控制权, 这样之后打开页面都会使用版本更新的缓存。旧的 Service Worker 脚本不再控制着页面，之后会被停止。</li><li>激活后( activated )：在这个状态会处理 activate 事件回调 (提供了更新缓存策略的机会)。并可以处理功能性的事件 fetch (请求)、sync (后台同步)、push (推送)。</li><li>废弃状态 ( redundant )：这个状态表示一个 Service Worker 的生命周期结束。</li></ul></blockquote><blockquote><p>进入废弃 (redundant) 状态的原因可能为这几种：</p><ul><li>安装 (install) 失败</li><li>激活 (activating) 失败</li><li>新版本的 Service Worker 替换了它并成为激活状态</li></ul></blockquote></li></ul><h2 id="Service-Worker支持的事件"><a href="#Service-Worker支持的事件" class="headerlink" title="Service Worker支持的事件"></a>Service Worker支持的事件</h2><p>MDN 也列出了 Service Worker 所有支持的事件：<br><img src="/images/sw-events.png" alt=""></p><h2 id="怎么使用Service-worker"><a href="#怎么使用Service-worker" class="headerlink" title="怎么使用Service worker"></a>怎么使用Service worker</h2><ol><li>注册</li></ol><p>安装serviceWoker ,通常需要在js主线程（常规页面的js）注册SeriveWorker来启动安装，这个过程将会通知浏览器我们的Service Worker线程的javascript文件在什么地方呆着。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      navigator.serviceWorker.register(<span class="string">'/sw.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'/'</span>&#125;)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">registration</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 注册成功</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'ServiceWoker registration successful with scope:'</span>, registration.scope);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 注册失败</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'ServiceWoker registration failed:'</span>, err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注：查看是否注册成功，可以用chrome浏览器，输入 <code>chrome://inspect/#service-workers</code></em></p><ol start="2"><li>安装</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 service worker的install事件</span></span><br><span class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 如果监听到了service worker 已经安装成功，就会调用event.waitUntil回调函数</span></span><br><span class="line">  event.waitUntil(</span><br><span class="line">      <span class="comment">// 安装成功后操作 CacheStorage缓存，使用之前需要先通过caches.open()打开对应缓存空间</span></span><br><span class="line">      cache.open(<span class="string">'my-test-cache-v1'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(cache)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过cache缓存对象的addAll方法添加precache缓存</span></span><br><span class="line">        <span class="keyword">return</span> cache.addAll([</span><br><span class="line">          <span class="string">'/'</span>,</span><br><span class="line">          <span class="string">'/index.html'</span>,</span><br><span class="line">          <span class="string">'/main.css'</span>,</span><br><span class="line">          <span class="string">'/main.js'</span>,</span><br><span class="line">          <span class="string">'/image.jpg'</span></span><br><span class="line">        ])</span><br><span class="line">      &#125;);</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>自定义请求响应</li></ol><p>任何被Service Worker控制的资源被请求时，都会触发fetch事件，这些资源包括了指定的scope内的html文档，和这些html文档内引用的其他任何资源。<br>实现思路: Serivice Worker代理服务，给Service Woker添加一个fetch的事件监听器，接着调用event上的<code>respondWith()</code>方法来劫持HTTP响应，然后来更新他们。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">this.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">   event.respondWith(</span><br><span class="line">      caches.match(event.request).then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 来来来，代理可以搞一些代理的事情</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果Service Worker有自己的返回，就直接返回，减少一次http请求</span></span><br><span class="line">          <span class="keyword">if</span>(response)&#123;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 如果service worker没有返回，那就得直接请求真实远程服务</span></span><br><span class="line">          <span class="keyword">var</span> request = event.request.<span class="keyword">clone</span>(); <span class="comment">//把原始请求拷过来</span></span><br><span class="line">          <span class="keyword">return</span> fetch(request).then(<span class="function"><span class="keyword">function</span><span class="params">(httpRes)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// http请求的返回已被抓到，可以处置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求失败了，直接返回失败的结果就好</span></span><br><span class="line">            <span class="keyword">if</span>(!httpRes ||  httpRes.status !== <span class="number">200</span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> httpRes;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求成功的话，将请求缓存起来</span></span><br><span class="line">            <span class="keyword">var</span> responseClone = httpRes.<span class="keyword">clone</span>();</span><br><span class="line">            cache.open(<span class="string">'my-test-cache-v1'</span>).then(<span class="function"><span class="keyword">function</span> <span class="params">(cache)</span></span>&#123;</span><br><span class="line">              cache.put(event.request, responseClone);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> httpRes;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">   );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li><p>Service Worker版本更新</p><ul><li><p>自动更新所有页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装阶段跳过等待，直接进入active</span></span><br><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">  event.waitUntil(<span class="keyword">self</span>.skipWaiting());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">  event.waitUntil(</span><br><span class="line">      Promise.all([</span><br><span class="line">        <span class="comment">// 更新客户端</span></span><br><span class="line">        <span class="keyword">self</span>.clients.claim(),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清理旧版本</span></span><br><span class="line">        caches.keys().then(<span class="function"><span class="keyword">function</span><span class="params">(cacheList)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Promise.all(</span><br><span class="line">                cacheList.map(<span class="function"><span class="keyword">function</span><span class="params">(cacheName)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(cacheName ！== <span class="string">'my-test-cache-v1'</span>)&#123;</span><br><span class="line">                      <span class="keyword">return</span> caches.delete(cacheName)；</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            );</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">      ])</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>手动更新Service Worker</p></li></ul></li></ol><p>在页面中可以手动借助<code>Registration.update()</code>更新。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var version = <span class="string">'1.0.1'</span>;</span><br><span class="line">navigator.serviceWorker.register(<span class="string">'/sw.js'</span>).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(reg)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(localStorage.getItem(<span class="string">'sw_version'</span>) !== version)&#123;</span><br><span class="line">    reg.update().<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;</span><br><span class="line">      localStorage.setItem(<span class="string">'sw_version'</span>, version)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>debug时更新</p><p>Service Worker被载入后立即激活可以保证每次<code>/sw.js</code>为最新。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">self</span>.skipWaiting();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>意外惊喜</p></li></ul><p>Service Worker的特殊之处除了由浏览器触发更新之外，还应用了特殊的缓存策略：如果该文件已24小时没有更新，当update触发时会强制更新。意外着最坏情况下Service Worker会每天更新一次。</p><p>ServiceWorker如何更新？</p><ul><li>浏览器每天至少更新一次ServiceWorker</li><li>注册新的Service Worker,带上版本号，如: /sw.js?t=201709091920</li><li>手动更新resistration.update()</li><li>逐字节对比新的sw文件和旧的sw，有区别才更新</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line">navigator.serviceWoker.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.data === <span class="string">'sw.update'</span>)&#123;</span><br><span class="line">    <span class="comment">//提醒用户刷新</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sw.js</span></span><br><span class="line"><span class="keyword">self</span>.clients.matchAll().then(<span class="function"><span class="keyword">function</span><span class="params">(clients)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(clients &amp;&amp; clients.length)&#123;</span><br><span class="line">    clients.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(client)</span></span>&#123;</span><br><span class="line">      client.postMessage(<span class="string">'sw.update'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>PWA SEO可以服务器端渲染Server Side Rendering(SSR).<br>SSR中如何正确使用Service Worker</p><p><img src="/images/ssr.jpg" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://lavas.baidu.com/" target="_blank" rel="noopener">LAVAS百度</a></li><li><a href="/works/PWA.pdf">个人分享PWA简介</a></li><li><a href="https://static001.geekbang.org/con/28/pdf/2706484488/file/QCon2018-%E3%80%8ALavas%EF%BC%9APWA%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E3%80%8B-%E5%BD%AD%E6%98%9F.pdf" target="_blank" rel="noopener">QCon2018-《Lavas：PWA的探索与最佳实践》-彭星</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PWA简介&quot;&gt;&lt;a href=&quot;#PWA简介&quot; class=&quot;headerlink&quot; title=&quot;PWA简介&quot;&gt;&lt;/a&gt;PWA简介&lt;/h1&gt;&lt;p&gt;Progressive Web Apps，简称PWA.&lt;br&gt;渐进式提升Web App原生体验的技术方案，能给用户原
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>区块链的几个基本概念</title>
    <link href="http://jiaxf.github.io/2018/04/20/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://jiaxf.github.io/2018/04/20/区块链的几个基本概念/</id>
    <published>2018-04-20T06:36:45.000Z</published>
    <updated>2018-04-25T03:33:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区块链的几个基本概念"><a href="#区块链的几个基本概念" class="headerlink" title="区块链的几个基本概念"></a>区块链的几个基本概念</h1><p><code>区块链</code>（blockchain）本质上是一种特殊的分布式数据库。</p><p><img src="/img/bg2017122701.jpg" alt=""></p><p>首先，区块链的主要作用是储存信息。任何需要保存的信息，都可以写入区块链，也可以从里面读取，所以它是数据库。</p><p>其次，任何人都可以架设服务器，加入区块链网络，成为一个节点。区块链的世界里面，没有中心节点，每个节点都是平等的，都保存着整个数据库。你可以向任何一个节点，写入/读取数据，因为所有节点最后都会同步，保证区块链一致。</p><p>区块链是去中心化的，没有管理员，是彻底无中心的。</p><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块链是由一个个<code>区块</code>（block）组成。区块很像数据库的记录，每次写入数据，就是创建一个区块。</p><p>每个区块包含两个部分</p><ul><li>区块头(Head): 记录当前区块的特征值（当前时间、上一个区块的Hash、区块体的Hash）</li><li>区块体（body): 实际数据</li></ul><blockquote><p>两个重要推论：</p><p>推论1: 每个区块的哈希都是不一样的，可以通过哈希标识区块。</p><p>推论2：如果区块的内容变了，它的哈希一定会改变。</p></blockquote><h2 id="采矿"><a href="#采矿" class="headerlink" title="采矿"></a>采矿</h2><p>添加新区块需要一定的计算，只有通过极其大量的计算，才能得到当前区块的有效哈希，从而把新区块添加到区块链。<br>这个过程就叫做采矿（mining),因为计算有效哈希的难度，好比在全世界的沙子里面，找到一粒符合条件的沙子。<br>计算哈希的机器就叫做矿机，操作矿机的人就叫做矿工。</p><h2 id="难度系数"><a href="#难度系数" class="headerlink" title="难度系数"></a>难度系数</h2><p>区块头包含一个难度（difficulty),这个值决定了计算哈希的难度。<br>区块链协议规定，使用一个常量除以难度系数，可以得到目标值（target）。难度系数越大，目标值就越小。</p><h3 id="区块链的适用场景"><a href="#区块链的适用场景" class="headerlink" title="区块链的适用场景"></a>区块链的适用场景</h3><ol><li>不存在所有成员都信任的管理当局</li><li>希尔的数据不要求实时使用</li><li>挖矿的收益能弥补本身成本</li></ol><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>加密和解密需要两把钥匙：一把公钥和一把私钥。公钥是公开的，任何人都可以获取。私钥是保密的，只有拥有者才能使用。<br>他人使用你的公钥加密信息，然后发送给你，你用私钥解密，取出信息。反过来，你也可以用私钥加密信息，别人用你的公钥<br>解开，从而证明这个信息是你发的，且未被篡改，这就叫数字签名。</p><h3 id="比特币特点"><a href="#比特币特点" class="headerlink" title="比特币特点"></a>比特币特点</h3><ol><li>不会轻易被偷走</li><li>无法伪造</li><li>无法大批生成</li></ol><h3 id="区块链的作用"><a href="#区块链的作用" class="headerlink" title="区块链的作用"></a>区块链的作用</h3><p>区块链就是一个数据库，记载了所有的交易，用作中央记账系统，分布在无数个节点之上。</p><blockquote><p>数字货币的本质就是一条可信的数据库记录。</p></blockquote><p>比特币协议规定，分支点之后最先达到6个区块的那个分支被认定为正式的区块链，其他分支都被放弃。由于区块<br>的生成速度由计算能力决定，所以到底哪一笔交易最后会被写入区块链，完全由它所在的分支能吸引多少计算能力决定。<br>隐藏的逻辑是，如果大多数人（计算能力）选择相信某一笔交易，那么它就应该是真的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;区块链的几个基本概念&quot;&gt;&lt;a href=&quot;#区块链的几个基本概念&quot; class=&quot;headerlink&quot; title=&quot;区块链的几个基本概念&quot;&gt;&lt;/a&gt;区块链的几个基本概念&lt;/h1&gt;&lt;p&gt;&lt;code&gt;区块链&lt;/code&gt;（blockchain）本质上是一种特殊的分
      
    
    </summary>
    
    
      <category term="技术" scheme="http://jiaxf.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="区块链" scheme="http://jiaxf.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="http://jiaxf.github.io/2018/04/19/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://jiaxf.github.io/2018/04/19/函数式编程/</id>
    <published>2018-04-19T06:19:50.000Z</published>
    <updated>2018-04-19T06:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="Javascript的箭头函数"><a href="#Javascript的箭头函数" class="headerlink" title="Javascript的箭头函数"></a>Javascript的箭头函数</h2><p><code>ECMAScript2015</code>引入箭头表达式。箭头函数其实是匿名函数，基本语法如下：</p><blockquote><p>(param1, param2, …, paramN) =&gt; { statements }</p><p>(param1, param2, …, paramN) =&gt; expression</p><p>   // 等于 :  =&gt; { return expression; }</p><p>   // 只有一个参数时,括号才可以不加:</p><p>   (singleParam) =&gt; { statements }</p><p>   singleParam =&gt; { statements }</p><p>   //如果没有参数,就一定要加括号:</p><p>   () =&gt; { statements }</p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> simple = <span class="function"><span class="params">a</span> =&gt;</span> a &gt; <span class="number">15</span> ? <span class="number">15</span> : a;</span><br><span class="line">simple(<span class="number">16</span>);   <span class="comment">// 15</span></span><br><span class="line">simple(<span class="number">10</span>);   <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> max = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">23</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);  <span class="comment">//66</span></span><br><span class="line"><span class="keyword">var</span> even = arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> v % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// [6, 0, 18]</span></span><br><span class="line"><span class="keyword">var</span> double = arr.map(<span class="function"><span class="params">v</span> =&gt;</span> v * <span class="number">2</span>);       <span class="comment">// [10, 12, 26, 0, 36, 46]</span></span><br></pre></td></tr></table></figure><p>有些时候，某些函数在声明的时候就是调用的时候，尤其是函数式编程中，一个函数还对外返回函数的时候。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakePowerFn</span>(<span class="params">power</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">PowerFn</span>(<span class="params">base</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(base, power);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">power3 = MakePowerFn(<span class="number">3</span>); <span class="comment">// 制造一个X的3次方的函数</span></span><br><span class="line">power2 = MakePowerFn(<span class="number">2</span>); <span class="comment">// 制造一个X的2次方的函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(power3(<span class="number">10</span>));  <span class="comment">// 10的3次方 1000</span></span><br><span class="line"><span class="built_in">console</span>.log(power2(<span class="number">10</span>));  <span class="comment">// 10的2次方 100</span></span><br></pre></td></tr></table></figure><p>用箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MakePowerFn = <span class="function"><span class="params">power</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">base</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(base, power);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化</span></span><br><span class="line">MakePowerFn = <span class="function"><span class="params">power</span> =&gt;</span> base =&gt; <span class="built_in">Math</span>.pow(base, power)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上括号</span></span><br><span class="line">MakePowerFn = <span class="function">(<span class="params">power</span>) =&gt;</span> (</span><br><span class="line">  (base) =&gt; (<span class="built_in">Math</span>.pow(base, power))</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="匿名函数的递归"><a href="#匿名函数的递归" class="headerlink" title="匿名函数的递归"></a>匿名函数的递归</h2><p>函数式编程立志于用函数表达式来消除有状态的函数，以及for/while循环，所以在函数式编程里不应该用for/while循环，而要改用递归(递归的性能很差，所以，一般用尾递归来做优化，也就是把函数的计算状态当参数一层一层往下传递，这样语言的编译器后解释器就需要用函数栈来帮你保存函数的内部变量的状态了)。</p><p>递归的代码就是函数自己调用自己，比如求阶乘</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">fact</span>(n)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">n</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="type">n</span> * fact(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于匿名函数，可以把匿名函数当成一个参数传给另外一个函数，因为函数的参数有名字，所以就可以调用自己了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function combinator(<span class="function"><span class="keyword">func</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数式的匿名函数</span></span><br><span class="line">（<span class="function"><span class="keyword">func</span>） =&gt; <span class="params">(<span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span></span></span>)</span><br></pre></td></tr></table></figure><p>阶乘代码重构<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">funtion fact(<span class="function"><span class="keyword">func</span>, <span class="title">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">1</span>: n * <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, n-<span class="number">1</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数版</span></span><br><span class="line"><span class="keyword">var</span> fact = (<span class="function"><span class="keyword">func</span>, <span class="title">n</span>) =&gt; <span class="params">(n == <span class="number">0</span> ? <span class="number">1</span> : <span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, n-<span class="number">1</span>)</span></span></span>);</span><br><span class="line">fact(fact, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数体声明时调用自己</span></span><br><span class="line">（<span class="function"><span class="keyword">func</span>, <span class="title">x</span>) =&gt; <span class="title">func</span><span class="params">(<span class="keyword">func</span>, x)</span></span>(</span><br><span class="line">    (<span class="function"><span class="keyword">func</span>, <span class="title">n</span>) =&gt; <span class="params">( n ==<span class="number">0</span> ? <span class="number">1</span> : n * <span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, n-<span class="number">1</span>)</span></span></span>),  <span class="comment">// 第一个调用参数</span></span><br><span class="line">    <span class="number">5</span> <span class="comment">// 第二个调用参数</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="动态高级函数的递归"><a href="#动态高级函数的递归" class="headerlink" title="动态高级函数的递归"></a>动态高级函数的递归</h2><p>递归版高阶函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">HighOrderFact = function(<span class="function"><span class="keyword">func</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> function(n)&#123;</span><br><span class="line">    <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">1</span> : <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span><span class="params">(n-1)</span>;</span></span><br><span class="line"><span class="function">  &#125;;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 需要一个函数做参数，然后返回这个函数的递归版本</span></span><br><span class="line"><span class="function"><span class="title">fact</span> = <span class="title">HighOrderFact</span><span class="params">(HighOrderFact)</span>;</span></span><br><span class="line"><span class="function"><span class="title">fact</span><span class="params">(5)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">HighOrderFact</span><span class="params">(HighOrderFact)</span><span class="params">(5)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fact</span> = <span class="title">function</span><span class="params">(hifunc)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> hifunc(hifunc);</span><br><span class="line">&#125;(</span><br><span class="line">   <span class="comment">// 调用参数是一个函数</span></span><br><span class="line">   function(<span class="function"><span class="keyword">func</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> function(n)&#123;</span><br><span class="line">       <span class="keyword">return</span> n == <span class="number">0</span> ? <span class="number">1</span> : n * <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span><span class="params">(n-1)</span>;</span></span><br><span class="line"><span class="function">     &#125;;</span></span><br><span class="line"><span class="function">   &#125;</span></span><br><span class="line"><span class="function">);</span></span><br><span class="line"><span class="function">// 调用</span></span><br><span class="line"><span class="function"><span class="title">fact</span><span class="params">(5)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 箭头函数重构</span></span><br><span class="line"><span class="function"><span class="title">fact</span> = <span class="params">(highfunc =&gt; highfunc(highfunc)</span>) <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">func</span> =&gt; n =&gt; n == 0 ? 1 : n * <span class="keyword">func</span>(<span class="keyword">func</span>)</span><span class="params">(n-1)</span></span></span><br><span class="line"><span class="function">);</span></span><br></pre></td></tr></table></figure><h2 id="重构之前的程序"><a href="#重构之前的程序" class="headerlink" title="重构之前的程序"></a>重构之前的程序</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 查找数组正常版本</span></span><br><span class="line"> function <span class="built_in">find</span>(x, y) &#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; x.length; i++)&#123;</span><br><span class="line">     <span class="keyword">if</span>(x[i] == y) <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> null;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 干掉for，搞成递归版本</span></span><br><span class="line"> funcion  <span class="built_in">find</span>(x, y, i=<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span>( i &gt;= x.length) <span class="keyword">return</span> null;</span><br><span class="line">   <span class="keyword">if</span>( x[i] == y) <span class="keyword">return</span> i;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">find</span>(x, y, i+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 继续重构 带实参的匿名函数版本</span></span><br><span class="line">((<span class="function"><span class="keyword">func</span>, <span class="title">x</span>, <span class="title">y</span>, <span class="title">i</span>) =&gt; <span class="title">func</span><span class="params">(<span class="keyword">func</span>, x,y i)</span></span>) ( <span class="comment">// 函数体</span></span><br><span class="line">    (<span class="function"><span class="keyword">func</span>, <span class="title">x</span>, <span class="title">y</span>, <span class="title">i</span>=0) =&gt; <span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      i&gt;= x.length ? null :</span></span></span><br><span class="line"><span class="function"><span class="params">        x[i] == y ? i : <span class="keyword">func</span><span class="params">(<span class="keyword">func</span>, x, y, i+<span class="number">1</span>)</span></span></span></span><br><span class="line">      ), <span class="comment">// 第一个调用参数</span></span><br><span class="line">      arr,  <span class="comment">// 第二个调用参数</span></span><br><span class="line">      <span class="number">2</span> <span class="comment">// 第三个调用参数    </span></span><br><span class="line">)</span><br><span class="line"> <span class="comment">// 引入高级函数，去除实参</span></span><br><span class="line"></span><br><span class="line">const <span class="built_in">find</span> = （highfunc =&gt; highfunc(highfunc))(</span><br><span class="line">   <span class="function"><span class="keyword">func</span> =&gt; <span class="params">(x, y, i =<span class="number">0</span> )</span></span> =&gt; (</span><br><span class="line">      i &gt;= x.length ? null :</span><br><span class="line">        x[i] == y ? i : <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">func</span>)</span></span>(x, y, i+<span class="number">1</span>)</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"> ;</span><br></pre></td></tr></table></figure><p>可以参考以下两篇文章</p><ul><li><em><a href="http://mvanier.livejournal.com/2897.html" target="_blank" rel="noopener">《The Y Combinator (Slight Return)》</a></em></li><li><em><a href="https://en.wikipedia.org/wiki/Fixed-point_combinator" target="_blank" rel="noopener">《Wikipedia: Fixed-point combinator》</a></em></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数式编程&quot;&gt;&lt;a href=&quot;#函数式编程&quot; class=&quot;headerlink&quot; title=&quot;函数式编程&quot;&gt;&lt;/a&gt;函数式编程&lt;/h1&gt;&lt;h2 id=&quot;Javascript的箭头函数&quot;&gt;&lt;a href=&quot;#Javascript的箭头函数&quot; class=&quot;he
      
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="函数式编程" scheme="http://jiaxf.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Web Worker study</title>
    <link href="http://jiaxf.github.io/2018/04/19/webWorkers/"/>
    <id>http://jiaxf.github.io/2018/04/19/webWorkers/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h1><p>javaScript属于单线程环境，无法同时运行多个脚本。HTML5提供了WebWorker，为JavaScript引入线程技术。</p><h2 id="Web-Worker简介"><a href="#Web-Worker简介" class="headerlink" title="Web Worker简介"></a>Web Worker简介</h2><p>WebWorker规范定义了在网络应用中生成背景脚本的API。可以通过Web Worker执行线程。例如触发长时间运行的脚本<br>以处理计算密集型任务，同时却不会阻碍UI或其他脚本处理用户互动。</p><p>Woker利用类似线程的消息传递实现并行。</p><h2 id="Web-Worker的类型"><a href="#Web-Worker的类型" class="headerlink" title="Web Worker的类型"></a>Web Worker的类型</h2><ul><li>专用Woker</li><li>共有Woker</li></ul><h3 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h3><p>Web Worker在独立线程中运行，因此，它们执行的代码需要保存在一个单独的文件中。</p><ol><li>创建新的Worker对象</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="type">Woker</span>(<span class="string">'task.js'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>创建Worker后通过调用postMessage() 方法启动</li></ol><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker.postMessage<span class="comment">()</span>; <span class="comment">// start the worker</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="通过消息传递与Worker通信"><a href="#通过消息传递与Worker通信" class="headerlink" title="通过消息传递与Worker通信"></a>通过消息传递与Worker通信</h3><p>Worker与其父网页之间的通信是通过事件模型和postMessage()方法实现。</p><p>postMessage()可以接受字符串或JSON对象作为单个参数，新式浏览器的最新版支持传递JSON对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'doWork.js'</span>);</span><br><span class="line">worker.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Worker said: '</span>, e.data);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">worker.postMessage(<span class="string">'Hello World'</span>); <span class="comment">// send data to our worker</span></span><br></pre></td></tr></table></figure><p>doWork.js(Worker):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">self</span>.postMessage(e.data);</span><br><span class="line">&#125;, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>在主网页中调用postMessage()时，Worker通过定义message事件的onmessage处理程序来实现处理消息。可以在<br>Event.data中访问消息（“Hello World”），postMessage()也是将数据传回主线程的一种方法。</p><p>在主网页和Worker之间传递的消息是复制而不是共享的。系统将对象传递给worker后，会将其序列化，随后在另一端取消<br>序列化。由于网页和Worker并不共享同一实例，因此每次传递时都要进行复制。大部分浏览器通过在任一端上对值进行自动JSON<br>编码/解码来实施此功能。</p><p>一个使用JSON对象传递消息的更复杂的示例。</p><p>主脚本：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"sayHI()"</span>&gt;</span>Say HI<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"unknownCmd()"</span>&gt;</span>Send unknown command<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"stop()"</span>&gt;</span>Stop worker<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">sayHI</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    worker.postMessage(&#123;<span class="string">'cmd'</span>: <span class="string">'start'</span>, <span class="string">'msg'</span>: <span class="string">'Hi'</span>&#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Calling worker.terminate() from this script would also stop the worker.</span></span></span><br><span class="line"><span class="actionscript">    worker.postMessage(&#123;<span class="string">'cmd'</span>: <span class="string">'stop'</span>, <span class="string">'msg'</span>: <span class="string">'Bye'</span>&#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">unknownCmd</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    worker.postMessage(&#123;<span class="string">'cmd'</span>: <span class="string">'foobard'</span>, <span class="string">'msg'</span>: <span class="string">'???'</span>&#125;);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'doWork2.js'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  worker.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).textContent = e.data;</span></span><br><span class="line"><span class="actionscript">  &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>doWork2.js：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = e.data;</span><br><span class="line">  <span class="keyword">switch</span>(data.cmd)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'start'</span>:</span><br><span class="line">      <span class="keyword">self</span>.postMessage(<span class="string">'Worker started: '</span> + data.msg);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'stop'</span>:</span><br><span class="line">      <span class="keyword">self</span>.postMessage(<span class="string">'Worker stopped: '</span> + data.msg + <span class="string">' .(buttons will no longer work)'</span>);</span><br><span class="line">      <span class="keyword">self</span>.close(); <span class="comment">// Terminates the worker.</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">self</span>.postMessage(<span class="string">'Unknown command: '</span> + data.msg);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p><em>停止Worker的方法有两种：在主网页中调用worker terminate()或在Worker本身内部调用self.close().</em></p><h2 id="Worker环境"><a href="#Worker环境" class="headerlink" title="Worker环境"></a>Worker环境</h2><h3 id="Worker作用域"><a href="#Worker作用域" class="headerlink" title="Worker作用域"></a>Worker作用域</h3><p>就Worker来说，self和this指的都是Worker的全局作用域。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = e.data;</span><br><span class="line">  <span class="keyword">switch</span>(data.cmd) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'start'</span>:</span><br><span class="line">      postMessage(<span class="string">'Worker started:'</span> + data.msg);  <span class="comment">// 直接方法</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="适用于Worker的功能"><a href="#适用于Worker的功能" class="headerlink" title="适用于Worker的功能"></a>适用于Worker的功能</h3><p>由于Web Worker的多线程行为，所以它们只能使用JavaScript功能的子集：</p><ul><li>navigator对象</li><li>location对象（只读）</li><li>XMLHttpRequest</li><li>setTimeout()/clearTimeout()和setInterval()/clearInterval()</li><li>应用缓存</li><li>使用importScript()方法导入外部脚本</li><li>生成其他Web Worker</li></ul><p>Worker无法使用：</p><ul><li>DOM(非线程安全)</li><li>window对象</li><li>document对象</li><li>parent对象</li></ul><h3 id="加载外部脚本"><a href="#加载外部脚本" class="headerlink" title="加载外部脚本"></a>加载外部脚本</h3><p>可以通过importScripts()函数将外部脚本文件或库加载到worker中。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">importScripts</span>(<span class="string">'script1.js'</span>);</span><br><span class="line"><span class="selector-tag">importScripts</span>(<span class="string">'script2.js'</span>);</span><br></pre></td></tr></table></figure><p>也可以写成单个导入语句：<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="symbol">'script1</span>.js', <span class="symbol">'script2</span>.js');</span><br></pre></td></tr></table></figure></p><h2 id="子Worker"><a href="#子Worker" class="headerlink" title="子Worker"></a>子Worker</h2><p>Worker可以生成子Worker。子Worker注意事项：</p><ul><li>子Worker必须托管在与父网页相同的来源中</li><li>子Woker中的URI应相对于父Worker的位置进行解析。</li></ul><p>主网页和Worker之间传递的消息是复制而不是共享。</p><h2 id="内嵌Worker"><a href="#内嵌Worker" class="headerlink" title="内嵌Worker"></a>内嵌Worker</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prefixed in Webkit， chrome12，and FF6： window.WebKitBlobBuilder, window.MozBlobBuilder</span></span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> <span class="type">BlobBuilder</span>();</span><br><span class="line">bb.append(<span class="string">"onmessage = function(e) &#123; postMessage('msg from worker')&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain a blob URL reference to our worker 'file'.</span></span><br><span class="line"><span class="comment">// Note: window.webkitURL.createObjectURL() in Chrome 10 +.</span></span><br><span class="line"><span class="keyword">var</span> blobURL = window.URL.createObjectURL(bb.getBlob());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="type">Worker</span>(blobURL);</span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span></span>(e) &#123;</span><br><span class="line">  <span class="comment">// e.data == 'msg from worker'</span></span><br><span class="line">&#125;;</span><br><span class="line">worker.postMessage(); <span class="comment">// start the worker.</span></span><br></pre></td></tr></table></figure><h2 id="Blob网址"><a href="#Blob网址" class="headerlink" title="Blob网址"></a>Blob网址</h2><p>对window.URL.createObjectURL()的调用十分奇妙，此方法创建一个简单的网址字符串，该字符串可用于DOM File 或 Blob对象中存储的参考数据。例如：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">blob:</span><span class="string">http:</span><span class="comment">//localhost/c745ef73-ece9-46da-8f66-ebes574789b1</span></span><br></pre></td></tr></table></figure></p><p>Blob网址是唯一的，且只要应用存在，该网址就会一直有效。可以通过将Blob网址传递给window.URL.revokeObjectURL()来明确发布该网址：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.URL.revokeObjectURL(blobURL); <span class="regexp">//</span> <span class="built_in">window</span>.webkitURL.createObjectURL() <span class="keyword">in</span> Chrome <span class="number">10</span>+.</span><br></pre></td></tr></table></figure><p>在Chrome浏览器中，用<code>chrome://blob-internals/</code>可以查看创建的所有Blob网址。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!DOCTYEP</span> <span class="attr">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"log"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"worker1"</span> <span class="attr">type</span>=<span class="string">"javascript/worker"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// This script won't be parsed by JS engines because its type is javascript/worker.</span></span></span><br><span class="line"><span class="actionscript">    self.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      self.postMessage(<span class="string">'msg from worker'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Rest of your worker code goes here.</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(msg)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span></span><br><span class="line"><span class="javascript">      fragment.appendChild(<span class="built_in">document</span>.createTextNode(msg));</span></span><br><span class="line"><span class="javascript">      fragment.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'br'</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.querySelector(<span class="string">'#log'</span>).appendChild(fragment);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> bb = <span class="keyword">new</span> BlobBuilder();</span></span><br><span class="line"><span class="javascript">    bb.append(<span class="built_in">document</span>.querySelector(<span class="string">'#worker1'</span>).textContent);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="built_in">window</span>.URL.createObjectURL(bb.getBlob()));</span></span><br><span class="line"><span class="actionscript">    worker.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      log(<span class="string">"Received:"</span> + e.data);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    worker.postMessage(); <span class="comment">// Start the worker</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加载外部脚本-1"><a href="#加载外部脚本-1" class="headerlink" title="加载外部脚本"></a>加载外部脚本</h2><p>在内嵌Worker中利用importScripts()的一种方法是通过将相关网址传递给内嵌Worker并手动构建绝对网址来”导入”运行您主脚本的当前网址。这可以确保外部脚本是从同一来源导入的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"worker2"</span> <span class="attr">type</span>=<span class="string">"javascript/worker"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">self.onmessage = <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> data = e.data;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span>(data.url)&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> url = data.url.href;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> index = url.indexOf(<span class="string">'index.html'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span>(index != <span class="number">-1</span>)&#123;</span></span><br><span class="line"><span class="undefined">      url = url.substring(0, index);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    importScipts(url + <span class="string">'engine.js'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="built_in">window</span>.URL.createObjectURL(bb.getBlob()));</span></span><br><span class="line"><span class="javascript">  worker.postMessage(&#123;<span class="attr">url</span>: <span class="built_in">document</span>.loacation&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><p>处理Web Worker中出现的错误，如果在执行Worker时出现错误，就会触发ErrorEvent.</p><ul><li>filename 导致错误的Worker脚本的名称</li><li>lineno 出现错误的行号</li><li>message 有关错误的实用说明</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"error"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">onError</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'error'</span>).textContent = [</span></span><br><span class="line"><span class="actionscript">      <span class="string">'ERROR: Line '</span>, e.lineno, <span class="string">' in '</span>, e.filename, <span class="string">': '</span>, e.message].join(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">onMsg</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).textContent = e.data;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'workerWithError.js'</span>);</span></span><br><span class="line"><span class="actionscript">  worker.addEventListener(<span class="string">'message'</span>, onMsg, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">  worker.addEventListener(<span class="string">'error'</span>, onError, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">  worker.postMessage(); <span class="comment">// Start worker without a message.</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="安全说明"><a href="#安全说明" class="headerlink" title="安全说明"></a>安全说明</h2><h3 id="本地访问限制"><a href="#本地访问限制" class="headerlink" title="本地访问限制"></a>本地访问限制</h3><p>由于google Chrome浏览器的安全限制，Worker无法在本地运行（如通过file://),且会在不显示任何提示的情况下失败。<br>要通过file:// 方案运行，需使用–allow-file-access-files标记设置来运行Chrome浏览器。</p><h3 id="同源注意事项"><a href="#同源注意事项" class="headerlink" title="同源注意事项"></a>同源注意事项</h3><p>Worker 脚本必须是将相同方案作为调用网页的外部文件。因此，您无法通过 data: 网址或 javascript: 网址加载脚本，且 https: 网页无法启动以 http: 网址开头的 Worker 脚本。</p><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><ul><li>预先抓取和/或缓存数据以便稍后使用</li><li>突出显示代码语法或其他实时文本格式</li><li>拼写检查程序</li><li>分析视频或音频数据</li><li>背景 I/O 或网络服务轮询</li><li>处理较大数组或超大 JSON 响应</li><li>&lt;canvas &gt;中的图片过滤</li><li>更新本地网络数据库中的多行内容</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Web-Workers&quot;&gt;&lt;a href=&quot;#Web-Workers&quot; class=&quot;headerlink&quot; title=&quot;Web Workers&quot;&gt;&lt;/a&gt;Web Workers&lt;/h1&gt;&lt;p&gt;javaScript属于单线程环境，无法同时运行多个脚本。HTML5提供了WebWorker，为JavaScript引入线程技术。&lt;/p&gt;
&lt;h2 id=&quot;Web-Worker简介&quot;&gt;&lt;a href=&quot;#Web-Worker简介&quot; class=&quot;headerlink&quot; title=&quot;Web Worker简介&quot;&gt;&lt;/a&gt;Web Worker简介&lt;/h2&gt;&lt;p&gt;WebWorker规范定义了在网络应用中生成背景脚本的API。可以通过Web Worker执行线程。例如触发长时间运行的脚本&lt;br&gt;以处理计算密集型任务，同时却不会阻碍UI或其他脚本处理用户互动。&lt;/p&gt;
&lt;p&gt;Woker利用类似线程的消息传递实现并行。&lt;/p&gt;
&lt;h2 id=&quot;Web-Worker的类型&quot;&gt;&lt;a href=&quot;#Web-Worker的类型&quot; class=&quot;headerlink&quot; title=&quot;Web Worker的类型&quot;&gt;&lt;/a&gt;Web Worker的类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;专用Woker&lt;/li&gt;
&lt;li&gt;共有Woker&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用入门&quot;&gt;&lt;a href=&quot;#使用入门&quot; class=&quot;headerlink&quot; title=&quot;使用入门&quot;&gt;&lt;/a&gt;使用入门&lt;/h3&gt;&lt;p&gt;Web Worker在独立线程中运行，因此，它们执行的代码需要保存在一个单独的文件中。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建新的Worker对象&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; worker = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Woker&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;task.js&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;创建Worker后通过调用postMessage() 方法启动&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;worker.postMessage&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// start the worker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="web" scheme="http://jiaxf.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>前端自适应css3相对单位rem</title>
    <link href="http://jiaxf.github.io/2018/04/19/%E5%89%8D%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94CSS3%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8Drem/"/>
    <id>http://jiaxf.github.io/2018/04/19/前端自适应CSS3相对单位rem/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相对单位rem"><a href="#相对单位rem" class="headerlink" title="相对单位rem"></a>相对单位rem</h1><p>rem(font size of the root element)是指相对于根元素的字体大小的单位。</p><blockquote><p>rem是相对长度单位，相对于根元素（即html元素） font-size计算值的倍数。<br>使用： 根据根标签html设置文字大小后（大部分浏览器默认为16px），其他标签设置rem都是html大小的倍数。</p></blockquote><p><strong>移动端开发使用em作为单位</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;  <span class="comment">// 16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.625rem</span> // <span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web-app的几种屏幕适配："><a href="#web-app的几种屏幕适配：" class="headerlink" title="web app的几种屏幕适配："></a>web app的几种屏幕适配：</h1><h2 id="1-固定高度（流式布局）"><a href="#1-固定高度（流式布局）" class="headerlink" title="1. 固定高度（流式布局）"></a>1. 固定高度（流式布局）</h2><p>流式布局通过百分比来定义宽度，但是高度大都是用px固定住。 高度不变，宽度拉伸。</p><h2 id="2-固定宽度"><a href="#2-固定宽度" class="headerlink" title="2. 固定宽度"></a>2. 固定宽度</h2><p>固定宽度，超出部分留白。</p><a id="more"></a><h2 id="3-响应式"><a href="#3-响应式" class="headerlink" title="3. 响应式"></a>3. 响应式</h2><h2 id="4-设置viewport进行缩放"><a href="#4-设置viewport进行缩放" class="headerlink" title="4. 设置viewport进行缩放"></a>4. 设置viewport进行缩放</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">"viewprt"</span> <span class="attribute">content</span>=<span class="string">"width=320,maximun-scale=1.3,user-scalable=no"</span>&gt;</span><br></pre></td></tr></table></figure><p>例如：可以以320宽度为基准，进行缩放</p><h2 id="5-rem能等比例适配所有屏幕"><a href="#5-rem能等比例适配所有屏幕" class="headerlink" title="5. rem能等比例适配所有屏幕"></a>5. rem能等比例适配所有屏幕</h2><p>通过设置html的字体大小可以控制rem的大小，改变html的font-size可以等比改变所有用了rem单位的元素，任何分辨率下，页面的排版都是按照等比例进行切换。可以通过js根据浏览器当前的分辨率改变font-size的值来实现缩放。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span>(<span class="name">doc</span>, win)&#123;</span><br><span class="line">  var docEle = doc.documentElement,</span><br><span class="line">      resizeEvt = <span class="symbol">'orientationchange</span>' in window ? <span class="symbol">'orientationchange</span><span class="symbol">':</span> <span class="symbol">'resize</span>',</span><br><span class="line">      recalc = function() &#123;</span><br><span class="line">        var clientWidth = docEl.clientWidth<span class="comment">;</span></span><br><span class="line">        if(<span class="name">!clientWidth</span>) return<span class="comment">;;</span></span><br><span class="line">        docEl.style.fontSize = <span class="number">20</span> * (<span class="name">clientWidth</span> / <span class="number">320</span>) + <span class="symbol">'px</span>'<span class="comment">;</span></span><br><span class="line">      &#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">      if(<span class="name">!doc.addEventListener</span>) return<span class="comment">;</span></span><br><span class="line">      win.addEventListener(<span class="name">resizeEvt</span>, recalc, false)<span class="comment">;</span></span><br><span class="line">      doc.addEventListener(<span class="symbol">'DOMContentLoaded</span>', recalc, false)<span class="comment">;</span></span><br><span class="line">&#125;)(<span class="name">doucment</span>, window)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>rem使用的浏览器兼容性</p><p><img src="/images/1418894538.png" alt=""></p><p>常用的rem 单位换算</p><p><img src="/images/2013628105651693.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;相对单位rem&quot;&gt;&lt;a href=&quot;#相对单位rem&quot; class=&quot;headerlink&quot; title=&quot;相对单位rem&quot;&gt;&lt;/a&gt;相对单位rem&lt;/h1&gt;&lt;p&gt;rem(font size of the root element)是指相对于根元素的字体大小的单位。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rem是相对长度单位，相对于根元素（即html元素） font-size计算值的倍数。&lt;br&gt;使用： 根据根标签html设置文字大小后（大部分浏览器默认为16px），其他标签设置rem都是html大小的倍数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;移动端开发使用em作为单位&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1rem&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 16px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.625rem&lt;/span&gt; // &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;web-app的几种屏幕适配：&quot;&gt;&lt;a href=&quot;#web-app的几种屏幕适配：&quot; class=&quot;headerlink&quot; title=&quot;web app的几种屏幕适配：&quot;&gt;&lt;/a&gt;web app的几种屏幕适配：&lt;/h1&gt;&lt;h2 id=&quot;1-固定高度（流式布局）&quot;&gt;&lt;a href=&quot;#1-固定高度（流式布局）&quot; class=&quot;headerlink&quot; title=&quot;1. 固定高度（流式布局）&quot;&gt;&lt;/a&gt;1. 固定高度（流式布局）&lt;/h2&gt;&lt;p&gt;流式布局通过百分比来定义宽度，但是高度大都是用px固定住。 高度不变，宽度拉伸。&lt;/p&gt;
&lt;h2 id=&quot;2-固定宽度&quot;&gt;&lt;a href=&quot;#2-固定宽度&quot; class=&quot;headerlink&quot; title=&quot;2. 固定宽度&quot;&gt;&lt;/a&gt;2. 固定宽度&lt;/h2&gt;&lt;p&gt;固定宽度，超出部分留白。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="http://jiaxf.github.io/tags/web/"/>
    
      <category term="前端" scheme="http://jiaxf.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css3" scheme="http://jiaxf.github.io/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 3</title>
    <link href="http://jiaxf.github.io/2018/04/19/3-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/3-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Partial-Application"><a href="#Thinking-in-Ramda-Partial-Application" class="headerlink" title="Thinking in Ramda: Partial Application"></a>Thinking in Ramda: Partial Application</h1><h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher-Order Functions"></a>Higher-Order Functions</h2><p>Functions that take or return other functions are known as “higher-order functions”.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Full function version:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">publishedInYear</span>(<span class="params">year</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> book.year === year</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrow function version:</span></span><br><span class="line"><span class="keyword">const</span> publishedInYear = <span class="function"><span class="params">year</span> =&gt;</span> book =&gt; book.year === year</span><br><span class="line"><span class="keyword">const</span> titlesForYear = <span class="function">(<span class="params">books, year</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = filter(publishedInYear(year), books)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> map(<span class="function"><span class="params">book</span> =&gt;</span> book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Partially-Applying-functions"><a href="#Partially-Applying-functions" class="headerlink" title="Partially-Applying functions"></a>Partially-Applying functions</h2><p>We could rewrite any multi-argument function this way if we wanted to, but we don’t own all of the functions we might want to use. Also, we might want to use some multi-argument functions in the usual way.</p><p>Ramda provides two functions to help us out: <code>partial</code>, and <code>partialRight</code>.</p><p>These two functions let us call any function with fewer arguments than it needs. They both return a new function that takes the missing arguments and then calls the original function once all of the arguments have been supplied.</p><p>The difference between <code>partial</code> and <code>partialRight</code> is whether the arguments we supply are the left-most or right-most arguments needed by the original function.</p><p>Note that the arguments we supply to <code>partial</code> and <code>partialRight</code> must always be in an array, even if there’s only one of them.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = (book, <span class="built_in">year</span>) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(partialRight(publishedInYear, [<span class="built_in">year</span>]), books)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Curry"><a href="#Curry" class="headerlink" title="Curry"></a>Curry</h2><p>Currying is another core concept in functional programming. Technically, a curried function is always a series of single-argument functions, which is what I was just complaining about. In pure functional languages, the syntax generally makes that look no different than calling a function with multiple arguments.</p><blockquote><p>柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。“如果固定某些参数，将会得到余下参数的一个函数”。</p></blockquote><blockquote><p>函数柯里化的对偶是Uncurrying,一种是使用匿名单参数函数来实现多参数函数的方法。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span><span class="params">(a)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*a + b*b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(foo(<span class="number">3</span>))(<span class="number">4</span>) <span class="keyword">or</span> foo(<span class="number">3</span>)(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>惰性求值（Lazy Evaluation），又称惰性计算、懒惰求值，也称为传需求调用（call-by-need）。它的目的是要最小化计算机要做的工作。除可以得到性能的提升外，惰性计算的最重要的好处是它可以构造一个无限的数据类型或可计算的无限列表而没有妨碍计算的无限循环或大小问题。<br>惰性求值的相反是及早求值，这是一个大多少编程语言所拥有的普通计算方式。</p></blockquote><blockquote><p>λ演算是一套用于研究函数定义、函数应用和递归的形式系统。这种演算可以用来清晰地定义什么是一个可计算函数。Lambda演算可以被称为最小的通用程序设计语言，它包括一条变换规则（变量替换）和一条函数定义方式，Lambda演算置通用在于，任何一个可计算函数都能用这种形式来表达和求值。因此，它是等价于图灵机的。<br>在lambda表达式的集合定义一个等价关系（== 标注），“两个表达式其实表示的是同一个函数”这样的直觉性判断即由此表述，这种等级关系是通过所谓的“alpha-变换规则”和”beta-归约规则”。</p></blockquote><p>In Ramda, a curried function can be called with only a subset of its arguments, and it will return a new function that accepts the remaining arguments. If you call a curried function with all of its arguments, it will call just call the function.</p><p>You can think of a curried function as the best of both worlds: you can call it normally with all of its arguments and it will just work. Or you can call it with a subset of its arguments, and it will act as if you’d used <code>partial</code>.</p><p>Note that this flexibility introduces a small performance hit, because <code>curry</code> needs to figure out how the function was called and then determine what to do. In general, I only curry functions when I find I need to use <code>partial</code> in more than one place.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = curry((<span class="built_in">year</span>, book) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(publishedInYear(<span class="built_in">year</span>), books)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Argument-Order"><a href="#Argument-Order" class="headerlink" title="Argument Order"></a>Argument Order</h2><p>Notice that to make curry work for us, we had to reverse the argument order. This is extremely common with functional programming, so almost every Ramda function is written so that the data to be operated on comes last.</p><h1 id="Arguments-In-The-Wrong-order"><a href="#Arguments-In-The-Wrong-order" class="headerlink" title="Arguments In The Wrong order"></a>Arguments In The Wrong order</h1><p>###　Filp</p><p>The first option is <code>flip</code>. flip takes a function of 2 or more arguments and returns a new function that takes the same arguments, but switches the order of the first two arguments. It is mostly used with two argument functions, but is more general than that.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = curry((book, <span class="built_in">year</span>) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(flip(publishedInYear)(<span class="built_in">year</span>), books)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In most cases, I’d prefer to use the more convenient argument order, but if you need to use a function you don’t control, <code>flip</code> is a helpful option.</p><h3 id="Placeholder"><a href="#Placeholder" class="headerlink" title="Placeholder"></a>Placeholder</h3><p>The more general option is the “placeholder” argument (__).</p><p>What if we have a curried function of three arguments, and we want to supply the first and last arguments, leaving the middle one for later? We can use the placeholder for the middle argument:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> threeArgs = curry(<span class="function">(<span class="params">a,b,c</span>) =&gt;</span> &#123; <span class="comment">/* ... */</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleArgumentLater = threeArgs(<span class="string">'value for a'</span>, __, <span class="string">'value fro c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleAargumentOnly = threeArgs(__, <span class="string">'value for b'</span>, __)</span><br></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publishedInYear = curry ((book, <span class="built_in">year</span>) =&gt; book.<span class="built_in">year</span> === <span class="built_in">year</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> titlesForYear = (books, <span class="built_in">year</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> selected = <span class="built_in">filter</span>(publishedInYear(__, <span class="built_in">year</span>), books)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">map</span>(book =&gt; book.title, selected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that <strong> only works for curried functions, while partial, partialRight, and flip all work on any function. If you need to use </strong> with a normal function, you can always wrap it with a call to curry first.</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const publishedInYear = curry((<span class="name">year</span>, book) =&gt; book.year === year)</span><br><span class="line"></span><br><span class="line">const titlesForYear = curry((<span class="name">year</span>, books) =&gt;</span><br><span class="line">  pipe(</span><br><span class="line">      filter(<span class="name">publishedInYear</span>(<span class="name">year</span>)),</span><br><span class="line">      map(<span class="name">book</span> =&gt; book.title)</span><br><span class="line">  )(<span class="name">books</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><p>  <em>Cite From <a href="http://randycoulman.com/blog/2016/06/07/thinking-in-ramda-partial-application/" target="_blank" rel="noopener">« Thinking in Ramda: Partial Application »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Partial-Application&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Partial-Application&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Partial Application&quot;&gt;&lt;/a&gt;Thinking in Ramda: Partial Application&lt;/h1&gt;&lt;h2 id=&quot;Higher-Order-Functions&quot;&gt;&lt;a href=&quot;#Higher-Order-Functions&quot; class=&quot;headerlink&quot; title=&quot;Higher-Order Functions&quot;&gt;&lt;/a&gt;Higher-Order Functions&lt;/h2&gt;&lt;p&gt;Functions that take or return other functions are known as “higher-order functions”.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Full function version:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;publishedInYear&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;year&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;book&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; book.year === year&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Arrow function version:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; publishedInYear = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;year&lt;/span&gt; =&amp;gt;&lt;/span&gt; book =&amp;gt; book.year === year&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; titlesForYear = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;books, year&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; selected = filter(publishedInYear(year), books)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;book&lt;/span&gt; =&amp;gt;&lt;/span&gt; book.title, selected)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 4</title>
    <link href="http://jiaxf.github.io/2018/04/19/4-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/4-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Declarative-Programming"><a href="#Thinking-in-Ramda-Declarative-Programming" class="headerlink" title="Thinking in Ramda: Declarative Programming"></a>Thinking in Ramda: Declarative Programming</h1><p>As we start writing small functional building blocks and combining them, we find that we have to write a lot of functions that wrap JavaScript’s operators such as arithmetic, comparison, logic, and control flow. This can feel tedious, but Ramda has our back.</p><p>There are many different ways to divide up the programming language/style landscape. There’s static typing vs dynamic typing, interpreted languages vs compiled languages, low-level vs high-level, etc.</p><p>Another such division is imperative programming vs declarative programming.<br><a id="more"></a><br>Functional programming is considered a subset of declarative programming. In a functional program, we define functions and then tell the computer what to do by combining these functions.</p><p>Even in declarative programs, it is necessary to do similar tasks to those we do in imperative programs. Control flow, arithmetic, comparison, and logic are still the basic building blocks we have to work with. But we need to find a way to express these constructs in a declarative way.</p><h2 id="Declarative-Replacements"><a href="#Declarative-Replacements" class="headerlink" title="Declarative Replacements"></a>Declarative Replacements</h2><p>Since we’re programming in JavaScript, an imperative language, it’s fine to use the standard imperative constructs when writing “normal” JavaScript code.</p><p>But when we’re writing functional transformations using pipelines and similar constructs, the imperative constructs don’t play well.</p><p>Ramda provides add, subtract, multiply, and divide functions to use in place of the standard arithmetic operators.</p><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><p>Notice that some of our functions are using standard comparison operators (<code>===</code> and `&gt;= in this case). As you might suspect by now, Ramda also provides replacements for these.</p><p>Let’s modify our code to use <code>equals</code> in place of <code>===</code> and <code>gte</code> in place of <code>&gt;=</code>.</p><p>Ramda also provides <code>gt</code> for <code>&gt;</code>, <code>lt</code> for <code>&lt;</code>, and <code>lte</code> for <code>&lt;=</code>.</p><p>In addition to <code>equals</code>, there is <code>identical</code> for determining if two values reference the same memory.</p><p>There are a couple of common uses of <code>===</code>: checking if a string or array is empty (<code>str === &#39;&#39;</code> or <code>arr.length === 0</code>), and checking if a variable is <code>null</code> or <code>undefined</code>. Ramda provides handy functions for both cases: <code>isEmpty</code> and <code>isNil</code>.</p><h2 id="Logic"><a href="#Logic" class="headerlink" title="Logic"></a>Logic</h2><p>we used the <code>both</code> and <code>either</code> functions in place of <code>&amp;&amp;</code> and <code>||</code> operations. We also talked about <code>complement</code> in place of <code>!</code>.</p><p>But sometimes we need to apply <code>&amp;&amp;</code>, <code>||</code>, and <code>!</code> to disparate values. For those cases, Ramda gives us <code>and</code>, <code>or</code>, and <code>not</code> functions. I think of it this way: <code>and</code>, <code>or</code>, and <code>not</code> work with values, while <code>both</code>, <code>either</code>, and <code>complement</code> work with functions.</p><p><code>defaultTo</code> checks if the second argument <code>isNil</code>. If it isn’t, it returns that as the value, otherwise it returns the first value.</p><h2 id="Conditionals"><a href="#Conditionals" class="headerlink" title="Conditionals"></a>Conditionals</h2><ul><li>IfElse</li></ul><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><p>Constant functions are quite useful in situations like this. As you might imagine, Ramda provides us a shortcut. In this case, the shortcut is named <code>always</code>.</p><p>Ramda also provides <code>T</code> and <code>F</code> as further shortcuts for <code>always(true)</code> and <code>always(false)</code>.</p><h2 id="Identity"><a href="#Identity" class="headerlink" title="Identity"></a>Identity</h2><p><code>identity</code> can take more than one argument, but it always returns its first argument. If we want to return something other than the first argument, there’s the more general <code>nthArg</code> function. It’s much less common than <code>identity</code>.</p><h2 id="When-And-Unless"><a href="#When-And-Unless" class="headerlink" title="When And Unless"></a>When And Unless</h2><h2 id="Cond"><a href="#Cond" class="headerlink" title="Cond"></a>Cond</h2><hr><p><em>Cite From <a href="http://randycoulman.com/blog/2016/06/14/thinking-in-ramda-declarative-programming/" target="_blank" rel="noopener">« Thinking in Ramda: Declarative Programming »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Declarative-Programming&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Declarative-Programming&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Declarative Programming&quot;&gt;&lt;/a&gt;Thinking in Ramda: Declarative Programming&lt;/h1&gt;&lt;p&gt;As we start writing small functional building blocks and combining them, we find that we have to write a lot of functions that wrap JavaScript’s operators such as arithmetic, comparison, logic, and control flow. This can feel tedious, but Ramda has our back.&lt;/p&gt;
&lt;p&gt;There are many different ways to divide up the programming language/style landscape. There’s static typing vs dynamic typing, interpreted languages vs compiled languages, low-level vs high-level, etc.&lt;/p&gt;
&lt;p&gt;Another such division is imperative programming vs declarative programming.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 5</title>
    <link href="http://jiaxf.github.io/2018/04/19/5-Thinking%20in%20Radam/"/>
    <id>http://jiaxf.github.io/2018/04/19/5-Thinking in Radam/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Pointfree-Style"><a href="#Thinking-in-Ramda-Pointfree-Style" class="headerlink" title="Thinking in Ramda: Pointfree Style"></a>Thinking in Ramda: Pointfree Style</h1><h2 id="Pointfree-Style"><a href="#Pointfree-Style" class="headerlink" title="Pointfree Style"></a>Pointfree Style</h2><ul><li>Put the data last</li><li>Curry all the things</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const water = cond([</span><br><span class="line">    [equals(<span class="number">0</span>), always('water freezes at <span class="number">0</span>°C')],</span><br><span class="line">    [equals(<span class="number">100</span>), alwyas('water boils at <span class="number">100</span>°C')],</span><br><span class="line">    [T,           temp =&gt; `nothing sepcial happends at $&#123;temp&#125;°C`]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="Multi-argument-Functions"><a href="#Multi-argument-Functions" class="headerlink" title="Multi-argument Functions"></a>Multi-argument Functions</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const titlesForYear = curry((<span class="name">year</span>, books) =&gt;</span><br><span class="line">  pipe(</span><br><span class="line">      filter(<span class="name">publishedInYear</span>(<span class="name">year</span>)),</span><br><span class="line">      map(<span class="name">book</span> =&gt; book.title)</span><br><span class="line">  )(<span class="name">books</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const titlesForYear = year =&gt;</span><br><span class="line">  pipe(</span><br><span class="line">      filter(<span class="name">publishedInYear</span>(<span class="name">year</span>)),</span><br><span class="line">      map(<span class="name">book</span> =&gt; book.title)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Refactoring-To-Pointfree"><a href="#Refactoring-To-Pointfree" class="headerlink" title="Refactoring To Pointfree"></a>Refactoring To Pointfree</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isCitizen = <span class="function"><span class="params">person</span> =&gt;</span> wasBornInCountry(person) || wasNaturalized(person)</span><br><span class="line"><span class="keyword">const</span> isEligibleToVote = <span class="function"><span class="params">person</span> =&gt;</span> isOver18(person) &amp;&amp; isCitizen(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写</span></span><br><span class="line"><span class="keyword">const</span> isCitizen = <span class="function"><span class="params">person</span> =&gt;</span> either(wasBornInCountry, wasNaturalized)(person)</span><br><span class="line"><span class="keyword">const</span> isEligibleToVote = <span class="function"><span class="params">pserson</span> =&gt;</span> both(isOver18, isCitizen)(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">// with pointfree style</span></span><br><span class="line"><span class="keyword">const</span> isCitizen= either（wasBornInCountry, wasNaturalized)</span><br><span class="line"><span class="keyword">const</span> isEligibleToVote= both(isOver18, isCitizen)</span><br></pre></td></tr></table></figure><p>##　Conclusion</p><p>Pointfree style, also known as tacit programming, can make our code clearer and easier to reason about. By refactoring our code to combine all of our transformations into a single function, we end up with smaller building blocks that can be used in more places.</p><hr><p><em>Cite from <a href="http://randycoulman.com/blog/2016/06/21/thinking-in-ramda-pointfree-style/" target="_blank" rel="noopener">« Thinking in Ramda: Pointfree Style »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Pointfree-Style&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Pointfree-Style&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Pointfree Style&quot;&gt;&lt;/a&gt;Thinking in Ramda: Pointfree Style&lt;/h1&gt;&lt;h2 id=&quot;Pointfree-Style&quot;&gt;&lt;a href=&quot;#Pointfree-Style&quot; class=&quot;headerlink&quot; title=&quot;Pointfree Style&quot;&gt;&lt;/a&gt;Pointfree Style&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Put the data last&lt;/li&gt;
&lt;li&gt;Curry all the things&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const water = cond([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [equals(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), always(&#39;water freezes at &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;°C&#39;)],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [equals(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;), alwyas(&#39;water boils at &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;°C&#39;)],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [T,           temp =&amp;gt; `nothing sepcial happends at $&amp;#123;temp&amp;#125;°C`]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Multi-argument-Functions&quot;&gt;&lt;a href=&quot;#Multi-argument-Functions&quot; class=&quot;headerlink&quot; title=&quot;Multi-argument Functions&quot;&gt;&lt;/a&gt;Multi-argument Functions&lt;/h2&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const titlesForYear = curry((&lt;span class=&quot;name&quot;&gt;year&lt;/span&gt;, books) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pipe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      filter(&lt;span class=&quot;name&quot;&gt;publishedInYear&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;year&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map(&lt;span class=&quot;name&quot;&gt;book&lt;/span&gt; =&amp;gt; book.title)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )(&lt;span class=&quot;name&quot;&gt;books&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const titlesForYear = year =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pipe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      filter(&lt;span class=&quot;name&quot;&gt;publishedInYear&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;year&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map(&lt;span class=&quot;name&quot;&gt;book&lt;/span&gt; =&amp;gt; book.title)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 6</title>
    <link href="http://jiaxf.github.io/2018/04/19/6-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/6-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Immutability-and-Objects"><a href="#Thinking-in-Ramda-Immutability-and-Objects" class="headerlink" title="Thinking in Ramda: Immutability and Objects"></a>Thinking in Ramda: Immutability and Objects</h1><h2 id="Reading-Object-Properties"><a href="#Reading-Object-Properties" class="headerlink" title="Reading Object Properties"></a>Reading Object Properties</h2><p>We can make the functions more declarative using <code>equals</code> and <code>gte</code>.</p><h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><p>Fortunately, Ramda can help us out.It provides the <code>prop</code> function for accesing properties of an object.</p><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><p>Where <code>prop</code> reads a single property from an object and returns the value, <code>p ick</code> reads multiple properties from an object and returns a new object with just those properties.<br><a id="more"></a></p><h1 id="HAS"><a href="#HAS" class="headerlink" title="HAS"></a>HAS</h1><p>If we just want to know if an object has a property without reading the value,we can use <code>has</code> for checking own properties,and <code>hasIn</code> for checking up the prototype chain: <code>has(&#39;name&#39;, person)</code>.</p><h1 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a>PATH</h1><p>Where prop reads a property from an object, path dives into nested objects. For example, we could access the zip code from a deeper structure as path([‘address’, ‘zipCode’], person).</p><p>Note that path is more forgiving than prop. path will return undefined if anything along the path (including the original argument) is null or undefined whereas prop will raise an error.</p><h2 id="propOr-pathOr"><a href="#propOr-pathOr" class="headerlink" title="propOr / pathOr"></a>propOr / pathOr</h2><p><code>propOr</code> and <code>pathOr</code> are similar to <code>prop</code> and <code>path</code> combined with <code>defaultTo</code>. They let you provide a default value to use if the property or path cannot be found in the target object.</p><p>For example, we can provide a placeholder when we don’t know a person’s name: <code>propOr(&#39;&lt;Unnamed&gt;&#39;, &#39;name&#39;, person)</code>. Note that unlike <code>prop</code>, <code>propOr</code> will not raise an error if <code>person</code> is <code>null</code> or <code>undefined</code>; it will instead return the default value.</p><h2 id="keys-values"><a href="#keys-values" class="headerlink" title="keys / values"></a>keys / values</h2><p><code>keys</code> returns an array containing the names of all of the own properties in an object. <code>values</code> returns the values of those properties. These functions can be useful when combined with the collection iteration functions we learned about in Part 1.</p><h1 id="merging-Object"><a href="#merging-Object" class="headerlink" title="merging Object"></a>merging Object</h1><p>Sometimes, you’ll want to merge two objects together. A common case is when you have a function that takes named options and you want to combine those options with a set of default options. Ramda provides <code>merge</code> for this purpose.</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(a,b,options = &#123;&#125;)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> defaultOptions = &#123;value:<span class="number">42</span>, local:<span class="literal">true</span>&#125;</span><br><span class="line">  <span class="keyword">const</span> finalOptions = merge(defaultOptions, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>merge</code> returns a new object containing all of the properties and values from both objects. If both objects have the same property, the value from the second argument is used.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This has given us a nice set  of tools for working with objects in a declarative and immutable way.We can now read, add, update, delete, and transform properties in objects without changing the original objects. And we can do these things in a way that works when combining functions.</p><hr><p><strong>Cite From <a href="http://randycoulman.com/blog/2016/06/28/thinking-in-ramda-immutability-and-objects/" target="_blank" rel="noopener">« Thinking in Ramda: Immutability and Objects »</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Immutability-and-Objects&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Immutability-and-Objects&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Immutability and Objects&quot;&gt;&lt;/a&gt;Thinking in Ramda: Immutability and Objects&lt;/h1&gt;&lt;h2 id=&quot;Reading-Object-Properties&quot;&gt;&lt;a href=&quot;#Reading-Object-Properties&quot; class=&quot;headerlink&quot; title=&quot;Reading Object Properties&quot;&gt;&lt;/a&gt;Reading Object Properties&lt;/h2&gt;&lt;p&gt;We can make the functions more declarative using &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;gte&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Prop&quot;&gt;&lt;a href=&quot;#Prop&quot; class=&quot;headerlink&quot; title=&quot;Prop&quot;&gt;&lt;/a&gt;Prop&lt;/h2&gt;&lt;p&gt;Fortunately, Ramda can help us out.It provides the &lt;code&gt;prop&lt;/code&gt; function for accesing properties of an object.&lt;/p&gt;
&lt;h2 id=&quot;Pick&quot;&gt;&lt;a href=&quot;#Pick&quot; class=&quot;headerlink&quot; title=&quot;Pick&quot;&gt;&lt;/a&gt;Pick&lt;/h2&gt;&lt;p&gt;Where &lt;code&gt;prop&lt;/code&gt; reads a single property from an object and returns the value, &lt;code&gt;p ick&lt;/code&gt; reads multiple properties from an object and returns a new object with just those properties.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 7</title>
    <link href="http://jiaxf.github.io/2018/04/19/7-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/7-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Immutability-and-Arrays"><a href="#Thinking-in-Ramda-Immutability-and-Arrays" class="headerlink" title="Thinking in Ramda: Immutability and Arrays"></a>Thinking in Ramda: Immutability and Arrays</h1><h2 id="Reading-Array-Elements"><a href="#Reading-Array-Elements" class="headerlink" title="Reading Array Elements"></a>Reading Array Elements</h2><p>Ramda functions for reading array elements <code>nth</code> and  <code>slice</code> and <code>contains</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>]</span><br><span class="line"><span class="function"><span class="title">nth</span><span class="params">(<span class="number">3</span>, numbers)</span></span>  <span class="comment">// =&gt; 40 (0-based indexing)</span></span><br><span class="line"><span class="function"><span class="title">nth</span><span class="params">(-<span class="number">2</span>, numbers)</span></span> <span class="comment">// =&gt;50 (negative numbers start from the right)</span></span><br><span class="line"><span class="function"><span class="title">slice</span><span class="params">(<span class="number">2</span>, <span class="number">5</span>, numbers)</span></span> <span class="comment">// =&gt; [30,40, 50] (see below)</span></span><br><span class="line"><span class="function"><span class="title">contains</span><span class="params">(<span class="number">20</span>, numbers)</span></span> <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><p> <code>nth(0)</code>  equals <code>head</code>, <code>nth(-1)</code> equals <code>last</code>.</p><p> It also provides functions for accesing all-but-the-first element <code>tail</code>,all-but-the-last element <code>init</code>,the first N elements <code>take(N)</code>, and the last N elments <code>takeLast(N)</code>.<br><a id="more"></a></p><h2 id="Adding-Updating-and-Removing-Array-Elements"><a href="#Adding-Updating-and-Removing-Array-Elements" class="headerlink" title="Adding, Updating, and Removing Array Elements"></a>Adding, Updating, and Removing Array Elements</h2><ul><li><code>insert</code></li><li><code>update</code></li><li><code>append</code></li><li><code>prepend</code></li><li><code>update</code></li><li><code>concat</code></li><li><code>concatAfter = flip(concat)</code></li></ul><h2 id="Transforming-Elements"><a href="#Transforming-Elements" class="headerlink" title="Transforming Elements"></a>Transforming Elements</h2><ul><li><code>update</code></li><li><code>adjust</code></li><li><code>evolve</code></li></ul><hr><p><strong>Cite From <a href="http://randycoulman.com/blog/2016/07/05/thinking-in-ramda-immutability-and-arrays/" target="_blank" rel="noopener">« Thinking in Ramda: Immutability and Arrays »</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Immutability-and-Arrays&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Immutability-and-Arrays&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Immutability and Arrays&quot;&gt;&lt;/a&gt;Thinking in Ramda: Immutability and Arrays&lt;/h1&gt;&lt;h2 id=&quot;Reading-Array-Elements&quot;&gt;&lt;a href=&quot;#Reading-Array-Elements&quot; class=&quot;headerlink&quot; title=&quot;Reading Array Elements&quot;&gt;&lt;/a&gt;Reading Array Elements&lt;/h2&gt;&lt;p&gt;Ramda functions for reading array elements &lt;code&gt;nth&lt;/code&gt; and  &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;contains&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const numbers = [&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, numbers)&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 40 (0-based indexing)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, numbers)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// =&amp;gt;50 (negative numbers start from the right)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, numbers)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; [30,40, 50] (see below)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, numbers)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;code&gt;nth(0)&lt;/code&gt;  equals &lt;code&gt;head&lt;/code&gt;, &lt;code&gt;nth(-1)&lt;/code&gt; equals &lt;code&gt;last&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; It also provides functions for accesing all-but-the-first element &lt;code&gt;tail&lt;/code&gt;,all-but-the-last element &lt;code&gt;init&lt;/code&gt;,the first N elements &lt;code&gt;take(N)&lt;/code&gt;, and the last N elments &lt;code&gt;takeLast(N)&lt;/code&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 2</title>
    <link href="http://jiaxf.github.io/2018/04/19/2-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/2-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Combining-funtions"><a href="#Thinking-in-Ramda-Combining-funtions" class="headerlink" title="Thinking in Ramda: Combining funtions"></a>Thinking in Ramda: Combining funtions</h1><h2 id="Simple-Combinations"><a href="#Simple-Combinations" class="headerlink" title="Simple Combinations"></a>Simple Combinations</h2><p>Once you’ve gotten used to the idea of passing functions to other functions, you might start to find situations where you want to combine sereral functions together.</p><p>Ramda provides several functions for doing simple combinations.</p><h2 id="Complement"><a href="#Complement" class="headerlink" title="Complement"></a>Complement</h2><p>Ramda provides a higher-order-function,<code>complement</code>, that takes another function and return a new function that returns <code>true</code> when the original function returns a falsy value, and <code>false</code> when the original function returns a truthy value.<br><a id="more"></a></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const isEven = x =&gt; x % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">find(complement(isEven), [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">//--&gt; 1</span></span><br></pre></td></tr></table></figure><p>Even better is to give the <code>complement</code>ed function its own name so it can be reused:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const isEven = x =&gt; x % <span class="number">2</span> ===<span class="number">0</span></span><br><span class="line">const isOdd = complement(isEven)</span><br><span class="line"></span><br><span class="line">find(isOdd, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])    <span class="comment">// --&gt; 1</span></span><br></pre></td></tr></table></figure><p>Note that  <code>complement</code> implements the same idea for functions as the <code>!</code>(not) operator does for values.</p><h2 id="BOTH-EITHER"><a href="#BOTH-EITHER" class="headerlink" title="BOTH/EITHER"></a>BOTH/EITHER</h2><p><code>both</code> takes two other functions and returns a new funtion that returns <code>true</code> if both functions return a truthy value when applied to the arguments and  <code>false</code> otherwise.</p><p><code>either</code> takes two other functions and returns a new function that returns <code>true</code> if either function returns a truthy value when applied to the arguments and  <code>false</code> otherwise.</p><p>Note that <code>both</code> implements the same idea for  functions as the <code>&amp;&amp;</code>(and) operator does for values, and <code>either</code> implements that same idea for functions as the <code>||</code>(or) operator does for values.</p><p>Ramda also provides  <code>allPass</code> and <code>anyPass</code> that take an array of any number of functions. As their names suggest, <code>allPass</code> works like <code>both</code>, and  <code>anyPass</code> works like <code>either</code>.</p><h2 id="Pipelines"><a href="#Pipelines" class="headerlink" title="Pipelines"></a>Pipelines</h2><p>Sometimes we want to apply several functions to some data in a pipeline fashion.For example, we might want to take tow numbers,multiply them together,and one, and square the result.We could write it like this.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multiply = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a*b   </span><br><span class="line"><span class="keyword">const</span> addOne = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> square = <span class="function"><span class="params">x</span> =&gt;</span> x * x</span><br><span class="line"><span class="keyword">const</span> operate = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> product = multiply(x,y)</span><br><span class="line">  <span class="keyword">const</span> incremented = addOne(product)</span><br><span class="line">  <span class="keyword">const</span> square = square(incremented)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> squared</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">operate(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// =&gt; ((3*4)+1)^2 ==&gt; (12 +1)^2 ==&gt; 169</span></span><br></pre></td></tr></table></figure><h3 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe"></a>Pipe</h3><p>Ramda provides the <code>pipe</code> functions,which takes a list of one or more functions and returns a new function.</p><p>The new function takes the same number of arguments as the first function it is given.It then ‘pipes’ those arguments through each function in the list.It applies<br>the first function to the arguments, passes its result to the second function and so on. The result of the last function is the result of the <code>pipe</code> call.</p><p>Note that all of the functions after the first must only take a single argument.</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">const</span> operate = pipe(</span><br><span class="line">  <span class="keyword">multiply,</span></span><br><span class="line"><span class="keyword"> </span> <span class="keyword">addOne,</span></span><br><span class="line"><span class="keyword"> </span> square</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h2><p><code>compose</code> works exactly the same way as <code>pipe</code>, except that it applies the functions in right-to-left order instead of left-to-right.</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">const</span> operate = compose(</span><br><span class="line">    square,</span><br><span class="line">    <span class="keyword">addOne,</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">multiply</span></span><br><span class="line"><span class="keyword">)</span></span><br></pre></td></tr></table></figure><p>I always think of <code>compose</code> this way: <code>compose(f,g)(value)</code> is equivalent to <code>f(g(value))</code>.</p><p>As with <code>pipe</code>, note that all of the functions except the last must only take a single argument.</p><hr><p><em>Cited From <a href="http://randycoulman.com/blog/2016/05/31/thinking-in-ramda-combining-functions/" target="_blank" rel="noopener">« Thinking in Ramda: Combining Functions »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Combining-funtions&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Combining-funtions&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Combining funtions&quot;&gt;&lt;/a&gt;Thinking in Ramda: Combining funtions&lt;/h1&gt;&lt;h2 id=&quot;Simple-Combinations&quot;&gt;&lt;a href=&quot;#Simple-Combinations&quot; class=&quot;headerlink&quot; title=&quot;Simple Combinations&quot;&gt;&lt;/a&gt;Simple Combinations&lt;/h2&gt;&lt;p&gt;Once you’ve gotten used to the idea of passing functions to other functions, you might start to find situations where you want to combine sereral functions together.&lt;/p&gt;
&lt;p&gt;Ramda provides several functions for doing simple combinations.&lt;/p&gt;
&lt;h2 id=&quot;Complement&quot;&gt;&lt;a href=&quot;#Complement&quot; class=&quot;headerlink&quot; title=&quot;Complement&quot;&gt;&lt;/a&gt;Complement&lt;/h2&gt;&lt;p&gt;Ramda provides a higher-order-function,&lt;code&gt;complement&lt;/code&gt;, that takes another function and return a new function that returns &lt;code&gt;true&lt;/code&gt; when the original function returns a falsy value, and &lt;code&gt;false&lt;/code&gt; when the original function returns a truthy value.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 8</title>
    <link href="http://jiaxf.github.io/2018/04/19/8-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/8-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Lenses"><a href="#Thinking-in-Ramda-Lenses" class="headerlink" title="Thinking in Ramda: Lenses"></a>Thinking in Ramda: Lenses</h1><p>Ramda provides a more general tool for performing the operations such as read, update, and transform object properties and array elements in a declarative, immutable way, the lens.</p><h2 id="What-is-a-Lens"><a href="#What-is-a-Lens" class="headerlink" title="What is a Lens?"></a>What is a Lens?</h2><p>A lens combines a “getter” function and a “setter” function into a single unit. Ramda provides a set of functions for working with lenses.</p><p>We can think of a lens as something that focuses on a specific part of a larger data structure.</p><h2 id="How-Do-I-Create-a-Lens"><a href="#How-Do-I-Create-a-Lens" class="headerlink" title="How Do I Create a Lens?"></a>How Do I Create a Lens?</h2><p>The most generic way to create a lens in Ramda is with the lens function. lens takes a getter function and a setter function and returns the new lens.</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Randy'</span>,</span><br><span class="line">  socialMedia:&#123;</span><br><span class="line">    github: <span class="string">'randycoulamn'</span>,</span><br><span class="line">    twitter: <span class="string">'@randycoulman'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameLens = lens(prop(<span class="string">'name'</span>), assoc(<span class="string">'name'</span>))</span><br><span class="line"><span class="keyword">const</span> twitterLens = lens(</span><br><span class="line">    path([<span class="string">'socialMedia'</span>, <span class="string">'twitter'</span>]),</span><br><span class="line">    assocPath([<span class="string">'socialMedia'</span>, <span class="string">'twitter'</span>])</span><br><span class="line">)</span><br></pre></td></tr></table></figure><a id="more"></a><p>Here we’re using prop and path as our getter functions and <code>assoc</code> and <code>assocPath</code> as our setter functions.</p><p>Note that we had to duplicate the property and path arguments to these functions. Fortunately， Ramda provides nice shortcuts for the most common uses of lenses：<br><code>lensProp</code>，<code>lensPath</code>, and <code>lensIndex</code>.</p><ul><li><code>lensProp</code> creates a lens that focuses on a property of an object.</li><li><code>lensPath</code> creates a lens that focuses on a nested property of an object.</li><li><code>lensIndex</code> creates a lens that focuses on an element of an array.</li></ul><p>We could rewrite our lenses above with <code>lensProp</code> and <code>lensPath</code>:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameLens = lensProp(<span class="string">'name'</span>)</span><br><span class="line"><span class="keyword">const</span> twitterLens = lensPath([<span class="string">'socialMedia'</span>, <span class="string">'twitter'</span>])</span><br></pre></td></tr></table></figure><h2 id="What-Can-I-Do-With-It"><a href="#What-Can-I-Do-With-It" class="headerlink" title="What Can I Do With It?"></a>What Can I Do With It?</h2><p>Ramda provides three functions for working with lenses.</p><ul><li><code>view</code> reads the value of the lens.</li><li><code>set</code> updates the value of the lens.</li><li><code>over</code> applies a transformation funtion to the lens.</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">view</span><span class="params">(nameLens, person)</span></span>  <span class="comment">// =&gt;'Randy'</span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(twitterLens, <span class="string">'@randy'</span>, person)</span></span></span><br><span class="line"><span class="comment">//=&gt;&#123;</span></span><br><span class="line"><span class="comment">//  name: 'Randy',</span></span><br><span class="line"><span class="comment">//  socialMedia: &#123;</span></span><br><span class="line"><span class="comment">//    github: 'randycoulman',</span></span><br><span class="line"><span class="comment">//    twitter: '@randy'</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">over</span><span class="params">(nameLens, toUpper, person)</span></span></span><br><span class="line"><span class="comment">// =&gt; &#123;</span></span><br><span class="line"><span class="comment">//  name: 'RANDY',</span></span><br><span class="line"><span class="comment">//  socialMedia: &#123;</span></span><br><span class="line"><span class="comment">//    github: 'randycoulman',</span></span><br><span class="line"><span class="comment">//    twitter: '@randycoulman'</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Lenses can be handy if we have a somewhat complex data structure that we want to abstract away from calling code.Rather than exposing the structure or providing a getter, setter, and transformer for every accessible property,we can instead expose lenses.</p><p>Client code can the work with our data structure using <code>view</code>, <code>set</code>, and <code>over</code> without being coupled to the exact shape of the structrue.</p><hr><p><em>Cite From <a href="http://randycoulman.com/blog/2016/07/12/thinking-in-ramda-lenses/" target="_blank" rel="noopener">« Thinking in Ramda: Lenses »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Lenses&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Lenses&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Lenses&quot;&gt;&lt;/a&gt;Thinking in Ramda: Lenses&lt;/h1&gt;&lt;p&gt;Ramda provides a more general tool for performing the operations such as read, update, and transform object properties and array elements in a declarative, immutable way, the lens.&lt;/p&gt;
&lt;h2 id=&quot;What-is-a-Lens&quot;&gt;&lt;a href=&quot;#What-is-a-Lens&quot; class=&quot;headerlink&quot; title=&quot;What is a Lens?&quot;&gt;&lt;/a&gt;What is a Lens?&lt;/h2&gt;&lt;p&gt;A lens combines a “getter” function and a “setter” function into a single unit. Ramda provides a set of functions for working with lenses.&lt;/p&gt;
&lt;p&gt;We can think of a lens as something that focuses on a specific part of a larger data structure.&lt;/p&gt;
&lt;h2 id=&quot;How-Do-I-Create-a-Lens&quot;&gt;&lt;a href=&quot;#How-Do-I-Create-a-Lens&quot; class=&quot;headerlink&quot; title=&quot;How Do I Create a Lens?&quot;&gt;&lt;/a&gt;How Do I Create a Lens?&lt;/h2&gt;&lt;p&gt;The most generic way to create a lens in Ramda is with the lens function. lens takes a getter function and a setter function and returns the new lens.&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;Randy&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  socialMedia:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    github: &lt;span class=&quot;string&quot;&gt;&#39;randycoulamn&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    twitter: &lt;span class=&quot;string&quot;&gt;&#39;@randycoulman&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; nameLens = lens(prop(&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;), assoc(&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; twitterLens = lens(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path([&lt;span class=&quot;string&quot;&gt;&#39;socialMedia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;twitter&#39;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assocPath([&lt;span class=&quot;string&quot;&gt;&#39;socialMedia&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;twitter&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 9</title>
    <link href="http://jiaxf.github.io/2018/04/19/9-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/9-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-Wrap-Up"><a href="#Thinking-in-Ramda-Wrap-Up" class="headerlink" title="Thinking in Ramda: Wrap-Up"></a>Thinking in Ramda: Wrap-Up</h1><p>Ramda has some underlying principles that drive its API:</p><ul><li><p>Data last: Almost all of the functions take the data parameter as the last parameter.</p></li><li><p>Currying: Almost every function in Ramda is “curried”. That is, you can call a function with only a subset of its required arguments, and it will return a new function that takes the remaining arguments. Once all of the arguments are provided, the original function is invoked.</p><a id="more"></a><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1></li><li><p>Getting started introduces us to the idea of functions, pure functions, and immutablilty. If the gets us started by looking at the collection iteration functions like <code>map</code>, <code>filter</code>, and <code>reduce</code>.</p></li><li>Combinging Functions shows us that we can combine functions in various ways using tools such as <code>both</code>, <code>either</code>, <code>pipe</code> and <code>compose</code>.</li><li>Partial Application help us that it can be useful to only supply some of the arguments to a function, allowing a later function to supply the rest.We use <code>partial</code> and <code>curry</code> to help us with this and learn about <code>flip</code> and the placeholder(<code>__</code>).</li><li>Declarative Programming teaches us about the difference between imperative and declarative programming.We learn how to use Ramda’s declarative replacements for arithmetic, comparisons,logic and conditionals.</li><li>Pointfree Style introduces us the idea of pointfree style,also known as tacit programming.In pointfree style,we don’t actually see the data parameter that we’ar operating on;it’s implicit. Our programs are made up of small, simple building blocks that are combined together to do what we need. Only at the end do we apply out compound functions to the actual data.</li><li>Immutability and Objects returns us to the idea of working declaratively, this time giving us the tools we need to read, update, delete, and transform properties of objects.</li><li>Immutability and Arrays continues the theme and shows us how to do the same for arrays.</li><li>Lenses concludes by introducing the concept of a lens, a construct that allows us to focus on a small part of a larger data structure. Using the view, set, and over functions, we can read, update, and transform the focused value in the context of its larger data structure.</li></ul><hr><p><em>Cite from <a href="http://randycoulman.com/blog/2016/07/19/thinking-in-ramda-wrap-up/" target="_blank" rel="noopener">« Thinking in Ramda: Wrap-Up »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-Wrap-Up&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-Wrap-Up&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: Wrap-Up&quot;&gt;&lt;/a&gt;Thinking in Ramda: Wrap-Up&lt;/h1&gt;&lt;p&gt;Ramda has some underlying principles that drive its API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data last: Almost all of the functions take the data parameter as the last parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Currying: Almost every function in Ramda is “curried”. That is, you can call a function with only a subset of its required arguments, and it will return a new function that takes the remaining arguments. Once all of the arguments are provided, the original function is invoked.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>Thinking in Ramda 1</title>
    <link href="http://jiaxf.github.io/2018/04/19/1-Thinking%20in%20Ramda/"/>
    <id>http://jiaxf.github.io/2018/04/19/1-Thinking in Ramda/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thinking-in-Ramda-getting-started"><a href="#Thinking-in-Ramda-getting-started" class="headerlink" title="Thinking in Ramda: getting started"></a>Thinking in Ramda: getting started</h1><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>I’ll be using the Ramda JavaScript library fro this series,though many of the ideas apply to other JavaScript libraries such as  Underscore and Lodash as well as to other languages.</p><p>I’m going to stick to the lighter,less-academic end of functional programing.</p><h2 id="Ramda"><a href="#Ramda" class="headerlink" title="Ramda"></a>Ramda</h2><p>I find Ramda to be a nicely designed library that provides a lot of tools for doing functional programming in JavaScript in a clean, elegant way.<br><a id="more"></a></p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>Some languages go further and provide support for functions as first-class constructs. By “first-class”, I mean that functions can be used in the same way as other kinds of values.You can:</p><ul><li>refer to them from constants and variables</li><li>pass them as parameters to other Functions</li><li>return them as results from other Functions</li></ul><p>JavaScript is one such language, and we’ll be taking advantage of that.</p><h2 id="Pure-Functions"><a href="#Pure-Functions" class="headerlink" title="Pure Functions"></a>Pure Functions</h2><p>Pure functions are functions that have no side-effects.They don’t assign to any outside variables,they don’t consume input, they don’t produce output,they don’t read from or write to a database,they don’t modify the parameters they’re passed,etc.</p><p>The basic idea is that,if you call a function with the same inputs over and over again,you always get the same result.</p><p>You can certainly do things with impure functions(and you must, if you program is going to do anything interesting), but for the most part you’ll want to keep most of you functions pure.</p><h2 id="Immutability"><a href="#Immutability" class="headerlink" title="Immutability"></a>Immutability</h2><p>What dose that mean? “Immutable” means “unchangeable”.</p><p>When I’m working in an immutable fashion, once I initialize a value or an object I never change it again.That means no changing elements of an array or properties of an object.</p><p>If I need to change something in an array or object,I instead return a new copy of it with the changed value. Later posts will talk about this in great detail.</p><p>Immutability goes hand-in-hand with pure functions.Since pure functions aren’t allowed to have side-effects, they aren’t allowed to change outside data structures.They are forced to work with data in an immutable way.</p><h2 id="FOREACH"><a href="#FOREACH" class="headerlink" title="FOREACH"></a>FOREACH</h2><p>Rather than writing an explicit loop,try using the <code>forEach</code> function instead.That is:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Replace this</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">const</span> value <span class="keyword">of</span> myArray)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//With</span></span><br><span class="line">forEach(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value), myArray)</span><br></pre></td></tr></table></figure><p><code>forEach</code> takes a function an d an array, and calls the function on each element of the array.</p><h2 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h2><p>Unlike <code>forEach</code>, map collects the results of applying the function into a new array and returns it.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map(x =&gt; x *<span class="number">2</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// =&gt;[2,4,6]</span></span><br><span class="line"></span><br><span class="line">const double = x =&gt; x * <span class="number">2</span></span><br><span class="line">map(double, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// =&gt;[2,4,6]</span></span><br></pre></td></tr></table></figure><h2 id="FILTER-REJECT"><a href="#FILTER-REJECT" class="headerlink" title="FILTER/REJECT"></a>FILTER/REJECT</h2><p>As its name might suggest, <code>filter</code> selects elements from an array based on some function.<code>reject</code> does exactly the same thing, but in reverse. It keeps the elements for which the function returns a false value and excludes the values for which it returns a truthy value.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const isEven = x =&gt; x%<span class="number">2</span> === <span class="number">0</span></span><br><span class="line">filter(isEven, [<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>]) <span class="comment">// ==&gt; [2, 4]</span></span><br><span class="line"></span><br><span class="line">reject(isEven, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">// ==&gt; [1,3]</span></span><br></pre></td></tr></table></figure><h2 id="FIND"><a href="#FIND" class="headerlink" title="FIND"></a>FIND</h2><p><code>find</code> applies a function to each element of an array and returns the first element for which the function returns a truthy value.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find(isEven, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])  <span class="comment">// --&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="REDUCE"><a href="#REDUCE" class="headerlink" title="REDUCE"></a>REDUCE</h2><p><code>reduce</code> takes a two-argument function, and initial value,and the array to operate on.</p><p>The first argument to the function we pass in is called the “accumulator” and the second argument is the value from the array.The function needs to return a new accumulator value.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">add</span> = (accum, <span class="keyword">value</span>) =&gt; accum + <span class="keyword">value</span></span><br><span class="line">reduce(<span class="keyword">add</span>, <span class="number">5</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])  <span class="comment">// --&gt; 15</span></span><br></pre></td></tr></table></figure><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>By starting with these collection-iteration functions, you can get used to the idea of passing functions to other functions. You might have used these in other languages without realizing you were doing some functional programming.</p><hr><p><em>Cited From <a href="http://randycoulman.com/blog/2016/05/24/thinking-in-ramda-getting-started/" target="_blank" rel="noopener">« Thinking in Ramda: Getting Started »</a></em></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Thinking-in-Ramda-getting-started&quot;&gt;&lt;a href=&quot;#Thinking-in-Ramda-getting-started&quot; class=&quot;headerlink&quot; title=&quot;Thinking in Ramda: getting started&quot;&gt;&lt;/a&gt;Thinking in Ramda: getting started&lt;/h1&gt;&lt;h2 id=&quot;Getting-Started&quot;&gt;&lt;a href=&quot;#Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;Getting Started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;p&gt;I’ll be using the Ramda JavaScript library fro this series,though many of the ideas apply to other JavaScript libraries such as  Underscore and Lodash as well as to other languages.&lt;/p&gt;
&lt;p&gt;I’m going to stick to the lighter,less-academic end of functional programing.&lt;/p&gt;
&lt;h2 id=&quot;Ramda&quot;&gt;&lt;a href=&quot;#Ramda&quot; class=&quot;headerlink&quot; title=&quot;Ramda&quot;&gt;&lt;/a&gt;Ramda&lt;/h2&gt;&lt;p&gt;I find Ramda to be a nicely designed library that provides a lot of tools for doing functional programming in JavaScript in a clean, elegant way.&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="functional" scheme="http://jiaxf.github.io/tags/functional/"/>
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="ramda" scheme="http://jiaxf.github.io/tags/ramda/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程入门</title>
    <link href="http://jiaxf.github.io/2018/04/19/FP/"/>
    <id>http://jiaxf.github.io/2018/04/19/FP/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Function-Program"><a href="#Function-Program" class="headerlink" title="Function Program"></a>Function Program</h1><h2 id="几个原则"><a href="#几个原则" class="headerlink" title="几个原则"></a>几个原则</h2><ul><li>DRY（不要重复自己，don’t repeat yourself）</li><li>高内聚低耦合（loose coupling high cohesion）</li><li>YAGNI （你不会用到它的，ya ain’t gonna need it）</li><li>最小意外原则（Principle of least surprise）</li><li>单一责任（single responsibility）</li><li>纯函数，尽量减少副作用</li></ul><blockquote><p>纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。</p></blockquote><blockquote><p><em>副作用</em>是在计算结果的过程中，系统状态的一种变化，或者与外部世界进行的<em>可观察的交互</em>。<br><a id="more"></a></p></blockquote><p>几个数学定律应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合律（assosiative）</span></span><br><span class="line">add(add(x, y), z) == add(x, add(y, z));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换律（commutative）</span></span><br><span class="line">add(x, y) == add(y, x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同一律（identity）</span></span><br><span class="line">add(x, <span class="number">0</span>) == x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配律（distributive）</span></span><br><span class="line">multiply(x, add(y,z)) == add(multiply(x, y), multiply(x, z));</span><br></pre></td></tr></table></figure><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><p>curry 的概念很简单：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> increment = add(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> addTen = add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">increment(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">addTen(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curry = <span class="built_in">require</span>(<span class="string">'lodash'</span>).curry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> match = curry(<span class="function"><span class="keyword">function</span>(<span class="params">what, str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.match(what);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> replace = curry(<span class="function"><span class="keyword">function</span>(<span class="params">what, replacement, str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(what, replacement);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filter = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, ary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ary.filter(f);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map = curry(<span class="function"><span class="keyword">function</span>(<span class="params">f, ary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ary.map(f);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">match(<span class="regexp">/\s+/g</span>, <span class="string">"hello world"</span>);</span><br><span class="line"><span class="comment">// [ ' ' ]</span></span><br><span class="line"></span><br><span class="line">match(<span class="regexp">/\s+/g</span>)(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="comment">// [ ' ' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasSpaces = match(<span class="regexp">/\s+/g</span>);</span><br><span class="line"><span class="comment">// function(x) &#123; return x.match(/\s+/g) &#125;</span></span><br><span class="line"></span><br><span class="line">hasSpaces(<span class="string">"hello world"</span>);</span><br><span class="line"><span class="comment">// [ ' ' ]</span></span><br><span class="line"></span><br><span class="line">hasSpaces(<span class="string">"spaceless"</span>);</span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">filter(hasSpaces, [<span class="string">"tori_spelling"</span>, <span class="string">"tori amos"</span>]);</span><br><span class="line"><span class="comment">// ["tori amos"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findSpaces = filter(hasSpaces);</span><br><span class="line"><span class="comment">// function(xs) &#123; return xs.filter(function(x) &#123; return x.match(/\s+/g) &#125;) &#125;</span></span><br><span class="line"></span><br><span class="line">findSpaces([<span class="string">"tori_spelling"</span>, <span class="string">"tori amos"</span>]);</span><br><span class="line"><span class="comment">// ["tori amos"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> noVowels = replace(<span class="regexp">/[aeiou]/ig</span>);</span><br><span class="line"><span class="comment">// function(replacement, x) &#123; return x.replace(/[aeiou]/ig, replacement) &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> censored = noVowels(<span class="string">"*"</span>);</span><br><span class="line"><span class="comment">// function(x) &#123; return x.replace(/[aeiou]/ig, "*") &#125;</span></span><br><span class="line"></span><br><span class="line">censored(<span class="string">"Chocolate Rain"</span>);</span><br><span class="line"><span class="comment">// 'Ch*c*l*t* R**n'</span></span><br></pre></td></tr></table></figure><blockquote><p>“预加载”函数的能力，通过传递一到两个参数调用函数，就能得到一个记住了这些参数的新函数。</p></blockquote><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><blockquote><p>高阶函数（higher order function）（高阶函数：参数或返回值为函数的函数）。</p></blockquote><h2 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h2><p><code>组合</code>（compose，以下将称之为组合）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">f,g</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(g(x));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>f</code> 和 <code>g</code> 都是函数，<code>x</code> 是在它们之间通过“管道”传输的值。在 <code>compose</code> 的定义中，<code>g</code> 将先于 <code>f</code> 执行，因此就创建了一个从右到左的数据流。</p><p><code>组合</code>将两个函数结合产生一个新函数。组合用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> toUpperCase = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x.toUpperCase(); &#125;;</span><br><span class="line"><span class="keyword">var</span> exclaim = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x + <span class="string">'!'</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> shout = compose(exclaim, toUpperCase);</span><br><span class="line"></span><br><span class="line">shout(<span class="string">"send in the clowns"</span>);</span><br><span class="line"><span class="comment">//=&gt; "SEND IN THE CLOWNS!"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> head = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x[<span class="number">0</span>]; &#125;;</span><br><span class="line"><span class="keyword">var</span> reverse = reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc, x</span>)</span>&#123; <span class="keyword">return</span> [x].concat(acc); &#125;, []);</span><br><span class="line"><span class="keyword">var</span> last = compose(head, reverse);</span><br><span class="line"></span><br><span class="line">last([<span class="string">'jumpkick'</span>, <span class="string">'roundhouse'</span>, <span class="string">'uppercut'</span>]);</span><br><span class="line"><span class="comment">//=&gt; 'uppercut'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合律（associativity）</span></span><br><span class="line"><span class="keyword">var</span> associative = compose(f, compose(g, h)) == compose(compose(f, g), h);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>符合结合律意味着不管你是把 <code>g</code> 和 <code>h</code> 分到一组，还是把 <code>f</code> 和 <code>g</code> 分到一组都不重要。所以，如果我们想把字符串变为大写，可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compose(toUpperCase, compose(head, reverse));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">compose(compose(toUpperCase, head), reverse);</span><br></pre></td></tr></table></figure><p>因为如何为 <code>compose</code> 的调用分组不重要，所以结果都是一样的。</p><p>结合律的一大好处是任何一个函数分组都可以被拆开来，然后再以它们自己的组合方式打包在一起。让我们来重构重构前面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loudLastUpper = compose(exclaim, toUpperCase, head, reverse);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">var</span> last = compose(head, reverse);</span><br><span class="line"><span class="keyword">var</span> loudLastUpper = compose(exclaim, toUpperCase, last);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">var</span> last = compose(head, reverse);</span><br><span class="line"><span class="keyword">var</span> angry = compose(exclaim, toUpperCase);</span><br><span class="line"><span class="keyword">var</span> loudLastUpper = compose(angry, last);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更多变种...</span></span><br></pre></td></tr></table></figure><h2 id="pointfree"><a href="#pointfree" class="headerlink" title="pointfree"></a>pointfree</h2><p>pointfree 模式指的是，永远不必说出你的数据。函数无须提及将要操作的数据是什么样的。一等公民的函数、柯里化（curry）以及组合协作起来非常有助于实现这种模式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非 pointfree，因为提到了数据：word</span></span><br><span class="line"><span class="keyword">var</span> snakeCase = <span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> word.toLowerCase().replace(<span class="regexp">/\s+/ig</span>, <span class="string">'_'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pointfree</span></span><br><span class="line"><span class="keyword">var</span> snakeCase = compose(replace(<span class="regexp">/\s+/ig</span>, <span class="string">'_'</span>), toLowerCase);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非 pointfree，因为提到了数据：name</span></span><br><span class="line"><span class="keyword">var</span> initials = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> name.split(<span class="string">' '</span>).map(compose(toUpperCase, head)).join(<span class="string">'. '</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pointfree</span></span><br><span class="line"><span class="keyword">var</span> initials = compose(join(<span class="string">'. '</span>), map(compose(toUpperCase, head)), split(<span class="string">' '</span>));</span><br><span class="line"></span><br><span class="line">initials(<span class="string">"hunter stockton thompson"</span>);</span><br><span class="line"><span class="comment">// 'H. S. T'</span></span><br></pre></td></tr></table></figure><p>pointfree 模式能够帮助我们减少不必要的命名，让代码保持简洁和通用。对函数式代码来说，pointfree 是非常好的石蕊试验，因为它能告诉我们一个函数是否是接受输入返回输出的小函数。比如，while 循环是不能组合的。不过你也要警惕，pointfree 就像是一把双刃剑，有时候也能混淆视听。并非所有的函数式代码都是 pointfree 的，不过这没关系。可以使用它的时候就使用，不能使用的时候就用普通函数。</p><p>组合的一个常见错误是，在没有局部调用之前，就组合类似 map 这样接受两个参数的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误做法：我们传给了 `angry` 一个数组，根本不知道最后传给 `map` 的是什么东西。</span></span><br><span class="line"><span class="keyword">var</span> latin = compose(map, angry, reverse);</span><br><span class="line"></span><br><span class="line">latin([<span class="string">"frog"</span>, <span class="string">"eyes"</span>]);</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法：每个函数都接受一个实际参数。</span></span><br><span class="line"><span class="keyword">var</span> latin = compose(map(angry), reverse);</span><br><span class="line"></span><br><span class="line">latin([<span class="string">"frog"</span>, <span class="string">"eyes"</span>]);</span><br><span class="line"><span class="comment">// ["EYES!", "FROG!"])</span></span><br></pre></td></tr></table></figure><p>如果在 debug 组合的时候遇到了困难，那么可以使用下面这个实用的，但是不纯的 <code>trace</code> 函数来追踪代码的执行情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trace = curry(<span class="function"><span class="keyword">function</span>(<span class="params">tag, x</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(tag, x);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dasherize = compose(join(<span class="string">'-'</span>), toLower, split(<span class="string">' '</span>), replace(<span class="regexp">/\s&#123;2,&#125;/ig</span>, <span class="string">' '</span>));</span><br><span class="line"></span><br><span class="line">dasherize(<span class="string">'The world is a vampire'</span>);</span><br><span class="line"><span class="comment">// TypeError: Cannot read property 'apply' of undefined</span></span><br></pre></td></tr></table></figure><p>这里报错了，来 <code>trace</code> 下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dasherize = compose(join(<span class="string">'-'</span>), toLower, trace(<span class="string">"after split"</span>), split(<span class="string">' '</span>), replace(<span class="regexp">/\s&#123;2,&#125;/ig</span>, <span class="string">' '</span>));</span><br><span class="line"><span class="comment">// after split [ 'The', 'world', 'is', 'a', 'vampire' ]</span></span><br></pre></td></tr></table></figure><p>啊！<code>toLower</code> 的参数是一个数组，所以需要先用 <code>map</code> 调用一下它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dasherize = compose(join(<span class="string">'-'</span>), map(toLower), split(<span class="string">' '</span>), replace(<span class="regexp">/\s&#123;2,&#125;/ig</span>, <span class="string">' '</span>));</span><br><span class="line"></span><br><span class="line">dasherize(<span class="string">'The world is a vampire'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'the-world-is-a-vampire'</span></span><br></pre></td></tr></table></figure><p><code>trace</code> 函数允许我们在某个特定的点观察数据以便 debug。像 haskell 和 purescript 之类的语言出于开发的方便，也都提供了类似的函数。</p><blockquote><p>However, it does offer a different style of coding, a style that’s taken for granted in purely functional programming languages: Ramda makes it simple for you to build complex logic through functional composition. Note that any library with a compose function will allow you do functional composition; the real point here is: “makes it simple”.</p></blockquote><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>回调（callback）是通往地狱的狭窄的螺旋阶梯。使用 Quildreen Motta 的 <a href="http://folktalejs.org/" target="_blank" rel="noopener">Folktale</a> 里的 <code>Data.Task</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node readfile example:</span></span><br><span class="line"><span class="comment">//=======================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  readFile :: String -&gt; Task(Error, JSON)</span></span><br><span class="line"><span class="keyword">var</span> readFile = <span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="function"><span class="keyword">function</span>(<span class="params">reject, result</span>) </span>&#123;</span><br><span class="line">    fs.readFile(filename, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      err ? reject(err) : result(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">readFile(<span class="string">"metamorphosis"</span>).map(split(<span class="string">'\n'</span>)).map(head);</span><br><span class="line"><span class="comment">// Task("One morning, as Gregor Samsa was waking up from anxious dreams, he discovered that</span></span><br><span class="line"><span class="comment">// in bed he had been changed into a monstrous verminous bug.")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery getJSON example:</span></span><br><span class="line"><span class="comment">//========================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  getJSON :: String -&gt; &#123;&#125; -&gt; Task(Error, JSON)</span></span><br><span class="line"><span class="keyword">var</span> getJSON = curry(<span class="function"><span class="keyword">function</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Task(<span class="function"><span class="keyword">function</span>(<span class="params">reject, result</span>) </span>&#123;</span><br><span class="line">    $.getJSON(url, params, result).fail(reject);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">'/video'</span>, &#123;<span class="attr">id</span>: <span class="number">10</span>&#125;).map(_.prop(<span class="string">'title'</span>));</span><br><span class="line"><span class="comment">// Task("Family Matters ep 15")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入普通的实际值也没问题</span></span><br><span class="line">Task.of(<span class="number">3</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">three</span>)</span>&#123; <span class="keyword">return</span> three + <span class="number">1</span> &#125;);</span><br><span class="line"><span class="comment">// Task(4)</span></span><br></pre></td></tr></table></figure><p>例子中的 <code>reject</code> 和 <code>result</code> 函数分别是失败和成功的回调。正如你看到的，我们只是简单地调用 <code>Task</code> 的 <code>map</code> 函数，就能操作将来的值，好像这个值就在那儿似的。到现在 <code>map</code> 对你来说应该不稀奇了。</p><p>如果熟悉 promise 的话，你该能认出来 <code>map</code> 就是 <code>then</code>，<code>Task</code> 就是一个 promise。如果不熟悉你也不必气馁，反正我们也不会用它，因为它并不纯；但刚才的类比还是成立的。</p><p>与 <code>IO</code> 类似，<code>Task</code> 在我们给它绿灯之前是不会运行的。事实上，正因为它要等我们的命令，<code>IO</code> 实际就被纳入到了 <code>Task</code> 名下，代表所有的异步操作——<code>readFile</code> 和 <code>getJSON</code> 并不需要一个额外的 <code>IO</code> 容器来变纯。更重要的是，当我们调用它的 <code>map</code> 的时候，<code>Task</code> 工作的方式与 <code>IO</code> 几无差别：都是把对未来的操作的指示放在一个时间胶囊里，就像家务列表（chore chart）那样——真是一种精密的拖延术。</p><h2 id="一点理论"><a href="#一点理论" class="headerlink" title="一点理论"></a>一点理论</h2><p>前面提到，functor 的概念来自于范畴学，并满足一些定律。我们先来探索这些实用的定律。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// identity</span></span><br><span class="line">map(id) === id;</span><br><span class="line"></span><br><span class="line"><span class="comment">// composition</span></span><br><span class="line">compose(map(f), map(g)) === map(compose(f, g));</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们已经认识了几个不同的 functor，但它们的数量其实是无限的。有一些值得注意的可迭代数据类型（iterable data structure）我们没有介绍，像 tree、list、map 和 pair 等，以及所有你能说出来的。eventstream 和 observable 也都是 functor。</p><h2 id="chain-函数"><a href="#chain-函数" class="headerlink" title="chain 函数"></a>chain 函数</h2><p><code>chain</code> 可以轻松地嵌套多个作用，因此我们就能以一种纯函数式的方式来表示 <em>序列</em>（sequence） 和 <em>变量赋值</em>（variable assignment）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getJSON :: Url -&gt; Params -&gt; Task JSON</span></span><br><span class="line"><span class="comment">// querySelector :: Selector -&gt; IO DOM</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">'/authenticate'</span>, &#123;<span class="attr">username</span>: <span class="string">'stale'</span>, <span class="attr">password</span>: <span class="string">'crackers'</span>&#125;)</span><br><span class="line">  .chain(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getJSON(<span class="string">'/friends'</span>, &#123;<span class="attr">user_id</span>: user.id&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Task([&#123;name: 'Seimith', id: 14&#125;, &#123;name: 'Ric', id: 39&#125;]);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">querySelector(<span class="string">"input.username"</span>).chain(<span class="function"><span class="keyword">function</span>(<span class="params">uname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> querySelector(<span class="string">"input.email"</span>).chain(<span class="function"><span class="keyword">function</span>(<span class="params">email</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IO.of(</span><br><span class="line">      <span class="string">"Welcome "</span> + uname.value + <span class="string">" "</span> + <span class="string">"prepare for spam at "</span> + email.value</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// IO("Welcome Olivia prepare for spam at olivia@tremorcontrol.net");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Maybe.of(<span class="number">3</span>).chain(<span class="function"><span class="keyword">function</span>(<span class="params">three</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Maybe.of(<span class="number">2</span>).map(add(three));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Maybe(5);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Maybe.of(<span class="literal">null</span>).chain(safeProp(<span class="string">'address'</span>)).chain(safeProp(<span class="string">'street'</span>));</span><br><span class="line"><span class="comment">// Maybe(null);</span></span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">querySelector(<span class="string">"input.username"</span>).chain(<span class="function"><span class="keyword">function</span><span class="params">(uname)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> querySelector(<span class="string">"input.email"</span>).map(<span class="function"><span class="keyword">function</span><span class="params">(email)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Welcome"</span> + uname.value + <span class="string">" prepare for spam at "</span> + email.value;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>返回的如果是”普通值”就用<code>map</code>，如果是<code>functor</code>就用<code>chain</code>。</p></blockquote><h3 id="等式推导（equational-reasoning）"><a href="#等式推导（equational-reasoning）" class="headerlink" title="等式推导（equational reasoning）"></a>等式推导（equational reasoning）</h3><h3 id="可靠特性-reliable-properties"><a href="#可靠特性-reliable-properties" class="headerlink" title="可靠特性(reliable properties)"></a>可靠特性(reliable properties)</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// upload :: String -&gt; (String -&gt; a) -&gt; Void</span></span><br><span class="line"><span class="keyword">var</span> upload = <span class="function"><span class="keyword">function</span><span class="params">(filename, callback)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!filename) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"You need a filename!"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    readFile(filename, <span class="function"><span class="keyword">function</span><span class="params">(err, contents)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">        httpPost(contents, <span class="function"><span class="keyword">function</span><span class="params">(err, json)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">            callback(json);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">函数式编程</span><br><span class="line">// readFile :: Filename -&gt; Either <span class="built_in">String</span> （Future <span class="literal">Error</span> <span class="built_in">String</span>）</span><br><span class="line">// httpPost :: <span class="built_in">String</span> -&gt; Futrue <span class="literal">Error</span> JSON</span><br><span class="line"></span><br><span class="line">// upload :: <span class="built_in">String</span> -&gt; Either <span class="built_in">String</span> (Futrue <span class="literal">Error</span> JSON)</span><br><span class="line">var upload = compose(<span class="keyword">map</span>(chain(httpPost('/uploads'))), readFile);</span><br></pre></td></tr></table></figure><h1 id="函数式编程理论"><a href="#函数式编程理论" class="headerlink" title="函数式编程理论"></a>函数式编程理论</h1><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合律</span></span><br><span class="line">compose(<span class="keyword">join</span>, <span class="built_in">map</span>(<span class="keyword">join</span>)) == compose(<span class="keyword">join</span>, <span class="keyword">join</span>)</span><br></pre></td></tr></table></figure><p>这个定律表明了monad的嵌套本质，</p><ul><li>join</li><li>map</li><li>compose</li><li>curry</li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同一律</span></span><br><span class="line">compose(<span class="keyword">join</span>, <span class="keyword">of</span>) == compose(<span class="keyword">join</span>, map(<span class="keyword">of</span>)) == id</span><br></pre></td></tr></table></figure><pre><code>对任意的monad `M` `of` 和`join`相当与`id`，也可以使用`map(of)`由内而外实现相同效果。这个定律叫“三角同一律”（triangle identity）。</code></pre><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mcompose = <span class="function"><span class="keyword">function</span><span class="params">(f, g)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  return compose(chain(f), chain(g));</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 左同一律</span></span></span><br><span class="line"><span class="function"><span class="title">mcompose</span><span class="params">(M, f)</span> == <span class="title">f</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 右同一律</span></span></span><br><span class="line"><span class="function"><span class="title">mcompose</span><span class="params">(f, M)</span> == <span class="title">f</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 结合律</span></span></span><br><span class="line"><span class="function"><span class="title">mcompose</span><span class="params">(mcompose(f, g)</span>, <span class="title">h</span>) == <span class="title">mcompose</span><span class="params">(f, mcompose(g, h)</span>)</span></span><br></pre></td></tr></table></figure><p>monad 来自于一个叫 “Kleisli 范畴”的范畴，这个范畴里边所有的对象都是 monad，所有的态射都是联结函数（chained funtions）。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>monad 让我们深入到嵌套的运算当中，使我们能够在完全避免回调金字塔（pyramid of doom）情况下，为变量赋值，运行有序的作用，执行异步任务等等。当一个值被困在几层相同类型的容器中时，monad 能够拯救它。借助 “pointed” 这个可靠的帮手，monad 能够借给我们从盒子中取出的值，而且知道我们会在结束使用后还给它。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Function-Program&quot;&gt;&lt;a href=&quot;#Function-Program&quot; class=&quot;headerlink&quot; title=&quot;Function Program&quot;&gt;&lt;/a&gt;Function Program&lt;/h1&gt;&lt;h2 id=&quot;几个原则&quot;&gt;&lt;a href=&quot;#几个原则&quot; class=&quot;headerlink&quot; title=&quot;几个原则&quot;&gt;&lt;/a&gt;几个原则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DRY（不要重复自己，don’t repeat yourself）&lt;/li&gt;
&lt;li&gt;高内聚低耦合（loose coupling high cohesion）&lt;/li&gt;
&lt;li&gt;YAGNI （你不会用到它的，ya ain’t gonna need it）&lt;/li&gt;
&lt;li&gt;最小意外原则（Principle of least surprise）&lt;/li&gt;
&lt;li&gt;单一责任（single responsibility）&lt;/li&gt;
&lt;li&gt;纯函数，尽量减少副作用&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;副作用&lt;/em&gt;是在计算结果的过程中，系统状态的一种变化，或者与外部世界进行的&lt;em&gt;可观察的交互&lt;/em&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="js" scheme="http://jiaxf.github.io/tags/js/"/>
    
      <category term="函数式编程" scheme="http://jiaxf.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程入门（2）</title>
    <link href="http://jiaxf.github.io/2018/04/19/applicativeFunctor/"/>
    <id>http://jiaxf.github.io/2018/04/19/applicativeFunctor/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Applicative-functor"><a href="#Applicative-functor" class="headerlink" title="Applicative functor"></a>Applicative functor</h1><p>应用applicative functor作为一个接口可以让不通funcotr可以相互应用（apply）的能力。</p><h2 id="协调与激励"><a href="#协调与激励" class="headerlink" title="协调与激励"></a>协调与激励</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Http.get :: String -&gt; Task Error HTML</span></span><br><span class="line"><span class="keyword">var</span> renderPage = curry(<span class="function"><span class="keyword">function</span></span>(destinations, event) &#123;</span><br><span class="line">    <span class="comment">/* render page */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Task.of(renderPage).ap(Http.<span class="keyword">get</span>(<span class="string">'/destinations'</span>)).ap(Http.<span class="keyword">get</span>(<span class="string">'/events'</span>))</span><br><span class="line"><span class="comment">// Task("&lt;div&gt;some page with dest and events&lt;/div&gt;")</span></span><br></pre></td></tr></table></figure><p>两个请求将会同时立即执行，当两者的响应都返回之后，renderPage 就会被调用。这与 monad 版本的那种必须等待前一个任务完成才能继续执行后面的操作完全不同。本来我们就无需根据目的地来获取事件，因此也就不需要依赖顺序执行。</p><p>再次强调，因为我们是使用局部调用的函数来达成上述结果的，所以必须要保证 renderpage 是 curry 函数，否则它就不会一直等到两个 Task 都完成。而且如果你碰巧自己做过类似的事，那你一定会感激 applicative functor 这个异常简洁的接口的。这就是那种能够让我们离“奇点”（singularity）更近一步的优美代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 帮助函数：</span></span><br><span class="line"><span class="comment">// ===================</span></span><br><span class="line"><span class="comment">// $ :: String -&gt; IO DOM</span></span><br><span class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(selector)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getVal :: String -&gt; IO String</span></span><br><span class="line"><span class="keyword">var</span> getVal = compose(map(_.prop(<span class="string">'value'</span>)), $);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exapmle</span></span><br><span class="line"><span class="comment">// ===================</span></span><br><span class="line"><span class="comment">// signIn :: String -&gt; String -&gt; Bool -&gt; User</span></span><br><span class="line"><span class="keyword">var</span> signIn = curry(<span class="function"><span class="keyword">function</span>(<span class="params">username, password, remember_me</span>)) </span>&#123;<span class="comment">/* singing in */</span>&#125;</span><br><span class="line"></span><br><span class="line">IO.of(signIn).ap(getVal(<span class="string">'#email'</span>)).ap(getVal(<span class="string">'#password'</span>)).ap(IO.of(<span class="literal">false</span>));</span><br></pre></td></tr></table></figure><p><code>signIn</code> 是一个接收 3 个参数的 curry 函数，因此我们需要调用 <code>ap</code> 3 次。在每一次的 <code>ap</code> 调用中，<code>signIn</code> 就收到一个参数然后运行，直到所有的参数都传进来，它也就执行完毕了。我们可以继续扩展这种模式，处理任意多的参数。另外，左边两个参数在使用 getVal 调用后自然而然地成为了一个 <code>IO</code>，但是最右边的那个却需要手动 <code>lift</code>，然后变成一个 <code>IO</code>，这是因为 <code>ap</code> 需要调用者及其参数都属于同一类型。</p><h2 id="lift"><a href="#lift" class="headerlink" title="lift"></a>lift</h2><p>我们来试试以一种 pointfree 的方式调用 applicative functor。因为 <code>map</code> 等价于 <code>of/ap</code>，那么我们就可以定义无数个能够 <code>ap</code> 通用函数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> liftA2 = curry(<span class="function"><span class="keyword">function</span><span class="params">(f, functor1, functor2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> functor1.map(f).ap(functor2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> liftA3 = curry(<span class="function"><span class="keyword">function</span><span class="params">(f, functor1, functor2, functor3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> functor1.map(f).ap(functor2).ap(functor3);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// liftA4, etc</span></span><br></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>在haskell、scala、PureScript以及swift等语言中，开发者可以创建自定义的中缀操作符(infix operators)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- haskell</span><br><span class="line">add <span class="tag">&lt;<span class="name">$</span>&gt;</span> Right 2 <span class="tag">&lt;<span class="name">*</span>&gt;</span> Right 3</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map(add, Right(<span class="number">2</span>)).ap(Right(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><code>&lt;$&gt;</code> 就是<code>map</code>（亦即<code>fmap</code>）， <code>&lt;*&gt;</code>就是<code>ap</code>。</p><h2 id="衍生函数（derived-function）"><a href="#衍生函数（derived-function）" class="headerlink" title="衍生函数（derived function）"></a>衍生函数（derived function）</h2><p><code>of/ap</code> 等价于<code>map</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从of/ap衍生出的map</span></span><br><span class="line">X.prototype.map = function(f) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">constructor</span>.of(f).ap(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果已经有<code>chain</code>函数，可以免费得到functor 和 applicative：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从chain 衍生出的map</span></span><br><span class="line">X.prototype.map = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> m = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> m.chain(<span class="function"><span class="keyword">function</span><span class="params">(a)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m.constructor.of(f(a));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 chain/map 衍生出的ap</span></span><br><span class="line">X.prototype.ap = <span class="function"><span class="keyword">function</span><span class="params">(other)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.chain(<span class="function"><span class="keyword">function</span><span class="params">(f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> other.map(f);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定律"><a href="#定律" class="headerlink" title="定律"></a>定律</h2><p>applicative functor 是“组合关闭”（closed under composition）的，意味着 <code>ap</code> 永远不会改变容器类型。</p><p>###　同一律<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同一律</span></span><br><span class="line">A.of<span class="comment">(id)</span>.ap<span class="comment">(v)</span> == v</span><br></pre></td></tr></table></figure></p><h3 id="同态"><a href="#同态" class="headerlink" title="同态"></a>同态</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同态</span></span><br><span class="line">A.of<span class="comment">(f)</span>.ap<span class="comment">(A.of(x)</span>) == A.of<span class="comment">(f(x)</span>)</span><br></pre></td></tr></table></figure><p>同态就是一个能够保持接结构的映射（structure preserving map).实际上，funcotr就是一个再不通范畴间的同态，因为funcotr在经过映射之后保持了原始范畴的结构。</p><h3 id="互换（interchange）"><a href="#互换（interchange）" class="headerlink" title="互换（interchange）"></a>互换（interchange）</h3><p>互换（interchange）表明的是选择让函数再<code>ap</code>的左边还是右边发生lift是无关紧要的。</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 互换</span></span><br><span class="line">v.ap(A.<span class="keyword">of</span>(x)) == A.<span class="keyword">of</span>(<span class="function"><span class="keyword">function</span><span class="params">(f)</span> <span class="comment">&#123; return f(x)&#125;</span>).<span class="title">ap</span><span class="params">(v)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var v = <span class="keyword">Task</span>.<span class="keyword">of</span>(_.<span class="keyword">reverse</span>);</span><br><span class="line">var x = <span class="symbol">'Sparklehorse</span>';</span><br><span class="line"></span><br><span class="line">v.ap(<span class="keyword">Task</span>.<span class="keyword">of</span>(x)) == <span class="keyword">Task</span>.<span class="keyword">of</span>(<span class="keyword">function</span>(f) &#123; <span class="keyword">return</span> f(x)&#125;).ap(v)</span><br></pre></td></tr></table></figure><h3 id="组合（composition"><a href="#组合（composition" class="headerlink" title="组合（composition)"></a>组合（composition)</h3><p>组合不过是在检查标准的函数组合是否适用于容器内部的函数调用。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合</span></span><br><span class="line">A.of<span class="comment">(compose)</span>.ap<span class="comment">(u)</span>.ap<span class="comment">(v)</span>.ap<span class="comment">(w)</span> == u.ap<span class="comment">(v.ap(w)</span>);</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">u</span> = IO.of(_.toUpper);</span><br><span class="line"><span class="keyword">var</span> v = IO.of(_.concat(<span class="string">"&amp; beyond"</span>));</span><br><span class="line"><span class="keyword">var</span> w = IO.of(<span class="string">"lood bath"</span>);</span><br><span class="line"></span><br><span class="line">IO.of(_compose).<span class="keyword">ap</span>(<span class="keyword">u</span>).<span class="keyword">ap</span>(v).<span class="keyword">ap</span>(w) == <span class="keyword">u</span>.<span class="keyword">ap</span>(v.<span class="keyword">ap</span>(w))</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>函数式嗯编程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Applicative-functor&quot;&gt;&lt;a href=&quot;#Applicative-functor&quot; class=&quot;headerlink&quot; title=&quot;Applicative functor&quot;&gt;&lt;/a&gt;Applicative functor&lt;/h1&gt;&lt;p&gt;应用
      
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="js" scheme="http://jiaxf.github.io/tags/js/"/>
    
      <category term="函数式编程" scheme="http://jiaxf.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>范畴学基本知识</title>
    <link href="http://jiaxf.github.io/2018/04/19/category%20theory/"/>
    <id>http://jiaxf.github.io/2018/04/19/category theory/</id>
    <published>2018-04-19T03:48:54.000Z</published>
    <updated>2018-04-19T03:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="范畴学基本知识"><a href="#范畴学基本知识" class="headerlink" title="范畴学基本知识"></a>范畴学基本知识</h2><p>范畴学（category theory）是数学中的一个抽象分支，能够形式化诸如集合论（set theory）、类型论（type theory）、群论（group theory）以及逻辑学（logic）等数学分支中的一些概念。范畴学主要处理对象（object）、态射（morphism）和变化式（transformation），而这些概念跟编程的联系非常紧密。下图是一些相同的概念分别在不同理论下的形式：<br><a id="more"></a></p><p><img src="/images/cat_theory.png"></p><p>在范畴学中，有一个概念叫做…范畴。有着以下这些组件（component）的搜集（collection）就构成了一个范畴：</p><ul><li>对象的搜集</li><li>态射的搜集</li><li>态射的组合</li><li>identity 这个独特的态射</li></ul><p><strong>对象的搜集</strong></p><p>对象就是数据类型，例如 <code>String</code>、<code>Boolean</code>、<code>Number</code> 和 <code>Object</code> 等等。通常我们把数据类型视作所有可能的值的一个集合（set）。像 <code>Boolean</code> 就可以看作是 <code>[true, false]</code> 的集合，<code>Number</code> 可以是所有实数的一个集合。把类型当作集合对待是有好处的，因为我们可以利用集合论（set theory）处理类型。</p><p><strong>态射的搜集</strong></p><p>态射是标准的、普通的纯函数。</p><p><strong>态射的组合</strong></p><p><code>compose</code> 函数是符合结合律的，这并非巧合，结合律是在范畴学中对任何组合都适用的一个特性。</p><p>这张图展示了什么是组合：</p><p><img src="/images/cat_comp1.png"><br><img src="/images/cat_comp2.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> x.length; &#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> x === <span class="number">4</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> isFourLetterWord = compose(f, g);</span><br></pre></td></tr></table></figure><p><strong>identity 这个独特的态射</strong></p><p>让我们介绍一个名为 <code>id</code> 的实用函数。这个函数接受随便什么输入然后原封不动地返回它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> x; &#125;;</span><br></pre></td></tr></table></figure><p>除了类型和函数，还有什么范畴呢？还有很多，比如我们可以定义一个有向图（directed graph），以节点为对象，以边为态射，以路径连接为组合。还可以定义一个实数类型（Number），以所有的实数对象，以 &gt;= 为态射（实际上任何偏序（partial order）或全序（total order）都可以成为一个范畴）。</p><h3 id="命令式编程-和-申明式编程-区别"><a href="#命令式编程-和-申明式编程-区别" class="headerlink" title="命令式编程 和 申明式编程 区别"></a>命令式编程 和 申明式编程 区别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令式</span></span><br><span class="line"><span class="keyword">var</span> makes = [];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cars.length; i++) &#123;</span><br><span class="line">  makes.push(cars[i].make);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式</span></span><br><span class="line"><span class="keyword">var</span> makes = cars.map(<span class="function"><span class="keyword">function</span>(<span class="params">car</span>)</span>&#123; <span class="keyword">return</span> car.make; &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令式</span></span><br><span class="line"><span class="keyword">var</span> authenticate = <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = toUser(form);</span><br><span class="line">  <span class="keyword">return</span> logIn(user);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式</span></span><br><span class="line"><span class="keyword">var</span> authenticate = compose(logIn, toUser);</span><br></pre></td></tr></table></figure><p>声明式代码不指定执行顺序，所以它天然地适合进行并行运算。它与纯函数一起解释了为何函数式编程是未来并行计算的一个不错选择——我们真的不需要做什么就能实现一个并行／并发系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;范畴学基本知识&quot;&gt;&lt;a href=&quot;#范畴学基本知识&quot; class=&quot;headerlink&quot; title=&quot;范畴学基本知识&quot;&gt;&lt;/a&gt;范畴学基本知识&lt;/h2&gt;&lt;p&gt;范畴学（category theory）是数学中的一个抽象分支，能够形式化诸如集合论（set theory）、类型论（type theory）、群论（group theory）以及逻辑学（logic）等数学分支中的一些概念。范畴学主要处理对象（object）、态射（morphism）和变化式（transformation），而这些概念跟编程的联系非常紧密。下图是一些相同的概念分别在不同理论下的形式：&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jiaxf.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javascript" scheme="http://jiaxf.github.io/tags/javascript/"/>
    
      <category term="js" scheme="http://jiaxf.github.io/tags/js/"/>
    
      <category term="函数式编程" scheme="http://jiaxf.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
